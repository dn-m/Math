[{
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1160,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>protocol BidirectionalCollection : <Type usr=\"s:Sl\">Collection<\/Type> where <Type usr=\"s:SK4Selfxmfp\">Self<\/Type>.Indices : <Type usr=\"s:SK\">BidirectionalCollection<\/Type>, <Type usr=\"s:SK4Selfxmfp\">Self<\/Type>.SubSequence : <Type usr=\"s:SK\">BidirectionalCollection<\/Type><\/Declaration>",
        "key.bodylength" : 616,
        "key.bodyoffset" : 243,
        "key.doc.declaration" : "protocol BidirectionalCollection : Collection where Self.Indices : BidirectionalCollection, Self.SubSequence : BidirectionalCollection",
        "key.doc.discussion" : [
          {
            "Para" : "Bidirectional collections offer traversal backward from any valid index, not including a collection’s `startIndex`. Bidirectional collections can therefore offer additional operations, such as a `last` property that provides efficient access to the last element and a `reversed()` method that presents the elements in reverse order. In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as `suffix(_:)`."
          },
          {
            "Para" : "To add `BidirectionalProtocol` conformance to your custom types, implement the `index(before:)` method in addition to the requirements of the `Collection` protocol."
          },
          {
            "Para" : "Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction. That is, for any index `i` into a bidirectional collection `c`:"
          },
          {
            "List-Bullet" : ""
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>BidirectionalCollection<\/Name><USR>s:SK<\/USR><Declaration>protocol BidirectionalCollection : Collection where Self.Indices : BidirectionalCollection, Self.SubSequence : BidirectionalCollection<\/Declaration><CommentParts><Abstract><Para>A collection that supports backward as well as forward traversal.<\/Para><\/Abstract><Discussion><Para>Bidirectional collections offer traversal backward from any valid index, not including a collection’s <codeVoice>startIndex<\/codeVoice>. Bidirectional collections can therefore offer additional operations, such as a <codeVoice>last<\/codeVoice> property that provides efficient access to the last element and a <codeVoice>reversed()<\/codeVoice> method that presents the elements in reverse order. In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as <codeVoice>suffix(_:)<\/codeVoice>.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the BidirectionalCollection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>To add <codeVoice>BidirectionalProtocol<\/codeVoice> conformance to your custom types, implement the <codeVoice>index(before:)<\/codeVoice> method in addition to the requirements of the <codeVoice>Collection<\/codeVoice> protocol.<\/Para><Para>Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction. That is, for any index <codeVoice>i<\/codeVoice> into a bidirectional collection <codeVoice>c<\/codeVoice>:<\/Para><List-Bullet><Item><Para>If <codeVoice>i &gt;= c.startIndex &amp;&amp; i &lt; c.endIndex<\/codeVoice>, <codeVoice>c.index(before: c.index(after: i)) == i<\/codeVoice>.<\/Para><\/Item><Item><Para>If <codeVoice>i &gt; c.startIndex &amp;&amp; i &lt;= c.endIndex<\/codeVoice> <codeVoice>c.index(after: c.index(before: i)) == i<\/codeVoice>.<\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "BidirectionalCollection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>BidirectionalCollection<\/decl.name> : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:SK4Selfxmfp\">Self<\/ref.generic_type_param>.Indices : <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:SK4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence : <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 694,
        "key.modulename" : "Swift",
        "key.name" : "BidirectionalCollection",
        "key.namelength" : 23,
        "key.nameoffset" : 176,
        "key.offset" : 166,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func closest(to target: <Type usr=\"s:SK7ElementQa\">Element<\/Type>) -&gt; <Type usr=\"s:SK7ElementQa\">Element<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 462
              }
            ],
            "key.bodylength" : 342,
            "key.bodyoffset" : 515,
            "key.doc.column" : 17,
            "key.doc.comment" : "Get the closest value in Array to target value.\n\n- Parameter target: Value to check for closest component\n\n- Returns: Value closest to target is !self.isEmpty. Otherwise nil.",
            "key.doc.declaration" : "public func closest(to target: Element) -> Element?",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift\" line=\"18\" column=\"17\"><Name>closest(to:)<\/Name><USR>s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE7closest2toACSgAC_tF<\/USR><Declaration>public func closest(to target: Element) -&gt; Element?<\/Declaration><CommentParts><Abstract><Para>Get the closest value in Array to target value.<\/Para><\/Abstract><Parameters><Parameter><Name>target<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Value to check for closest component<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Value closest to target is !self.isEmpty. Otherwise nil.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 18,
            "key.doc.name" : "closest(to:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Value to check for closest component"
                  }
                ],
                "name" : "target"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "Value closest to target is !self.isEmpty. Otherwise nil."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 209,
            "key.docoffset" : 249,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closest<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>target<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:SK7ElementQa\">Element<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.associatedtype usr=\"s:SK7ElementQa\">Element<\/ref.associatedtype>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 389,
            "key.name" : "closest(to:)",
            "key.namelength" : 27,
            "key.nameoffset" : 474,
            "key.offset" : 469,
            "key.parsed_declaration" : "public func closest(to target: Element) -> Element?",
            "key.parsed_scope.end" : 35,
            "key.parsed_scope.start" : 18,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var cur: <Type usr=\"s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE4Selfxmfp\">Self<\/Type>.Element<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>cur<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE4Selfxmfp\">Self<\/ref.generic_type_param>.Element<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 21,
                "key.name" : "cur",
                "key.namelength" : 3,
                "key.nameoffset" : 598,
                "key.offset" : 594,
                "key.parsed_declaration" : "var cur = self.first!",
                "key.parsed_scope.end" : 24,
                "key.parsed_scope.start" : 24,
                "key.typename" : "Self.Element",
                "key.typeusr" : "$S7ElementSTQzD",
                "key.usr" : "s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE7closest2toACSgAC_tF3curL_ACvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var diff: <Type usr=\"s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE4Selfxmfp\">Self<\/Type>.Element<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>diff<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE4Selfxmfp\">Self<\/ref.generic_type_param>.Element<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 28,
                "key.name" : "diff",
                "key.namelength" : 4,
                "key.nameoffset" : 628,
                "key.offset" : 624,
                "key.parsed_declaration" : "var diff = abs(target - cur)",
                "key.parsed_scope.end" : 25,
                "key.parsed_scope.start" : 25,
                "key.typename" : "Self.Element",
                "key.typeusr" : "$S7ElementSTQzD",
                "key.usr" : "s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE7closest2toACSgAC_tF4diffL_ACvp"
              }
            ],
            "key.typename" : "<Self where Self : BidirectionalCollection, Self.Element : Comparable, Self.Element : SignedNumeric> (Self) -> (Self.Element) -> Self.Element?",
            "key.typeusr" : "$S2to7ElementQzSgAC_tcD",
            "key.usr" : "s:SK4MathSL7ElementRpzs13SignedNumericACRQrlE7closest2toACSgAC_tF"
          }
        ],
        "key.typename" : "BidirectionalCollection.Protocol",
        "key.typeusr" : "$SSK_pmD",
        "key.usr" : "s:SK"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol BidirectionalCollection : <Type usr=\"s:Sl\">Collection<\/Type> where <Type usr=\"s:SK4Selfxmfp\">Self<\/Type>.Indices : <Type usr=\"s:SK\">BidirectionalCollection<\/Type>, <Type usr=\"s:SK4Selfxmfp\">Self<\/Type>.SubSequence : <Type usr=\"s:SK\">BidirectionalCollection<\/Type><\/Declaration>",
        "key.bodylength" : 221,
        "key.bodyoffset" : 937,
        "key.doc.declaration" : "protocol BidirectionalCollection : Collection where Self.Indices : BidirectionalCollection, Self.SubSequence : BidirectionalCollection",
        "key.doc.discussion" : [
          {
            "Para" : "Bidirectional collections offer traversal backward from any valid index, not including a collection’s `startIndex`. Bidirectional collections can therefore offer additional operations, such as a `last` property that provides efficient access to the last element and a `reversed()` method that presents the elements in reverse order. In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as `suffix(_:)`."
          },
          {
            "Para" : "To add `BidirectionalProtocol` conformance to your custom types, implement the `index(before:)` method in addition to the requirements of the `Collection` protocol."
          },
          {
            "Para" : "Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction. That is, for any index `i` into a bidirectional collection `c`:"
          },
          {
            "List-Bullet" : ""
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>BidirectionalCollection<\/Name><USR>s:SK<\/USR><Declaration>protocol BidirectionalCollection : Collection where Self.Indices : BidirectionalCollection, Self.SubSequence : BidirectionalCollection<\/Declaration><CommentParts><Abstract><Para>A collection that supports backward as well as forward traversal.<\/Para><\/Abstract><Discussion><Para>Bidirectional collections offer traversal backward from any valid index, not including a collection’s <codeVoice>startIndex<\/codeVoice>. Bidirectional collections can therefore offer additional operations, such as a <codeVoice>last<\/codeVoice> property that provides efficient access to the last element and a <codeVoice>reversed()<\/codeVoice> method that presents the elements in reverse order. In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as <codeVoice>suffix(_:)<\/codeVoice>.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the BidirectionalCollection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>To add <codeVoice>BidirectionalProtocol<\/codeVoice> conformance to your custom types, implement the <codeVoice>index(before:)<\/codeVoice> method in addition to the requirements of the <codeVoice>Collection<\/codeVoice> protocol.<\/Para><Para>Indices that are moved forward and backward in a bidirectional collection move by the same amount in each direction. That is, for any index <codeVoice>i<\/codeVoice> into a bidirectional collection <codeVoice>c<\/codeVoice>:<\/Para><List-Bullet><Item><Para>If <codeVoice>i &gt;= c.startIndex &amp;&amp; i &lt; c.endIndex<\/codeVoice>, <codeVoice>c.index(before: c.index(after: i)) == i<\/codeVoice>.<\/Para><\/Item><Item><Para>If <codeVoice>i &gt; c.startIndex &amp;&amp; i &lt;= c.endIndex<\/codeVoice> <codeVoice>c.index(after: c.index(before: i)) == i<\/codeVoice>.<\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "BidirectionalCollection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>BidirectionalCollection<\/decl.name> : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:SK4Selfxmfp\">Self<\/ref.generic_type_param>.Indices : <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:SK4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence : <ref.protocol usr=\"s:SK\">BidirectionalCollection<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 297,
        "key.modulename" : "Swift",
        "key.name" : "BidirectionalCollection",
        "key.namelength" : 23,
        "key.nameoffset" : 872,
        "key.offset" : 862,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var mean: <Type usr=\"s:Sl8IteratorQa\">Iterator<\/Type>.<Type usr=\"s:St7ElementQa\">Element<\/Type>? { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1063
              }
            ],
            "key.bodylength" : 57,
            "key.bodyoffset" : 1099,
            "key.doc.column" : 16,
            "key.doc.comment" : "- Returns: Average of all values contained herein, if there are more than 0 elements.\nOtherwise, `nil`.",
            "key.doc.declaration" : "public var mean: Iterator.Element? { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift\" line=\"42\" column=\"16\"><Name>mean<\/Name><USR>s:SK4MathE4mean7ElementQzSgvp<\/USR><Declaration>public var mean: Iterator.Element? { get }<\/Declaration><CommentParts><ResultDiscussion><Para>Average of all values contained herein, if there are more than 0 elements. Otherwise, <codeVoice>nil<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 42,
            "key.doc.name" : "mean",
            "key.doc.result_discussion" : [
              {
                "Para" : "Average of all values contained herein, if there are more than 0 elements. Otherwise, `nil`."
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 116,
            "key.docoffset" : 943,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BidirectionalCollectionExtensions.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>mean<\/decl.name>: <decl.var.type><ref.associatedtype usr=\"s:Sl8IteratorQa\">Iterator<\/ref.associatedtype>.<ref.associatedtype usr=\"s:St7ElementQa\">Element<\/ref.associatedtype>?<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 87,
            "key.name" : "mean",
            "key.namelength" : 4,
            "key.nameoffset" : 1074,
            "key.offset" : 1070,
            "key.parsed_declaration" : "public var mean: Iterator.Element?",
            "key.parsed_scope.end" : 44,
            "key.parsed_scope.start" : 42,
            "key.typename" : "Self.Element?",
            "key.typeusr" : "$S7ElementSTQzSgD",
            "key.usr" : "s:SK4MathE4mean7ElementQzSgvp"
          }
        ],
        "key.typename" : "BidirectionalCollection.Protocol",
        "key.typeusr" : "$SSK_pmD",
        "key.usr" : "s:SK"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1090,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>protocol BinaryFloatingPoint : <Type usr=\"s:s25ExpressibleByFloatLiteralP\">ExpressibleByFloatLiteral<\/Type>, <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
        "key.bodylength" : 891,
        "key.bodyoffset" : 197,
        "key.doc.declaration" : "protocol BinaryFloatingPoint : ExpressibleByFloatLiteral, FloatingPoint",
        "key.doc.discussion" : [
          {
            "Para" : "The `BinaryFloatingPoint` protocol extends the `FloatingPoint` protocol with operations specific to floating-point binary types, as defined by the . `BinaryFloatingPoint` is implemented in the standard library by `Float`, `Double`, and `Float80` where available."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>BinaryFloatingPoint<\/Name><USR>s:SB<\/USR><Declaration>protocol BinaryFloatingPoint : ExpressibleByFloatLiteral, FloatingPoint<\/Declaration><CommentParts><Abstract><Para>A radix-2 (binary) floating-point type.<\/Para><\/Abstract><Discussion><Para>The <codeVoice>BinaryFloatingPoint<\/codeVoice> protocol extends the <codeVoice>FloatingPoint<\/codeVoice> protocol with operations specific to floating-point binary types, as defined by the <Link href=\"http:\/\/ieeexplore.ieee.org\/servlet\/opac?punumber=4610933\">IEEE 754 specification<\/Link>. <codeVoice>BinaryFloatingPoint<\/codeVoice> is implemented in the standard library by <codeVoice>Float<\/codeVoice>, <codeVoice>Double<\/codeVoice>, and <codeVoice>Float80<\/codeVoice> where available.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "BinaryFloatingPoint",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>BinaryFloatingPoint<\/decl.name> : <ref.protocol usr=\"s:s25ExpressibleByFloatLiteralP\">ExpressibleByFloatLiteral<\/ref.protocol>, <ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.protocol>",
        "key.groupname" : "Math\/Floating",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 923,
        "key.modulename" : "Swift",
        "key.name" : "BinaryFloatingPoint",
        "key.namelength" : 19,
        "key.nameoffset" : 176,
        "key.offset" : 166,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public mutating func scale(from source: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:SB4MathE4Selfxmfp\">Self<\/Type>&gt;, to destination: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:SB4MathE4Selfxmfp\">Self<\/Type>&gt;)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.mutating",
                "key.length" : 8,
                "key.offset" : 319
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 312
              }
            ],
            "key.bodylength" : 280,
            "key.bodyoffset" : 433,
            "key.doc.column" : 26,
            "key.doc.comment" : "Scales a `BinaryFloatingPoint` from the given `sourceRange` to the given\n`destinationRange`.",
            "key.doc.declaration" : "public mutating func scale(from source: ClosedRange<Self>, to destination: ClosedRange<Self>)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift\" line=\"15\" column=\"26\"><Name>scale(from:to:)<\/Name><USR>s:SB4MathE5scale4from2toySNyxG_AEtF<\/USR><Declaration>public mutating func scale(from source: ClosedRange&lt;Self&gt;, to destination: ClosedRange&lt;Self&gt;)<\/Declaration><CommentParts><Abstract><Para>Scales a <codeVoice>BinaryFloatingPoint<\/codeVoice> from the given <codeVoice>sourceRange<\/codeVoice> to the given <codeVoice>destinationRange<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 15,
            "key.doc.name" : "scale(from:to:)",
            "key.doc.type" : "Function",
            "key.doclength" : 105,
            "key.docoffset" : 203,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scale<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>source<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:SB4MathE4Selfxmfp\">Self<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>destination<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:SB4MathE4Selfxmfp\">Self<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 386,
            "key.name" : "scale(from:to:)",
            "key.namelength" : 94,
            "key.nameoffset" : 333,
            "key.offset" : 328,
            "key.parsed_declaration" : "public mutating func scale(\n    from source: ClosedRange<Self>,\n    to destination: ClosedRange<Self>\n)",
            "key.parsed_scope.end" : 24,
            "key.parsed_scope.start" : 15,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let sourceWidth: <Type usr=\"s:SB4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sourceWidth<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SB4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 55,
                "key.name" : "sourceWidth",
                "key.namelength" : 11,
                "key.nameoffset" : 446,
                "key.offset" : 442,
                "key.parsed_declaration" : "let sourceWidth = source.upperBound - source.lowerBound",
                "key.parsed_scope.end" : 20,
                "key.parsed_scope.start" : 20,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:SB4MathE5scale4from2toySNyxG_AEtF11sourceWidthL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let destinationWidth: <Type usr=\"s:SB4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>destinationWidth<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SB4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 70,
                "key.name" : "destinationWidth",
                "key.namelength" : 16,
                "key.nameoffset" : 510,
                "key.offset" : 506,
                "key.parsed_declaration" : "let destinationWidth = destination.upperBound - destination.lowerBound",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:SB4MathE5scale4from2toySNyxG_AEtF16destinationWidthL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let position: <Type usr=\"s:SB4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>position<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SB4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 55,
                "key.name" : "position",
                "key.namelength" : 8,
                "key.nameoffset" : 589,
                "key.offset" : 585,
                "key.parsed_declaration" : "let position = (self - source.lowerBound) \/ sourceWidth",
                "key.parsed_scope.end" : 22,
                "key.parsed_scope.start" : 22,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:SB4MathE5scale4from2toySNyxG_AEtF8positionL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : BinaryFloatingPoint> (inout Self) -> (ClosedRange<Self>, ClosedRange<Self>) -> ()",
            "key.typeusr" : "$S4from2toySNyxG_ACtcD",
            "key.usr" : "s:SB4MathE5scale4from2toySNyxG_AEtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func scaled(from sourceRange: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:SB4MathE4Selfxmfp\">Self<\/Type>&gt;, to destinationRange: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:SB4MathE4Selfxmfp\">Self<\/Type>&gt;) -&gt; <Type usr=\"s:SB4MathE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 846
              }
            ],
            "key.bodylength" : 109,
            "key.bodyoffset" : 977,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: A `BinaryFloatingPoint` value scaled from the given `sourceRange` to the\ngiven `destinationRange`.",
            "key.doc.declaration" : "public func scaled(from sourceRange: ClosedRange<Self>, to destinationRange: ClosedRange<Self>) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift\" line=\"28\" column=\"17\"><Name>scaled(from:to:)<\/Name><USR>s:SB4MathE6scaled4from2toxSNyxG_AEtF<\/USR><Declaration>public func scaled(from sourceRange: ClosedRange&lt;Self&gt;, to destinationRange: ClosedRange&lt;Self&gt;) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>A <codeVoice>BinaryFloatingPoint<\/codeVoice> value scaled from the given <codeVoice>sourceRange<\/codeVoice> to the given <codeVoice>destinationRange<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 28,
            "key.doc.name" : "scaled(from:to:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A `BinaryFloatingPoint` value scaled from the given `sourceRange` to the given `destinationRange`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 122,
            "key.docoffset" : 720,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scaled<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sourceRange<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:SB4MathE4Selfxmfp\">Self<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>destinationRange<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:SB4MathE4Selfxmfp\">Self<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:SB4MathE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 234,
            "key.name" : "scaled(from:to:)",
            "key.namelength" : 105,
            "key.nameoffset" : 858,
            "key.offset" : 853,
            "key.parsed_declaration" : "public func scaled(\n    from sourceRange: ClosedRange<Self>,\n    to destinationRange: ClosedRange<Self>\n) -> Self",
            "key.parsed_scope.end" : 36,
            "key.parsed_scope.start" : 28,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var copy: <Type usr=\"s:SB4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/BinaryFloatingPointExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>copy<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SB4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 15,
                "key.name" : "copy",
                "key.namelength" : 4,
                "key.nameoffset" : 990,
                "key.offset" : 986,
                "key.parsed_declaration" : "var copy = self",
                "key.parsed_scope.end" : 33,
                "key.parsed_scope.start" : 33,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:SB4MathE6scaled4from2toxSNyxG_AEtF4copyL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : BinaryFloatingPoint> (Self) -> (ClosedRange<Self>, ClosedRange<Self>) -> Self",
            "key.typeusr" : "$S4from2toxSNyxG_ACtcD",
            "key.usr" : "s:SB4MathE6scaled4from2toxSNyxG_AEtF"
          }
        ],
        "key.typename" : "BinaryFloatingPoint.Protocol",
        "key.typeusr" : "$SSB_pmD",
        "key.usr" : "s:SB"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1344,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private let intBitCount: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 75
          }
        ],
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>intBitCount<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 44,
        "key.name" : "intBitCount",
        "key.namelength" : 11,
        "key.nameoffset" : 87,
        "key.offset" : 83,
        "key.parsed_declaration" : "private let intBitCount = MemoryLayout<Int>.size * 8",
        "key.parsed_scope.end" : 8,
        "key.parsed_scope.start" : 8,
        "key.typename" : "Int",
        "key.typeusr" : "$SSiD",
        "key.usr" : "s:4Math11intBitCount33_8ED06FCE68930D5D7A962B8B90C023D2LLSivp"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func countTrailingZeros(_ n: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 416
          }
        ],
        "key.bodylength" : 143,
        "key.bodyoffset" : 465,
        "key.doc.column" : 13,
        "key.doc.comment" : "Count Trailing Zeros (ctz) counts the number of zero bits succeeding the least\nsignificant one bit. For example, the ctz of 0x00000F00 is 8, and the ctz of\n0x80000000 is 31. This also counts the exponent of the `2` factor in the prime\nfactorization of a positive number.",
        "key.doc.declaration" : "public func countTrailingZeros(_ n: Int) -> Int",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift\" line=\"14\" column=\"13\"><Name>countTrailingZeros(_:)<\/Name><USR>s:4Math18countTrailingZerosyS2iF<\/USR><Declaration>public func countTrailingZeros(_ n: Int) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Count Trailing Zeros (ctz) counts the number of zero bits succeeding the least significant one bit. For example, the ctz of 0x00000F00 is 8, and the ctz of 0x80000000 is 31. This also counts the exponent of the <codeVoice>2<\/codeVoice> factor in the prime factorization of a positive number.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 14,
        "key.doc.name" : "countTrailingZeros(_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 287,
        "key.docoffset" : 129,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>countTrailingZeros<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>n<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 186,
        "key.name" : "countTrailingZeros(_:)",
        "key.namelength" : 28,
        "key.nameoffset" : 428,
        "key.offset" : 423,
        "key.parsed_declaration" : "public func countTrailingZeros(_ n: Int) -> Int",
        "key.parsed_scope.end" : 21,
        "key.parsed_scope.start" : 14,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var mask: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>mask<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 12,
            "key.name" : "mask",
            "key.namelength" : 4,
            "key.nameoffset" : 474,
            "key.offset" : 470,
            "key.parsed_declaration" : "var mask = 1",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 15,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math18countTrailingZerosyS2iF4maskL_Sivp"
          }
        ],
        "key.typename" : "(Int) -> Int",
        "key.typeusr" : "$SyS2icD",
        "key.usr" : "s:4Math18countTrailingZerosyS2iF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func countLeadingZeros(_ n: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 794
          }
        ],
        "key.bodylength" : 165,
        "key.bodyoffset" : 842,
        "key.doc.column" : 13,
        "key.doc.comment" : "Count Leading Zeros (clz) counts the number of zero bits preceding the most\nsignificant one bit. For example, the clz of 0x00F00000 is 8, and the clz of\n0x00000001 is 31.",
        "key.doc.declaration" : "public func countLeadingZeros(_ n: Int) -> Int",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift\" line=\"26\" column=\"13\"><Name>countLeadingZeros(_:)<\/Name><USR>s:4Math17countLeadingZerosyS2iF<\/USR><Declaration>public func countLeadingZeros(_ n: Int) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Count Leading Zeros (clz) counts the number of zero bits preceding the most significant one bit. For example, the clz of 0x00F00000 is 8, and the clz of 0x00000001 is 31.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 26,
        "key.doc.name" : "countLeadingZeros(_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 183,
        "key.docoffset" : 611,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>countLeadingZeros<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>n<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 207,
        "key.name" : "countLeadingZeros(_:)",
        "key.namelength" : 27,
        "key.nameoffset" : 806,
        "key.offset" : 801,
        "key.parsed_declaration" : "public func countLeadingZeros(_ n: Int) -> Int",
        "key.parsed_scope.end" : 33,
        "key.parsed_scope.start" : 26,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var mask: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>mask<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 33,
            "key.name" : "mask",
            "key.namelength" : 4,
            "key.nameoffset" : 851,
            "key.offset" : 847,
            "key.parsed_declaration" : "var mask = 1 << (intBitCount - 1)",
            "key.parsed_scope.end" : 27,
            "key.parsed_scope.start" : 27,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math17countLeadingZerosyS2iF4maskL_Sivp"
          }
        ],
        "key.typename" : "(Int) -> Int",
        "key.typeusr" : "$SyS2icD",
        "key.usr" : "s:4Math17countLeadingZerosyS2iF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &gt;&gt;&gt; (lhs: <Type usr=\"s:Si\">Int<\/Type>, rhs: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1080
          }
        ],
        "key.bodylength" : 64,
        "key.bodyoffset" : 1125,
        "key.doc.column" : 13,
        "key.doc.comment" : "Logical right shift.",
        "key.doc.declaration" : "public func >>> (lhs: Int, rhs: Int) -> Int",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift\" line=\"38\" column=\"13\"><Name>&gt;&gt;&gt;(_:_:)<\/Name><USR>s:4Math3gggoiyS2i_SitF<\/USR><Declaration>public func &gt;&gt;&gt; (lhs: Int, rhs: Int) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Logical right shift.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 38,
        "key.doc.name" : ">>>(_:_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 25,
        "key.docoffset" : 1055,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&gt;&gt;&gt; <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 103,
        "key.name" : ">>>(_:_:)",
        "key.namelength" : 24,
        "key.nameoffset" : 1092,
        "key.offset" : 1087,
        "key.parsed_declaration" : "public func >>> (lhs: Int, rhs: Int) -> Int",
        "key.parsed_scope.end" : 40,
        "key.parsed_scope.start" : 38,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
            "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>",
            "key.kind" : "source.lang.swift.decl.var.parameter",
            "key.length" : 3,
            "key.name" : "lhs",
            "key.offset" : 1097,
            "key.parent_loc" : 1092,
            "key.parsed_declaration" : "public func >>> (lhs: Int, rhs: Int) -> Int",
            "key.parsed_scope.end" : 38,
            "key.parsed_scope.start" : 38,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math3gggoiyS2i_SitF3lhsL_Sivp"
          }
        ],
        "key.typename" : "(Int, Int) -> Int",
        "key.typeusr" : "$SyS2i_SitcD",
        "key.usr" : "s:4Math3gggoiyS2i_SitF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func &gt;&gt;&gt;= (lhs: inout <Type usr=\"s:Si\">Int<\/Type>, rhs: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1274
          }
        ],
        "key.bodylength" : 23,
        "key.bodyoffset" : 1319,
        "key.doc.column" : 13,
        "key.doc.comment" : "Logical right shift assignment.",
        "key.doc.declaration" : "public func >>>= (lhs: inout Int, rhs: Int)",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift\" line=\"45\" column=\"13\"><Name>&gt;&gt;&gt;=(_:_:)<\/Name><USR>s:4Math4gggeoiyySiz_SitF<\/USR><Declaration>public func &gt;&gt;&gt;= (lhs: inout Int, rhs: Int)<\/Declaration><CommentParts><Abstract><Para>Logical right shift assignment.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 45,
        "key.doc.name" : ">>>=(_:_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 36,
        "key.docoffset" : 1238,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&gt;&gt;&gt;= <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 62,
        "key.name" : ">>>=(_:_:)",
        "key.namelength" : 31,
        "key.nameoffset" : 1286,
        "key.offset" : 1281,
        "key.parsed_declaration" : "public func >>>= (lhs: inout Int, rhs: Int)",
        "key.parsed_scope.end" : 47,
        "key.parsed_scope.start" : 45,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>var lhs: inout <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Bitwise.swift",
            "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>",
            "key.kind" : "source.lang.swift.decl.var.parameter",
            "key.length" : 3,
            "key.name" : "lhs",
            "key.offset" : 1292,
            "key.parent_loc" : 1286,
            "key.parsed_declaration" : "public func >>>= (lhs: inout Int, rhs: Int)",
            "key.parsed_scope.end" : 45,
            "key.parsed_scope.start" : 45,
            "key.typename" : "inout Int",
            "key.typeusr" : "$SSizD",
            "key.usr" : "s:4Math4gggeoiyySiz_SitF3lhsL_Sizvp"
          }
        ],
        "key.typename" : "(inout Int, Int) -> ()",
        "key.typeusr" : "$SyySiz_SitcD",
        "key.usr" : "s:4Math4gggeoiyySiz_SitF"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1076,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>struct Double<\/Declaration>",
        "key.bodylength" : 898,
        "key.bodyoffset" : 176,
        "key.doc.declaration" : "struct Double",
        "key.doc.full_as_xml" : "<Class><Name>Double<\/Name><USR>s:Sd<\/USR><Declaration>struct Double<\/Declaration><CommentParts><Abstract><Para>A double-precision, floating-point value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Double",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Double<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 917,
        "key.modulename" : "Swift",
        "key.name" : "Double",
        "key.namelength" : 6,
        "key.nameoffset" : 168,
        "key.offset" : 158,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public mutating func scale(from source: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:Sd\">Double<\/Type>&gt;, toExponential destination: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:Sd\">Double<\/Type>&gt;)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.mutating",
                "key.length" : 8,
                "key.offset" : 289
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 282
              }
            ],
            "key.bodylength" : 284,
            "key.bodyoffset" : 418,
            "key.doc.column" : 26,
            "key.doc.comment" : "Exponentially scales a `Double` from the given `source` to the given\n`destination`.",
            "key.doc.declaration" : "public mutating func scale(from source: ClosedRange<Double>, toExponential destination: ClosedRange<Double>)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift\" line=\"15\" column=\"26\"><Name>scale(from:toExponential:)<\/Name><USR>s:Sd4MathE5scale4from13toExponentialySNySdG_AEtF<\/USR><Declaration>public mutating func scale(from source: ClosedRange&lt;Double&gt;, toExponential destination: ClosedRange&lt;Double&gt;)<\/Declaration><CommentParts><Abstract><Para>Exponentially scales a <codeVoice>Double<\/codeVoice> from the given <codeVoice>source<\/codeVoice> to the given <codeVoice>destination<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 15,
            "key.doc.name" : "scale(from:toExponential:)",
            "key.doc.type" : "Function",
            "key.doclength" : 96,
            "key.docoffset" : 182,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scale<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>source<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.struct usr=\"s:Sd\">Double<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>toExponential<\/decl.var.parameter.argument_label> <decl.var.parameter.name>destination<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.struct usr=\"s:Sd\">Double<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 405,
            "key.name" : "scale(from:toExponential:)",
            "key.namelength" : 109,
            "key.nameoffset" : 303,
            "key.offset" : 298,
            "key.parsed_declaration" : "public mutating func scale(\n    from source: ClosedRange<Double>,\n    toExponential destination: ClosedRange<Double>\n)",
            "key.parsed_scope.end" : 24,
            "key.parsed_scope.start" : 15,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let sourceWidth: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sourceWidth<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 55,
                "key.name" : "sourceWidth",
                "key.namelength" : 11,
                "key.nameoffset" : 431,
                "key.offset" : 427,
                "key.parsed_declaration" : "let sourceWidth = source.upperBound - source.lowerBound",
                "key.parsed_scope.end" : 20,
                "key.parsed_scope.start" : 20,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE5scale4from13toExponentialySNySdG_AEtF11sourceWidthL_Sdvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let destinationRatio: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>destinationRatio<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 70,
                "key.name" : "destinationRatio",
                "key.namelength" : 16,
                "key.nameoffset" : 495,
                "key.offset" : 491,
                "key.parsed_declaration" : "let destinationRatio = destination.upperBound \/ destination.lowerBound",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE5scale4from13toExponentialySNySdG_AEtF16destinationRatioL_Sdvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let position: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>position<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 55,
                "key.name" : "position",
                "key.namelength" : 8,
                "key.nameoffset" : 574,
                "key.offset" : 570,
                "key.parsed_declaration" : "let position = (self - source.lowerBound) \/ sourceWidth",
                "key.parsed_scope.end" : 22,
                "key.parsed_scope.start" : 22,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE5scale4from13toExponentialySNySdG_AEtF8positionL_Sdvp"
              }
            ],
            "key.typename" : "(inout Double) -> (ClosedRange<Double>, ClosedRange<Double>) -> ()",
            "key.typeusr" : "$S4from13toExponentialySNySdG_ACtcD",
            "key.usr" : "s:Sd4MathE5scale4from13toExponentialySNySdG_AEtF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func scaled(from source: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:Sd\">Double<\/Type>&gt;, toExponential destination: <Type usr=\"s:SN\">ClosedRange<\/Type>&lt;<Type usr=\"s:Sd\">Double<\/Type>&gt;) -&gt; <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 824
              }
            ],
            "key.bodylength" : 110,
            "key.bodyoffset" : 962,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: A `Double` value scaled from the given `source` range to the\ngiven `destination` range.",
            "key.doc.declaration" : "public func scaled(from source: ClosedRange<Double>, toExponential destination: ClosedRange<Double>) -> Double",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift\" line=\"28\" column=\"17\"><Name>scaled(from:toExponential:)<\/Name><USR>s:Sd4MathE6scaled4from13toExponentialSdSNySdG_AEtF<\/USR><Declaration>public func scaled(from source: ClosedRange&lt;Double&gt;, toExponential destination: ClosedRange&lt;Double&gt;) -&gt; Double<\/Declaration><CommentParts><ResultDiscussion><Para>A <codeVoice>Double<\/codeVoice> value scaled from the given <codeVoice>source<\/codeVoice> range to the given <codeVoice>destination<\/codeVoice> range.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 28,
            "key.doc.name" : "scaled(from:toExponential:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A `Double` value scaled from the given `source` range to the given `destination` range."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 111,
            "key.docoffset" : 709,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scaled<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>from<\/decl.var.parameter.argument_label> <decl.var.parameter.name>source<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.struct usr=\"s:Sd\">Double<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>toExponential<\/decl.var.parameter.argument_label> <decl.var.parameter.name>destination<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:SN\">ClosedRange<\/ref.struct>&lt;<ref.struct usr=\"s:Sd\">Double<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 242,
            "key.name" : "scaled(from:toExponential:)",
            "key.namelength" : 110,
            "key.nameoffset" : 836,
            "key.offset" : 831,
            "key.parsed_declaration" : "public func scaled(\n    from source: ClosedRange<Double>,\n    toExponential destination: ClosedRange<Double>\n) -> Double",
            "key.parsed_scope.end" : 36,
            "key.parsed_scope.start" : 28,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var copy: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/DoubleExtensions.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>copy<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 15,
                "key.name" : "copy",
                "key.namelength" : 4,
                "key.nameoffset" : 975,
                "key.offset" : 971,
                "key.parsed_declaration" : "var copy = self",
                "key.parsed_scope.end" : 33,
                "key.parsed_scope.start" : 33,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE6scaled4from13toExponentialSdSNySdG_AEtF4copyL_Sdvp"
              }
            ],
            "key.typename" : "(Double) -> (ClosedRange<Double>, ClosedRange<Double>) -> Double",
            "key.typeusr" : "$S4from13toExponentialSdSNySdG_ACtcD",
            "key.usr" : "s:Sd4MathE6scaled4from13toExponentialSdSNySdG_AEtF"
          }
        ],
        "key.typename" : "Double.Type",
        "key.typeusr" : "$SSdmD",
        "key.usr" : "s:Sd"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1026,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Fraction : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 155
          }
        ],
        "key.bodylength" : 650,
        "key.bodyoffset" : 189,
        "key.doc.column" : 15,
        "key.doc.comment" : "Fraction structure.",
        "key.doc.declaration" : "public struct Fraction : Rational",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"10\" column=\"15\"><Name>Fraction<\/Name><USR>s:4Math8FractionV<\/USR><Declaration>public struct Fraction : Rational<\/Declaration><CommentParts><Abstract><Para>Fraction structure.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 10,
        "key.doc.name" : "Fraction",
        "key.doc.type" : "Class",
        "key.doclength" : 24,
        "key.docoffset" : 131,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 8,
            "key.offset" : 179
          }
        ],
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Fraction<\/decl.name> : <ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Rational"
          }
        ],
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 678,
        "key.name" : "Fraction",
        "key.namelength" : 8,
        "key.nameoffset" : 169,
        "key.offset" : 162,
        "key.parsed_declaration" : "public struct Fraction: Rational",
        "key.parsed_scope.end" : 34,
        "key.parsed_scope.start" : 10,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let numerator: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 214
              }
            ],
            "key.doc.column" : 16,
            "key.doc.comment" : "Numerator.",
            "key.doc.declaration" : "public let numerator: Int",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"13\" column=\"16\"><Name>numerator<\/Name><USR>s:4Math8FractionV9numeratorSivp<\/USR><Declaration>public let numerator: Int<\/Declaration><CommentParts><Abstract><Para>Numerator.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 13,
            "key.doc.name" : "numerator",
            "key.doc.type" : "Other",
            "key.doclength" : 15,
            "key.docoffset" : 195,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>numerator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 18,
            "key.name" : "numerator",
            "key.namelength" : 9,
            "key.nameoffset" : 225,
            "key.offset" : 221,
            "key.overrides" : [
              {
                "key.usr" : "s:4Math8RationalP9numeratorSivp"
              }
            ],
            "key.parsed_declaration" : "public let numerator: Int",
            "key.parsed_scope.end" : 13,
            "key.parsed_scope.start" : 13,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8FractionV9numeratorSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let denominator: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 266
              }
            ],
            "key.doc.column" : 16,
            "key.doc.comment" : "Denominator.",
            "key.doc.declaration" : "public let denominator: Int",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"16\" column=\"16\"><Name>denominator<\/Name><USR>s:4Math8FractionV11denominatorSivp<\/USR><Declaration>public let denominator: Int<\/Declaration><CommentParts><Abstract><Para>Denominator.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 16,
            "key.doc.name" : "denominator",
            "key.doc.type" : "Other",
            "key.doclength" : 17,
            "key.docoffset" : 245,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>denominator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 20,
            "key.name" : "denominator",
            "key.namelength" : 11,
            "key.nameoffset" : 277,
            "key.offset" : 273,
            "key.overrides" : [
              {
                "key.usr" : "s:4Math8RationalP11denominatorSivp"
              }
            ],
            "key.parsed_declaration" : "public let denominator: Int",
            "key.parsed_scope.end" : 16,
            "key.parsed_scope.start" : 16,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8FractionV11denominatorSivp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 20,
            "key.name" : "MARK: - Initializers",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 302
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(_ numerator: <Type usr=\"s:Si\">Int<\/Type>, _ denominator: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 407
              }
            ],
            "key.bodylength" : 164,
            "key.bodyoffset" : 458,
            "key.doc.column" : 12,
            "key.doc.comment" : "Creates a `Fraction` value with a given `numerator` and `denominator`.",
            "key.doc.declaration" : "public init(_ numerator: Int, _ denominator: Int)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"21\" column=\"12\"><Name>init(_:_:)<\/Name><USR>s:4Math8FractionVyACSi_Sitcfc<\/USR><Declaration>public init(_ numerator: Int, _ denominator: Int)<\/Declaration><CommentParts><Abstract><Para>Creates a <codeVoice>Fraction<\/codeVoice> value with a given <codeVoice>numerator<\/codeVoice> and <codeVoice>denominator<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 21,
            "key.doc.name" : "init(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 75,
            "key.docoffset" : 328,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>numerator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>denominator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 209,
            "key.name" : "init(_:_:)",
            "key.namelength" : 42,
            "key.nameoffset" : 414,
            "key.offset" : 414,
            "key.overrides" : [
              {
                "key.usr" : "s:4Math8RationalPyxSi_Sitcfc"
              }
            ],
            "key.parsed_declaration" : "public init(_ numerator: Int, _ denominator: Int)",
            "key.parsed_scope.end" : 27,
            "key.parsed_scope.start" : 21,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8FractionVyACxcAA8RationalRzlufc\">init(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8FractionV14integerLiteralACSi_tcfc\">init(integerLiteral:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(Fraction.Type) -> (Int, Int) -> Fraction",
            "key.typeusr" : "$Sy4Math8FractionVSi_SitcD",
            "key.usr" : "s:4Math8FractionVyACSi_Sitcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init&lt;R&gt;(_ rational: <Type usr=\"s:4Math8FractionVyACxcAA8RationalRzlufc1RL_xmfp\">R<\/Type>) where R : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 697
              }
            ],
            "key.bodylength" : 97,
            "key.bodyoffset" : 740,
            "key.doc.column" : 12,
            "key.doc.comment" : "Creates a `Fraction` value with the given `rational` value.",
            "key.doc.declaration" : "public init<R>(_ rational: R) where R : Rational",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"30\" column=\"12\"><Name>init(_:)<\/Name><USR>s:4Math8FractionVyACxcAA8RationalRzlufc<\/USR><Declaration>public init&lt;R&gt;(_ rational: R) where R : Rational<\/Declaration><CommentParts><Abstract><Para>Creates a <codeVoice>Fraction<\/codeVoice> value with the given <codeVoice>rational<\/codeVoice> value.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 30,
            "key.doc.name" : "init(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 64,
            "key.docoffset" : 629,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:4Math8FractionVyACxcAA8RationalRzlufc1RL_xmfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>rational<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8FractionVyACxcAA8RationalRzlufc1RL_xmfp\">R<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>R : <ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 134,
            "key.name" : "init(_:)",
            "key.namelength" : 34,
            "key.nameoffset" : 704,
            "key.offset" : 704,
            "key.parsed_declaration" : "public init <R: Rational> (_ rational: R)",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 30,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8FractionVyACSi_Sitcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8FractionV14integerLiteralACSi_tcfc\">init(integerLiteral:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>R : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 713
                  }
                ],
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Rational"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.name" : "R",
                "key.namelength" : 1,
                "key.nameoffset" : 710,
                "key.offset" : 710,
                "key.parsed_declaration" : "public init <R: Rational> (_ rational: R)",
                "key.parsed_scope.end" : 30,
                "key.parsed_scope.start" : 30,
                "key.typename" : "R.Type",
                "key.typeusr" : "$SxmD",
                "key.usr" : "s:4Math8FractionVyACxcAA8RationalRzlufc1RL_xmfp"
              }
            ],
            "key.typename" : "<R where R : Rational> (Fraction.Type) -> (R) -> Fraction",
            "key.typeusr" : "$Sy4Math8FractionVxcAA8RationalRzluD",
            "key.usr" : "s:4Math8FractionVyACxcAA8RationalRzlufc"
          }
        ],
        "key.typename" : "Fraction.Type",
        "key.typeusr" : "$S4Math8FractionVmD",
        "key.usr" : "s:4Math8FractionV"
      },
      {
        "key.annotated_decl" : "<Declaration>public struct Fraction : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
        "key.bodylength" : 133,
        "key.bodyoffset" : 891,
        "key.doc.column" : 15,
        "key.doc.declaration" : "public struct Fraction : Rational",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"10\" column=\"15\"><Name>Fraction<\/Name><USR>s:4Math8FractionV<\/USR><Declaration>public struct Fraction : Rational<\/Declaration><CommentParts><Abstract><Para>Fraction structure.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 10,
        "key.doc.name" : "Fraction",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 27,
            "key.offset" : 862
          }
        ],
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Fraction<\/decl.name> : <ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.struct>",
        "key.inheritedtypes" : [
          {
            "key.name" : "ExpressibleByIntegerLiteral"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 183,
        "key.name" : "Fraction",
        "key.namelength" : 8,
        "key.nameoffset" : 852,
        "key.offset" : 842,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(integerLiteral value: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 949
              }
            ],
            "key.bodylength" : 33,
            "key.bodyoffset" : 989,
            "key.doc.column" : 12,
            "key.doc.comment" : "Create a `Fraction` with an intger literal.",
            "key.doc.declaration" : "public init(integerLiteral value: Int)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift\" line=\"39\" column=\"12\"><Name>init(integerLiteral:)<\/Name><USR>s:4Math8FractionV14integerLiteralACSi_tcfc<\/USR><Declaration>public init(integerLiteral value: Int)<\/Declaration><CommentParts><Abstract><Para>Create a <codeVoice>Fraction<\/codeVoice> with an intger literal.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 39,
            "key.doc.name" : "init(integerLiteral:)",
            "key.doc.type" : "Function",
            "key.doclength" : 48,
            "key.docoffset" : 897,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Fraction.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>integerLiteral<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 67,
            "key.name" : "init(integerLiteral:)",
            "key.namelength" : 31,
            "key.nameoffset" : 956,
            "key.offset" : 956,
            "key.overrides" : [
              {
                "key.usr" : "s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc"
              }
            ],
            "key.parsed_declaration" : "public init(integerLiteral value: Int)",
            "key.parsed_scope.end" : 41,
            "key.parsed_scope.start" : 39,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8FractionVyACSi_Sitcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8FractionVyACxcAA8RationalRzlufc\">init(_:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(Fraction.Type) -> (Int) -> Fraction",
            "key.typeusr" : "$S14integerLiteral4Math8FractionVSi_tcD",
            "key.usr" : "s:4Math8FractionV14integerLiteralACSi_tcfc"
          }
        ],
        "key.typename" : "Fraction.Type",
        "key.typeusr" : "$S4Math8FractionVmD",
        "key.usr" : "s:4Math8FractionV"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1500,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func closer&lt;T&gt;(to target: <Type usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/Type>, a: <Type usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/Type>, b: <Type usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/Type> where T : <Type usr=\"s:SL\">Comparable<\/Type>, T : <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 439
          }
        ],
        "key.bodylength" : 55,
        "key.bodyoffset" : 523,
        "key.doc.column" : 13,
        "key.doc.comment" : "Get the closer of two values to a target value.\n\n>`closer(to: 11, a: 12, b: 3) -> 12`\n\n- note: If the distances between both values and the target value are equivalent, the first\nvalue (a) is returned.\n\n>`closer(to: 6, a: 4, b: 8) -> 4`\n\n- returns: Value closer to target value",
        "key.doc.declaration" : "public func closer<T>(to target: T, a: T, b: T) -> T where T : Comparable, T : SignedNumeric",
        "key.doc.discussion" : [
          {
            "Para" : "`closer(to: 11, a: 12, b: 3) -> 12`"
          },
          {
            "Note" : ""
          },
          {
            "Para" : "`closer(to: 6, a: 4, b: 8) -> 4`"
          }
        ],
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift\" line=\"23\" column=\"13\"><Name>closer(to:a:b:)<\/Name><USR>s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF<\/USR><Declaration>public func closer&lt;T&gt;(to target: T, a: T, b: T) -&gt; T where T : Comparable, T : SignedNumeric<\/Declaration><CommentParts><Abstract><Para>Get the closer of two values to a target value.<\/Para><\/Abstract><ResultDiscussion><Para>Value closer to target value<\/Para><\/ResultDiscussion><Discussion><Para><codeVoice>closer(to: 11, a: 12, b: 3) -&gt; 12<\/codeVoice><\/Para><Note><Para>If the distances between both values and the target value are equivalent, the first value (a) is returned.<\/Para><\/Note><Para><codeVoice>closer(to: 6, a: 4, b: 8) -&gt; 4<\/codeVoice><\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 23,
        "key.doc.name" : "closer(to:a:b:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Value closer to target value"
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 291,
        "key.docoffset" : 147,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closer<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>target<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>a<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>b<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement>T : <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 133,
        "key.name" : "closer(to:a:b:)",
        "key.namelength" : 65,
        "key.nameoffset" : 451,
        "key.offset" : 446,
        "key.parsed_declaration" : "public func closer <T: SignedNumeric & Comparable> (to target: T, a: T, b: T) -> T",
        "key.parsed_scope.end" : 25,
        "key.parsed_scope.start" : 23,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type> &amp; <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 26,
                "key.offset" : 462
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol> &amp; <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "SignedNumeric & Comparable"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 29,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 459,
            "key.offset" : 459,
            "key.parsed_declaration" : "public func closer <T: SignedNumeric & Comparable> (to target: T, a: T, b: T) -> T",
            "key.parsed_scope.end" : 23,
            "key.parsed_scope.start" : 23,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF1TL_xmfp"
          }
        ],
        "key.typename" : "<T where T : Comparable, T : SignedNumeric> (to: T, a: T, b: T) -> T",
        "key.typeusr" : "$S2to1a1bxx_xxtcSLRzs13SignedNumericRzluD",
        "key.usr" : "s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func ordered&lt;T&gt;(_ a: <Type usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/Type>) -&gt; (<Type usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/Type>, <Type usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/Type>) where T : <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 738
          }
        ],
        "key.bodylength" : 35,
        "key.bodyoffset" : 802,
        "key.doc.column" : 13,
        "key.doc.comment" : "- note: If both values are equal, they are returned in the order in which they were given\n\n- returns: 2-tuple of two `Comparable` types, in order.",
        "key.doc.declaration" : "public func ordered<T>(_ a: T, _ b: T) -> (T, T) where T : Comparable",
        "key.doc.discussion" : [
          {
            "Note" : ""
          }
        ],
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift\" line=\"32\" column=\"13\"><Name>ordered(_:_:)<\/Name><USR>s:4Math7orderedyx_xtx_xtSLRzlF<\/USR><Declaration>public func ordered&lt;T&gt;(_ a: T, _ b: T) -&gt; (T, T) where T : Comparable<\/Declaration><CommentParts><ResultDiscussion><Para>2-tuple of two <codeVoice>Comparable<\/codeVoice> types, in order.<\/Para><\/ResultDiscussion><Discussion><Note><Para>If both values are equal, they are returned in the order in which they were given<\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 32,
        "key.doc.name" : "ordered(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "2-tuple of two `Comparable` types, in order."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 156,
        "key.docoffset" : 581,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>ordered<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 93,
        "key.name" : "ordered(_:_:)",
        "key.namelength" : 40,
        "key.nameoffset" : 750,
        "key.offset" : 745,
        "key.parsed_declaration" : "public func ordered <T: Comparable> (_ a: T, _ b: T) -> (T, T)",
        "key.parsed_scope.end" : 34,
        "key.parsed_scope.start" : 32,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:SL\">Comparable<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 10,
                "key.offset" : 762
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SL\">Comparable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "Comparable"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 13,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 759,
            "key.offset" : 759,
            "key.parsed_declaration" : "public func ordered <T: Comparable> (_ a: T, _ b: T) -> (T, T)",
            "key.parsed_scope.end" : 32,
            "key.parsed_scope.start" : 32,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math7orderedyx_xtx_xtSLRzlF1TL_xmfp"
          }
        ],
        "key.typename" : "<T where T : Comparable> (T, T) -> (T, T)",
        "key.typeusr" : "$Syx_xtx_xtcSLRzluD",
        "key.usr" : "s:4Math7orderedyx_xtx_xtSLRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func mean&lt;F&gt;(_ a: <Type usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\">F<\/Type>, _ b: <Type usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\">F<\/Type>) -&gt; <Type usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\">F<\/Type> where F : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 892
          }
        ],
        "key.bodylength" : 24,
        "key.bodyoffset" : 951,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: The average to the two given values.",
        "key.doc.declaration" : "public func mean<F>(_ a: F, _ b: F) -> F where F : FloatingPoint",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift\" line=\"37\" column=\"13\"><Name>mean(_:_:)<\/Name><USR>s:4Math4meanyxx_xtSFRzlF<\/USR><Declaration>public func mean&lt;F&gt;(_ a: F, _ b: F) -&gt; F where F : FloatingPoint<\/Declaration><CommentParts><ResultDiscussion><Para>The average to the two given values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 37,
        "key.doc.name" : "mean(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "The average to the two given values."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 52,
        "key.docoffset" : 840,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mean<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\"><decl.generic_type_param.name>F<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\">F<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\">F<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math4meanyxx_xtSFRzlF1FL_xmfp\">F<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>F : <ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 77,
        "key.name" : "mean(_:_:)",
        "key.namelength" : 40,
        "key.nameoffset" : 904,
        "key.offset" : 899,
        "key.parsed_declaration" : "public func mean <F: FloatingPoint> (_ a: F, _ b: F) -> F",
        "key.parsed_scope.end" : 39,
        "key.parsed_scope.start" : 37,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>F : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 913
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>F<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FloatingPoint"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "F",
            "key.namelength" : 1,
            "key.nameoffset" : 910,
            "key.offset" : 910,
            "key.parsed_declaration" : "public func mean <F: FloatingPoint> (_ a: F, _ b: F) -> F",
            "key.parsed_scope.end" : 37,
            "key.parsed_scope.start" : 37,
            "key.typename" : "F.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math4meanyxx_xtSFRzlF1FL_xmfp"
          }
        ],
        "key.typename" : "<F where F : FloatingPoint> (F, F) -> F",
        "key.typeusr" : "$Syxx_xtcSFRzluD",
        "key.usr" : "s:4Math4meanyxx_xtSFRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func mod&lt;T&gt;(_ dividend: <Type usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\">T<\/Type>, _ modulus: <Type usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\">T<\/Type> where T : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1063
          }
        ],
        "key.bodylength" : 87,
        "key.bodyoffset" : 1134,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: \"True\" modulo (not \"remainder\", which is implemented by Swift's `%`).",
        "key.doc.declaration" : "public func mod<T>(_ dividend: T, _ modulus: T) -> T where T : BinaryInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift\" line=\"42\" column=\"13\"><Name>mod(_:_:)<\/Name><USR>s:4Math3modyxx_xtSzRzlF<\/USR><Declaration>public func mod&lt;T&gt;(_ dividend: T, _ modulus: T) -&gt; T where T : BinaryInteger<\/Declaration><CommentParts><ResultDiscussion><Para>“True” modulo (not “remainder”, which is implemented by Swift’s <codeVoice>%<\/codeVoice>).<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 42,
        "key.doc.name" : "mod(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "“True” modulo (not “remainder”, which is implemented by Swift’s `%`)."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 85,
        "key.docoffset" : 978,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mod<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dividend<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>modulus<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math3modyxx_xtSzRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 152,
        "key.name" : "mod(_:_:)",
        "key.namelength" : 52,
        "key.nameoffset" : 1075,
        "key.offset" : 1070,
        "key.parsed_declaration" : "public func mod <T: BinaryInteger> (_ dividend: T, _ modulus: T) -> T",
        "key.parsed_scope.end" : 45,
        "key.parsed_scope.start" : 42,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math3modyxx_xtSFRzlF\">mod&lt;T&gt;(_: T, _: T) -&gt; T where T : FloatingPoint<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 1083
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "BinaryInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 1080,
            "key.offset" : 1080,
            "key.parsed_declaration" : "public func mod <T: BinaryInteger> (_ dividend: T, _ modulus: T) -> T",
            "key.parsed_scope.end" : 42,
            "key.parsed_scope.start" : 42,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math3modyxx_xtSzRzlF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>let result: T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 31,
            "key.name" : "result",
            "key.namelength" : 6,
            "key.nameoffset" : 1143,
            "key.offset" : 1139,
            "key.parsed_declaration" : "let result = dividend % modulus",
            "key.parsed_scope.end" : 43,
            "key.parsed_scope.start" : 43,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math3modyxx_xtSzRzlF6resultL_xvp"
          }
        ],
        "key.typename" : "<T where T : BinaryInteger> (T, T) -> T",
        "key.typeusr" : "$Syxx_xtcSzRzluD",
        "key.usr" : "s:4Math3modyxx_xtSzRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func mod&lt;T&gt;(_ dividend: <Type usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\">T<\/Type>, _ modulus: <Type usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\">T<\/Type> where T : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1309
          }
        ],
        "key.bodylength" : 118,
        "key.bodyoffset" : 1380,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: \"True\" modulo (not \"remainder\", which is implemented by Swift's `%`).",
        "key.doc.declaration" : "public func mod<T>(_ dividend: T, _ modulus: T) -> T where T : FloatingPoint",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift\" line=\"48\" column=\"13\"><Name>mod(_:_:)<\/Name><USR>s:4Math3modyxx_xtSFRzlF<\/USR><Declaration>public func mod&lt;T&gt;(_ dividend: T, _ modulus: T) -&gt; T where T : FloatingPoint<\/Declaration><CommentParts><ResultDiscussion><Para>“True” modulo (not “remainder”, which is implemented by Swift’s <codeVoice>%<\/codeVoice>).<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 48,
        "key.doc.name" : "mod(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "“True” modulo (not “remainder”, which is implemented by Swift’s `%`)."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 85,
        "key.docoffset" : 1224,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mod<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dividend<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>modulus<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math3modyxx_xtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 183,
        "key.name" : "mod(_:_:)",
        "key.namelength" : 52,
        "key.nameoffset" : 1321,
        "key.offset" : 1316,
        "key.parsed_declaration" : "public func mod <T: FloatingPoint> (_ dividend: T, _ modulus: T) -> T",
        "key.parsed_scope.end" : 51,
        "key.parsed_scope.start" : 48,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math3modyxx_xtSzRzlF\">mod&lt;T&gt;(_: T, _: T) -&gt; T where T : BinaryInteger<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 1329
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FloatingPoint"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 1326,
            "key.offset" : 1326,
            "key.parsed_declaration" : "public func mod <T: FloatingPoint> (_ dividend: T, _ modulus: T) -> T",
            "key.parsed_scope.end" : 48,
            "key.parsed_scope.start" : 48,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math3modyxx_xtSFRzlF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>let result: T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Functions.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 62,
            "key.name" : "result",
            "key.namelength" : 6,
            "key.nameoffset" : 1389,
            "key.offset" : 1385,
            "key.parsed_declaration" : "let result = dividend.truncatingRemainder(dividingBy: modulus)",
            "key.parsed_scope.end" : 49,
            "key.parsed_scope.start" : 49,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math3modyxx_xtSFRzlF6resultL_xvp"
          }
        ],
        "key.typename" : "<T where T : FloatingPoint> (T, T) -> T",
        "key.typeusr" : "$Syxx_xtcSFRzluD",
        "key.usr" : "s:4Math3modyxx_xtSFRzlF"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 896,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func gcd&lt;I&gt;(_ a: <Type usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\">I<\/Type>, _ b: <Type usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\">I<\/Type>) -&gt; <Type usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\">I<\/Type> where I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 202
          }
        ],
        "key.bodylength" : 68,
        "key.bodyoffset" : 260,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Greatest common divisor of `a` and `b`.",
        "key.doc.declaration" : "public func gcd<I>(_ a: I, _ b: I) -> I where I : BinaryInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift\" line=\"12\" column=\"13\"><Name>gcd(_:_:)<\/Name><USR>s:4Math3gcdyxx_xtSzRzlF<\/USR><Declaration>public func gcd&lt;I&gt;(_ a: I, _ b: I) -&gt; I where I : BinaryInteger<\/Declaration><CommentParts><ResultDiscussion><Para>Greatest common divisor of <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 12,
        "key.doc.name" : "gcd(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Greatest common divisor of `a` and `b`."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 55,
        "key.docoffset" : 147,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>gcd<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\"><decl.generic_type_param.name>I<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math3gcdyxx_xtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>I : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 120,
        "key.name" : "gcd(_:_:)",
        "key.namelength" : 39,
        "key.nameoffset" : 214,
        "key.offset" : 209,
        "key.parsed_declaration" : "public func gcd <I: BinaryInteger> (_ a: I, _ b: I) -> I",
        "key.parsed_scope.end" : 15,
        "key.parsed_scope.start" : 12,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 222
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>I<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "BinaryInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "I",
            "key.namelength" : 1,
            "key.nameoffset" : 219,
            "key.offset" : 219,
            "key.parsed_declaration" : "public func gcd <I: BinaryInteger> (_ a: I, _ b: I) -> I",
            "key.parsed_scope.end" : 12,
            "key.parsed_scope.start" : 12,
            "key.typename" : "I.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math3gcdyxx_xtSzRzlF1IL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>let result: I<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type>I<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 18,
            "key.name" : "result",
            "key.namelength" : 6,
            "key.nameoffset" : 269,
            "key.offset" : 265,
            "key.parsed_declaration" : "let result = a % b",
            "key.parsed_scope.end" : 13,
            "key.parsed_scope.start" : 13,
            "key.typename" : "I",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math3gcdyxx_xtSzRzlF6resultL_xvp"
          }
        ],
        "key.typename" : "<I where I : BinaryInteger> (I, I) -> I",
        "key.typeusr" : "$Syxx_xtcSzRzluD",
        "key.usr" : "s:4Math3gcdyxx_xtSzRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func lcm&lt;I&gt;(_ a: <Type usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\">I<\/Type>, _ b: <Type usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\">I<\/Type>) -&gt; <Type usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\">I<\/Type> where I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 384
          }
        ],
        "key.bodylength" : 31,
        "key.bodyoffset" : 442,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Least common multiple of `a` and `b`.",
        "key.doc.declaration" : "public func lcm<I>(_ a: I, _ b: I) -> I where I : BinaryInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift\" line=\"18\" column=\"13\"><Name>lcm(_:_:)<\/Name><USR>s:4Math3lcmyxx_xtSzRzlF<\/USR><Declaration>public func lcm&lt;I&gt;(_ a: I, _ b: I) -&gt; I where I : BinaryInteger<\/Declaration><CommentParts><ResultDiscussion><Para>Least common multiple of <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 18,
        "key.doc.name" : "lcm(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Least common multiple of `a` and `b`."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 53,
        "key.docoffset" : 331,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>lcm<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\"><decl.generic_type_param.name>I<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math3lcmyxx_xtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>I : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 83,
        "key.name" : "lcm(_:_:)",
        "key.namelength" : 39,
        "key.nameoffset" : 396,
        "key.offset" : 391,
        "key.parsed_declaration" : "public func lcm <I: BinaryInteger> (_ a: I, _ b: I) -> I",
        "key.parsed_scope.end" : 20,
        "key.parsed_scope.start" : 18,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 404
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>I<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "BinaryInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "I",
            "key.namelength" : 1,
            "key.nameoffset" : 401,
            "key.offset" : 401,
            "key.parsed_declaration" : "public func lcm <I: BinaryInteger> (_ a: I, _ b: I) -> I",
            "key.parsed_scope.end" : 18,
            "key.parsed_scope.start" : 18,
            "key.typename" : "I.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math3lcmyxx_xtSzRzlF1IL_xmfp"
          }
        ],
        "key.typename" : "<I where I : BinaryInteger> (I, I) -> I",
        "key.typeusr" : "$Syxx_xtcSzRzluD",
        "key.usr" : "s:4Math3lcmyxx_xtSzRzlF"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Sequence<\/Declaration>",
        "key.bodylength" : 369,
        "key.bodyoffset" : 525,
        "key.doc.declaration" : "protocol Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "A sequence is a list of values that you can step through one at a time. The most common way to iterate over the elements of a sequence is to use a `for`-`in` loop:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence. As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence. This example checks to see whether a particular insect is in an array."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Sequence` protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values. For clearer, more concise code, the example above could use the array’s `contains(_:)` method, which every sequence inherits from `Sequence`, instead of iterating manually:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Sequence` protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration. As a consequence, don’t assume that multiple `for`-`in` loops on a sequence will either resume iteration or restart from the beginning:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element. A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second `for`-`in` loop."
          },
          {
            "Para" : "To establish that a type you’ve created supports nondestructive iteration, add conformance to the `Collection` protocol."
          },
          {
            "Para" : "Making your own custom types conform to `Sequence` enables many useful operations, like `for`-`in` looping and the `contains` method, without much effort. To add `Sequence` conformance to your own custom type, add a `makeIterator()` method that returns an iterator."
          },
          {
            "Para" : "Alternatively, if your type can act as its own iterator, implementing the requirements of the `IteratorProtocol` protocol and declaring conformance to both `Sequence` and `IteratorProtocol` are sufficient."
          },
          {
            "Para" : "Here’s a definition of a `Countdown` sequence that serves as its own iterator. The `makeIterator()` method is provided as a default implementation."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A sequence should provide its iterator in O(1). The `Sequence` protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O() unless documented otherwise."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Sequence<\/Name><USR>s:ST<\/USR><Declaration>protocol Sequence<\/Declaration><CommentParts><Abstract><Para>A type that provides sequential, iterated access to its elements.<\/Para><\/Abstract><Discussion><Para>A sequence is a list of values that you can step through one at a time. The most common way to iterate over the elements of a sequence is to use a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let oneTwoThree = 1...3]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for number in oneTwoThree {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(number)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence. As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence. This example checks to see whether a particular insect is in an array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var hasMosquito = false]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for bug in bugs {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    if bug == \"Mosquito\" {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        hasMosquito = true]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        break]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(\"'bugs' has a mosquito: \\(hasMosquito)\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"'bugs' has a mosquito: false\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Sequence<\/codeVoice> protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values. For clearer, more concise code, the example above could use the array’s <codeVoice>contains(_:)<\/codeVoice> method, which every sequence inherits from <codeVoice>Sequence<\/codeVoice>, instead of iterating manually:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if bugs.contains(\"Mosquito\") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Break out the bug spray.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Whew, no mosquitos!\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Whew, no mosquitos!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Repeated Access<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>The <codeVoice>Sequence<\/codeVoice> protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration. As a consequence, don’t assume that multiple <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loops on a sequence will either resume iteration or restart from the beginning:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[for element in sequence {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    if ... some condition { break }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for element in sequence {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ No defined behavior]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element. A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop.<\/Para><Para>To establish that a type you’ve created supports nondestructive iteration, add conformance to the <codeVoice>Collection<\/codeVoice> protocol.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Sequence Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Making your own custom types conform to <codeVoice>Sequence<\/codeVoice> enables many useful operations, like <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> looping and the <codeVoice>contains<\/codeVoice> method, without much effort. To add <codeVoice>Sequence<\/codeVoice> conformance to your own custom type, add a <codeVoice>makeIterator()<\/codeVoice> method that returns an iterator.<\/Para><Para>Alternatively, if your type can act as its own iterator, implementing the requirements of the <codeVoice>IteratorProtocol<\/codeVoice> protocol and declaring conformance to both <codeVoice>Sequence<\/codeVoice> and <codeVoice>IteratorProtocol<\/codeVoice> are sufficient.<\/Para><Para>Here’s a definition of a <codeVoice>Countdown<\/codeVoice> sequence that serves as its own iterator. The <codeVoice>makeIterator()<\/codeVoice> method is provided as a default implementation.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Countdown: Sequence, IteratorProtocol {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var count: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    mutating func next() -> Int? {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        if count == 0 {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[            return nil]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        } else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[            defer { count -= 1 }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[            return count]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let threeToGo = Countdown(count: 3)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in threeToGo {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(i)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>A sequence should provide its iterator in O(1). The <codeVoice>Sequence<\/codeVoice> protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O(<emphasis>n<\/emphasis>) unless documented otherwise.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Sequence",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Sequence<\/decl.name><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 419,
        "key.modulename" : "Swift",
        "key.name" : "Sequence",
        "key.namelength" : 8,
        "key.nameoffset" : 486,
        "key.offset" : 476,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var gcd: <Type usr=\"s:ST8IteratorQa\">Iterator<\/Type>.<Type usr=\"s:St7ElementQa\">Element<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 634
              }
            ],
            "key.bodylength" : 40,
            "key.bodyoffset" : 668,
            "key.doc.column" : 16,
            "key.doc.comment" : "Greatest common divisor of elements in Sequence.\n\n    `[8,12].gcd -> 4`",
            "key.doc.declaration" : "public var gcd: Iterator.Element { get }",
            "key.doc.discussion" : [
              {
                "CodeListing" : ""
              }
            ],
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift\" line=\"28\" column=\"16\"><Name>gcd<\/Name><USR>s:ST4MathSz7ElementRpzrlE3gcdACvp<\/USR><Declaration>public var gcd: Iterator.Element { get }<\/Declaration><CommentParts><Abstract><Para>Greatest common divisor of elements in Sequence.<\/Para><\/Abstract><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[`[8,12].gcd -> 4`]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 28,
            "key.doc.name" : "gcd",
            "key.doc.type" : "Other",
            "key.doclength" : 99,
            "key.docoffset" : 531,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>gcd<\/decl.name>: <decl.var.type><ref.associatedtype usr=\"s:ST8IteratorQa\">Iterator<\/ref.associatedtype>.<ref.associatedtype usr=\"s:St7ElementQa\">Element<\/ref.associatedtype><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 68,
            "key.name" : "gcd",
            "key.namelength" : 3,
            "key.nameoffset" : 645,
            "key.offset" : 641,
            "key.parsed_declaration" : "public var gcd: Iterator.Element",
            "key.parsed_scope.end" : 30,
            "key.parsed_scope.start" : 28,
            "key.typename" : "Self.Element",
            "key.typeusr" : "$S7ElementSTQzD",
            "key.usr" : "s:ST4MathSz7ElementRpzrlE3gcdACvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var lcm: <Type usr=\"s:ST8IteratorQa\">Iterator<\/Type>.<Type usr=\"s:St7ElementQa\">Element<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 818
              }
            ],
            "key.bodylength" : 40,
            "key.bodyoffset" : 852,
            "key.doc.column" : 16,
            "key.doc.comment" : "Least common multiple of elements in Sequence.\n\n    `[4,5,6].lcm -> 60`",
            "key.doc.declaration" : "public var lcm: Iterator.Element { get }",
            "key.doc.discussion" : [
              {
                "CodeListing" : ""
              }
            ],
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift\" line=\"36\" column=\"16\"><Name>lcm<\/Name><USR>s:ST4MathSz7ElementRpzrlE3lcmACvp<\/USR><Declaration>public var lcm: Iterator.Element { get }<\/Declaration><CommentParts><Abstract><Para>Least common multiple of elements in Sequence.<\/Para><\/Abstract><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[`[4,5,6].lcm -> 60`]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 36,
            "key.doc.name" : "lcm",
            "key.doc.type" : "Other",
            "key.doclength" : 99,
            "key.docoffset" : 715,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/GCDDomain.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>lcm<\/decl.name>: <decl.var.type><ref.associatedtype usr=\"s:ST8IteratorQa\">Iterator<\/ref.associatedtype>.<ref.associatedtype usr=\"s:St7ElementQa\">Element<\/ref.associatedtype><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 68,
            "key.name" : "lcm",
            "key.namelength" : 3,
            "key.nameoffset" : 829,
            "key.offset" : 825,
            "key.parsed_declaration" : "public var lcm: Iterator.Element",
            "key.parsed_scope.end" : 38,
            "key.parsed_scope.start" : 36,
            "key.typename" : "Self.Element",
            "key.typeusr" : "$S7ElementSTQzD",
            "key.usr" : "s:ST4MathSz7ElementRpzrlE3lcmACvp"
          }
        ],
        "key.typename" : "Sequence.Protocol",
        "key.typeusr" : "$SST_pmD",
        "key.usr" : "s:ST"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1257,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>protocol BinaryInteger : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:Sj\">Numeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type> where <Type usr=\"s:Sz4Selfxmfp\">Self<\/Type>.Magnitude : <Type usr=\"s:Sz\">BinaryInteger<\/Type>, <Type usr=\"s:Sz4Selfxmfp\">Self<\/Type>.Magnitude == <Type usr=\"s:Sz4Selfxmfp\">Self<\/Type>.Magnitude.Magnitude<\/Declaration>",
        "key.bodylength" : 1090,
        "key.bodyoffset" : 165,
        "key.doc.declaration" : "protocol BinaryInteger : CustomStringConvertible, Hashable, Numeric, Strideable where Self.Magnitude : BinaryInteger, Self.Magnitude == Self.Magnitude.Magnitude",
        "key.doc.discussion" : [
          {
            "Para" : "The `BinaryInteger` protocol is the basis for all the integer types provided by the standard library. All of the standard library’s integer types, such as `Int` and `UInt32`, conform to `BinaryInteger`."
          },
          {
            "Para" : "You can create new instances of a type that conforms to the `BinaryInteger` protocol from a floating-point number or another binary integer of any type. The `BinaryInteger` protocol provides initializers for four different kinds of conversion."
          },
          {
            "Para" : "You use the default `init(_:)` initializer to create a new instance when you’re sure that the value passed is representable in the new type. For example, an instance of `Int16` can represent the value `500`, so the first conversion in the code sample below succeeds. That same value is too large to represent as an `Int8` instance, so the second conversion fails, triggering a runtime error."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When you create a binary integer from a floating-point value using the default initializer, the value is rounded toward zero before the range is checked. In the following example, the value `127.75` is rounded to `127`, which is representable by the `Int8` type.  `128.25` is rounded to `128`, which is not representable as an `Int8` instance, triggering a runtime error."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `init?(exactly:)` initializer to create a new instance after checking whether the passed value is representable. Instead of trapping on out-of-range values, using the failable `exact` initializer results in `nil`."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "When converting floating-point values, the `init?(exact:)` initializer checks both that the passed value has no fractional part and that the value is representable in the resulting type."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `init(clamping:)` initializer to create a new instance of a binary integer type where out-of-range values are clamped to the representable range of the type. For a type `T`, the resulting value is in the range `T.min...T.max`."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Use the `init(truncatingIfNeeded:)` initializer to create a new instance with the same bit pattern as the passed value, extending or truncating the value’s representation as necessary. Note that the value may not be preserved, particularly when converting between signed to unsigned integer types or when the destination type has a smaller bit width than the source type. The following example shows how extending and truncating work for nonnegative integers:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Any padding is performed by  the passed value. When nonnegative integers are extended, the result is padded with zeroes. When negative integers are extended, the result is padded with ones. This example shows several extending conversions of a negative value—note that negative values are sign-extended even when converting to an unsigned type."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can use relational operators, such as the less-than and equal-to operators (`<` and `==`), to compare instances of different binary integer types. The following example compares instances of the `Int`, `UInt`, and `UInt8` types:"
          },
          {
            "CodeListing" : ""
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>BinaryInteger<\/Name><USR>s:Sz<\/USR><Declaration>protocol BinaryInteger : CustomStringConvertible, Hashable, Numeric, Strideable where Self.Magnitude : BinaryInteger, Self.Magnitude == Self.Magnitude.Magnitude<\/Declaration><CommentParts><Abstract><Para>An integer type with a binary representation.<\/Para><\/Abstract><Discussion><Para>The <codeVoice>BinaryInteger<\/codeVoice> protocol is the basis for all the integer types provided by the standard library. All of the standard library’s integer types, such as <codeVoice>Int<\/codeVoice> and <codeVoice>UInt32<\/codeVoice>, conform to <codeVoice>BinaryInteger<\/codeVoice>.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Converting Between Numeric Types<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can create new instances of a type that conforms to the <codeVoice>BinaryInteger<\/codeVoice> protocol from a floating-point number or another binary integer of any type. The <codeVoice>BinaryInteger<\/codeVoice> protocol provides initializers for four different kinds of conversion.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Range-Checked Conversion<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>You use the default <codeVoice>init(_:)<\/codeVoice> initializer to create a new instance when you’re sure that the value passed is representable in the new type. For example, an instance of <codeVoice>Int16<\/codeVoice> can represent the value <codeVoice>500<\/codeVoice>, so the first conversion in the code sample below succeeds. That same value is too large to represent as an <codeVoice>Int8<\/codeVoice> instance, so the second conversion fails, triggering a runtime error.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let x: Int = 500]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let y = Int16(x)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ y == 500]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let z = Int8(x)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Error: Not enough bits to represent...]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>When you create a binary integer from a floating-point value using the default initializer, the value is rounded toward zero before the range is checked. In the following example, the value <codeVoice>127.75<\/codeVoice> is rounded to <codeVoice>127<\/codeVoice>, which is representable by the <codeVoice>Int8<\/codeVoice> type.  <codeVoice>128.25<\/codeVoice> is rounded to <codeVoice>128<\/codeVoice>, which is not representable as an <codeVoice>Int8<\/codeVoice> instance, triggering a runtime error.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let e = Int8(127.75)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ e == 127]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let f = Int8(128.25)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Error: Double value cannot be converted...]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Exact Conversion<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>Use the <codeVoice>init?(exactly:)<\/codeVoice> initializer to create a new instance after checking whether the passed value is representable. Instead of trapping on out-of-range values, using the failable <codeVoice>exact<\/codeVoice> initializer results in <codeVoice>nil<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let x = Int16(exactly: 500)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ x == Optional(500)]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let y = Int8(exactly: 500)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ y == nil]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>When converting floating-point values, the <codeVoice>init?(exact:)<\/codeVoice> initializer checks both that the passed value has no fractional part and that the value is representable in the resulting type.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let e = Int8(exactly: 23.0)       \/\/ integral value, representable]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ e == Optional(23)]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let f = Int8(exactly: 23.75)      \/\/ fractional value, representable]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ f == nil]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let g = Int8(exactly: 500.0)      \/\/ integral value, nonrepresentable]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ g == nil]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Clamping Conversion<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>Use the <codeVoice>init(clamping:)<\/codeVoice> initializer to create a new instance of a binary integer type where out-of-range values are clamped to the representable range of the type. For a type <codeVoice>T<\/codeVoice>, the resulting value is in the range <codeVoice>T.min...T.max<\/codeVoice>.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let x = Int16(clamping: 500)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ x == 500]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let y = Int8(clamping: 500)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ y == 127]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let z = UInt8(clamping: -500)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ z == 0]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Bit Pattern Conversion<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>Use the <codeVoice>init(truncatingIfNeeded:)<\/codeVoice> initializer to create a new instance with the same bit pattern as the passed value, extending or truncating the value’s representation as necessary. Note that the value may not be preserved, particularly when converting between signed to unsigned integer types or when the destination type has a smaller bit width than the source type. The following example shows how extending and truncating work for nonnegative integers:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let q: Int16 = 850]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ q == 0b00000011_01010010]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let r = Int8(truncatingIfNeeded: q)      \/\/ truncate 'q' to fit in 8 bits]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ r == 82]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/   == 0b01010010]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let s = Int16(truncatingIfNeeded: r)     \/\/ extend 'r' to fill 16 bits]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ s == 82]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/   == 0b00000000_01010010]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Any padding is performed by <emphasis>sign-extending<\/emphasis> the passed value. When nonnegative integers are extended, the result is padded with zeroes. When negative integers are extended, the result is padded with ones. This example shows several extending conversions of a negative value—note that negative values are sign-extended even when converting to an unsigned type.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let t: Int8 = -100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ t == -100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ t's binary representation == 0b10011100]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let u = UInt8(truncatingIfNeeded: t)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ u == 156]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ u's binary representation == 0b10011100]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let v = Int16(truncatingIfNeeded: t)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ v == -100]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ v's binary representation == 0b11111111_10011100]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let w = UInt16(truncatingIfNeeded: t)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ w == 65436]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ w's binary representation == 0b11111111_10011100]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Comparing Across Integer Types<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can use relational operators, such as the less-than and equal-to operators (<codeVoice>&lt;<\/codeVoice> and <codeVoice>==<\/codeVoice>), to compare instances of different binary integer types. The following example compares instances of the <codeVoice>Int<\/codeVoice>, <codeVoice>UInt<\/codeVoice>, and <codeVoice>UInt8<\/codeVoice> types:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let x: Int = -23]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let y: UInt = 1_000]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let z: UInt8 = 23]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if x < y {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"\\(x) is less than \\(y).\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"-23 is less than 1000.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if z > x {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"\\(z) is greater than \\(x).\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"23 is greater than -23.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "BinaryInteger",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>BinaryInteger<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:Sj\">Numeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sz4Selfxmfp\">Self<\/ref.generic_type_param>.Magnitude : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sz4Selfxmfp\">Self<\/ref.generic_type_param>.Magnitude == <ref.generic_type_param usr=\"s:Sz4Selfxmfp\">Self<\/ref.generic_type_param>.Magnitude.Magnitude<\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Math\/Integers",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1116,
        "key.modulename" : "Swift",
        "key.name" : "BinaryInteger",
        "key.namelength" : 13,
        "key.nameoffset" : 150,
        "key.offset" : 140,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isEven: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 249
              }
            ],
            "key.bodylength" : 39,
            "key.bodyoffset" : 274,
            "key.doc.column" : 16,
            "key.doc.comment" : "- returns: `true` if this value is divisible by 2. Otherwise, `false`",
            "key.doc.declaration" : "public var isEven: Bool { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift\" line=\"12\" column=\"16\"><Name>isEven<\/Name><USR>s:Sz4MathE6isEvenSbvp<\/USR><Declaration>public var isEven: Bool { get }<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if this value is divisible by 2. Otherwise, <codeVoice>false<\/codeVoice><\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 12,
            "key.doc.name" : "isEven",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if this value is divisible by 2. Otherwise, `false`"
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 74,
            "key.docoffset" : 171,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isEven<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 58,
            "key.name" : "isEven",
            "key.namelength" : 6,
            "key.nameoffset" : 260,
            "key.offset" : 256,
            "key.parsed_declaration" : "public var isEven: Bool",
            "key.parsed_scope.end" : 14,
            "key.parsed_scope.start" : 12,
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:Sz4MathE6isEvenSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isOdd: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 403
              }
            ],
            "key.bodylength" : 34,
            "key.bodyoffset" : 427,
            "key.doc.column" : 16,
            "key.doc.comment" : "- returns: `true` if this value is not divisible by 2. Otherwise, `false`.",
            "key.doc.declaration" : "public var isOdd: Bool { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift\" line=\"17\" column=\"16\"><Name>isOdd<\/Name><USR>s:Sz4MathE5isOddSbvp<\/USR><Declaration>public var isOdd: Bool { get }<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if this value is not divisible by 2. Otherwise, <codeVoice>false<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 17,
            "key.doc.name" : "isOdd",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if this value is not divisible by 2. Otherwise, `false`."
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 79,
            "key.docoffset" : 320,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isOdd<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 52,
            "key.name" : "isOdd",
            "key.namelength" : 5,
            "key.nameoffset" : 414,
            "key.offset" : 410,
            "key.parsed_declaration" : "public var isOdd: Bool",
            "key.parsed_scope.end" : 19,
            "key.parsed_scope.start" : 17,
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:Sz4MathE5isOddSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isPrime: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 547
              }
            ],
            "key.bodylength" : 317,
            "key.bodyoffset" : 573,
            "key.doc.column" : 16,
            "key.doc.comment" : "- returns: `true` if this value is a prime number. Otherwise, `false`.",
            "key.doc.declaration" : "public var isPrime: Bool { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift\" line=\"22\" column=\"16\"><Name>isPrime<\/Name><USR>s:Sz4MathE7isPrimeSbvp<\/USR><Declaration>public var isPrime: Bool { get }<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if this value is a prime number. Otherwise, <codeVoice>false<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 22,
            "key.doc.name" : "isPrime",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if this value is a prime number. Otherwise, `false`."
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 75,
            "key.docoffset" : 468,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isPrime<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 337,
            "key.name" : "isPrime",
            "key.namelength" : 7,
            "key.nameoffset" : 558,
            "key.offset" : 554,
            "key.parsed_declaration" : "public var isPrime: Bool",
            "key.parsed_scope.end" : 40,
            "key.parsed_scope.start" : 22,
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:Sz4MathE7isPrimeSbvp"
          },
          {
            "key.annotated_decl" : "<Declaration>var i: <Type usr=\"s:Sz4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>i<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:Sz4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 15,
            "key.name" : "i",
            "key.namelength" : 1,
            "key.nameoffset" : 718,
            "key.offset" : 714,
            "key.parsed_declaration" : "var i: Self = 2",
            "key.parsed_scope.end" : 32,
            "key.parsed_scope.start" : 32,
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:Sz4MathE7isPrimeSbvg1iL_xvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func isDivisible(by value: <Type usr=\"s:Sz4MathE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 992
              }
            ],
            "key.bodylength" : 38,
            "key.bodyoffset" : 1041,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: `true` if this value if divisible by the given `value`. Otherwise, `false`.",
            "key.doc.declaration" : "public func isDivisible(by value: Self) -> Bool",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift\" line=\"43\" column=\"17\"><Name>isDivisible(by:)<\/Name><USR>s:Sz4MathE11isDivisible2bySbx_tF<\/USR><Declaration>public func isDivisible(by value: Self) -&gt; Bool<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if this value if divisible by the given <codeVoice>value<\/codeVoice>. Otherwise, <codeVoice>false<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 43,
            "key.doc.name" : "isDivisible(by:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if this value if divisible by the given `value`. Otherwise, `false`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 91,
            "key.docoffset" : 897,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>isDivisible<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>by<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:Sz4MathE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 81,
            "key.name" : "isDivisible(by:)",
            "key.namelength" : 27,
            "key.nameoffset" : 1004,
            "key.offset" : 999,
            "key.parsed_declaration" : "public func isDivisible(by value: Self) -> Bool",
            "key.parsed_scope.end" : 45,
            "key.parsed_scope.start" : 43,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : BinaryInteger> (Self) -> (Self) -> Bool",
            "key.typeusr" : "$S2bySbx_tcD",
            "key.usr" : "s:Sz4MathE11isDivisible2bySbx_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isPowerOfTwo: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1165
              }
            ],
            "key.bodylength" : 57,
            "key.bodyoffset" : 1196,
            "key.doc.column" : 16,
            "key.doc.comment" : "- returns: `true` if this value is a power of two. Otherwise, `false`.",
            "key.doc.declaration" : "public var isPowerOfTwo: Bool { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift\" line=\"48\" column=\"16\"><Name>isPowerOfTwo<\/Name><USR>s:Sz4MathE12isPowerOfTwoSbvp<\/USR><Declaration>public var isPowerOfTwo: Bool { get }<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if this value is a power of two. Otherwise, <codeVoice>false<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 48,
            "key.doc.name" : "isPowerOfTwo",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if this value is a power of two. Otherwise, `false`."
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 75,
            "key.docoffset" : 1086,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/IntegerExtensions.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isPowerOfTwo<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 82,
            "key.name" : "isPowerOfTwo",
            "key.namelength" : 12,
            "key.nameoffset" : 1176,
            "key.offset" : 1172,
            "key.parsed_declaration" : "public var isPowerOfTwo: Bool",
            "key.parsed_scope.end" : 50,
            "key.parsed_scope.start" : 48,
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:Sz4MathE12isPowerOfTwoSbvp"
          }
        ],
        "key.typename" : "BinaryInteger.Protocol",
        "key.typeusr" : "$SSz_pmD",
        "key.usr" : "s:Sz"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 2060,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func squared&lt;F&gt;(_ values: [<Type usr=\"s:4Math7squaredySayxGACSFRzlF1FL_xmfp\">F<\/Type>]) -&gt; [<Type usr=\"s:4Math7squaredySayxGACSFRzlF1FL_xmfp\">F<\/Type>] where F : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 213
          }
        ],
        "key.bodylength" : 35,
        "key.bodyoffset" : 276,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: All given values risen to the power of two.",
        "key.doc.declaration" : "public func squared<F>(_ values: [F]) -> [F] where F : FloatingPoint",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"12\" column=\"13\"><Name>squared(_:)<\/Name><USR>s:4Math7squaredySayxGACSFRzlF<\/USR><Declaration>public func squared&lt;F&gt;(_ values: [F]) -&gt; [F] where F : FloatingPoint<\/Declaration><CommentParts><ResultDiscussion><Para>All given values risen to the power of two.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 12,
        "key.doc.name" : "squared(_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "All given values risen to the power of two."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 59,
        "key.docoffset" : 154,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>squared<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math7squaredySayxGACSFRzlF1FL_xmfp\"><decl.generic_type_param.name>F<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>values<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4Math7squaredySayxGACSFRzlF1FL_xmfp\">F<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4Math7squaredySayxGACSFRzlF1FL_xmfp\">F<\/ref.generic_type_param>]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>F : <ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 92,
        "key.name" : "squared(_:)",
        "key.namelength" : 42,
        "key.nameoffset" : 225,
        "key.offset" : 220,
        "key.parsed_declaration" : "public func squared <F: FloatingPoint> (_ values: [F]) -> [F]",
        "key.parsed_scope.end" : 14,
        "key.parsed_scope.start" : 12,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math7squaredySayxGACSzRzlF\">squared&lt;I&gt;(_: [I]) -&gt; [I] where I : BinaryInteger<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>F : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 237
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>F<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FloatingPoint"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "F",
            "key.namelength" : 1,
            "key.nameoffset" : 234,
            "key.offset" : 234,
            "key.parsed_declaration" : "public func squared <F: FloatingPoint> (_ values: [F]) -> [F]",
            "key.parsed_scope.end" : 12,
            "key.parsed_scope.start" : 12,
            "key.typename" : "F.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math7squaredySayxGACSFRzlF1FL_xmfp"
          }
        ],
        "key.typename" : "<F where F : FloatingPoint> ([F]) -> [F]",
        "key.typeusr" : "$SySayxGAAcSFRzluD",
        "key.usr" : "s:4Math7squaredySayxGACSFRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func * &lt;F&gt;(lhs: [<Type usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\">F<\/Type>], rhs: [<Type usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\">F<\/Type>]) -&gt; [<Type usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\">F<\/Type>] where F : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 397
          }
        ],
        "key.bodylength" : 32,
        "key.bodyoffset" : 459,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: All values of `lhs` multiplied by the corresponding value in `rhs`.",
        "key.doc.declaration" : "public func * <F>(lhs: [F], rhs: [F]) -> [F] where F : FloatingPoint",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"17\" column=\"13\"><Name>*(_:_:)<\/Name><USR>s:4Math1moiySayxGAC_ACtSFRzlF<\/USR><Declaration>public func * &lt;F&gt;(lhs: [F], rhs: [F]) -&gt; [F] where F : FloatingPoint<\/Declaration><CommentParts><ResultDiscussion><Para>All values of <codeVoice>lhs<\/codeVoice> multiplied by the corresponding value in <codeVoice>rhs<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 17,
        "key.doc.name" : "*(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "All values of `lhs` multiplied by the corresponding value in `rhs`."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 83,
        "key.docoffset" : 314,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>* <\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\"><decl.generic_type_param.name>F<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\">F<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\">F<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp\">F<\/ref.generic_type_param>]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>F : <ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 88,
        "key.name" : "*(_:_:)",
        "key.namelength" : 41,
        "key.nameoffset" : 409,
        "key.offset" : 404,
        "key.parsed_declaration" : "public func * <F: FloatingPoint> (lhs: [F], rhs: [F]) -> [F]",
        "key.parsed_scope.end" : 19,
        "key.parsed_scope.start" : 17,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math1moiySayxGAC_ACtSzRzlF\">* &lt;I&gt;(_: [I], _: [I]) -&gt; [I] where I : BinaryInteger<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SF1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sf1moiyS2f_SftFZ\">* (_: Float, _: Float) -&gt; Float<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sd1moiyS2d_SdtFZ\">* (_: Double, _: Double) -&gt; Double<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1moiyA2B_ABtFZ\">* (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sj1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sz1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1moiyA2B_ABtFZ\">* (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1moiyA2B_ABtFZ\">* (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1moiyA2B_ABtFZ\">* (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1moiyA2B_ABtFZ\">* (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1moiyA2B_ABtFZ\">* (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1moiyA2B_ABtFZ\">* (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1moiyA2B_ABtFZ\">* (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1moiyA2B_ABtFZ\">* (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Su1moiyS2u_SutFZ\">* (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Si1moiyS2i_SitFZ\">* (_: Int, _: Int) -&gt; Int<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>F : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 415
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>F<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FloatingPoint"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "F",
            "key.namelength" : 1,
            "key.nameoffset" : 412,
            "key.offset" : 412,
            "key.parsed_declaration" : "public func * <F: FloatingPoint> (lhs: [F], rhs: [F]) -> [F]",
            "key.parsed_scope.end" : 17,
            "key.parsed_scope.start" : 17,
            "key.typename" : "F.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math1moiySayxGAC_ACtSFRzlF1FL_xmfp"
          }
        ],
        "key.typename" : "<F where F : FloatingPoint> ([F], [F]) -> [F]",
        "key.typeusr" : "$SySayxGAA_AAtcSFRzluD",
        "key.usr" : "s:4Math1moiySayxGAC_ACtSFRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func squared&lt;I&gt;(_ values: [<Type usr=\"s:4Math7squaredySayxGACSzRzlF1IL_xmfp\">I<\/Type>]) -&gt; [<Type usr=\"s:4Math7squaredySayxGACSzRzlF1IL_xmfp\">I<\/Type>] where I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 553
          }
        ],
        "key.bodylength" : 35,
        "key.bodyoffset" : 616,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: All given values risen to the power of two.",
        "key.doc.declaration" : "public func squared<I>(_ values: [I]) -> [I] where I : BinaryInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"22\" column=\"13\"><Name>squared(_:)<\/Name><USR>s:4Math7squaredySayxGACSzRzlF<\/USR><Declaration>public func squared&lt;I&gt;(_ values: [I]) -&gt; [I] where I : BinaryInteger<\/Declaration><CommentParts><ResultDiscussion><Para>All given values risen to the power of two.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 22,
        "key.doc.name" : "squared(_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "All given values risen to the power of two."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 59,
        "key.docoffset" : 494,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>squared<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math7squaredySayxGACSzRzlF1IL_xmfp\"><decl.generic_type_param.name>I<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>values<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4Math7squaredySayxGACSzRzlF1IL_xmfp\">I<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4Math7squaredySayxGACSzRzlF1IL_xmfp\">I<\/ref.generic_type_param>]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>I : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 92,
        "key.name" : "squared(_:)",
        "key.namelength" : 42,
        "key.nameoffset" : 565,
        "key.offset" : 560,
        "key.parsed_declaration" : "public func squared <I: BinaryInteger> (_ values: [I]) -> [I]",
        "key.parsed_scope.end" : 24,
        "key.parsed_scope.start" : 22,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math7squaredySayxGACSFRzlF\">squared&lt;F&gt;(_: [F]) -&gt; [F] where F : FloatingPoint<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 577
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>I<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "BinaryInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "I",
            "key.namelength" : 1,
            "key.nameoffset" : 574,
            "key.offset" : 574,
            "key.parsed_declaration" : "public func squared <I: BinaryInteger> (_ values: [I]) -> [I]",
            "key.parsed_scope.end" : 22,
            "key.parsed_scope.start" : 22,
            "key.typename" : "I.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math7squaredySayxGACSzRzlF1IL_xmfp"
          }
        ],
        "key.typename" : "<I where I : BinaryInteger> ([I]) -> [I]",
        "key.typeusr" : "$SySayxGAAcSzRzluD",
        "key.usr" : "s:4Math7squaredySayxGACSzRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func * &lt;I&gt;(lhs: [<Type usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\">I<\/Type>], rhs: [<Type usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\">I<\/Type>]) -&gt; [<Type usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\">I<\/Type>] where I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 737
          }
        ],
        "key.bodylength" : 32,
        "key.bodyoffset" : 799,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: All values of `lhs` multiplied by the corresponding value in `rhs`.",
        "key.doc.declaration" : "public func * <I>(lhs: [I], rhs: [I]) -> [I] where I : BinaryInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"27\" column=\"13\"><Name>*(_:_:)<\/Name><USR>s:4Math1moiySayxGAC_ACtSzRzlF<\/USR><Declaration>public func * &lt;I&gt;(lhs: [I], rhs: [I]) -&gt; [I] where I : BinaryInteger<\/Declaration><CommentParts><ResultDiscussion><Para>All values of <codeVoice>lhs<\/codeVoice> multiplied by the corresponding value in <codeVoice>rhs<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 27,
        "key.doc.name" : "*(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "All values of `lhs` multiplied by the corresponding value in `rhs`."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 83,
        "key.docoffset" : 654,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>* <\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\"><decl.generic_type_param.name>I<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.generic_type_param usr=\"s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp\">I<\/ref.generic_type_param>]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>I : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.operator.infix>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 88,
        "key.name" : "*(_:_:)",
        "key.namelength" : 41,
        "key.nameoffset" : 749,
        "key.offset" : 744,
        "key.parsed_declaration" : "public func * <I: BinaryInteger> (lhs: [I], rhs: [I]) -> [I]",
        "key.parsed_scope.end" : 29,
        "key.parsed_scope.start" : 27,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math1moiySayxGAC_ACtSFRzlF\">* &lt;F&gt;(_: [F], _: [F]) -&gt; [F] where F : FloatingPoint<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:SF1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sf1moiyS2f_SftFZ\">* (_: Float, _: Float) -&gt; Float<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sd1moiyS2d_SdtFZ\">* (_: Double, _: Double) -&gt; Double<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1moiyA2B_ABtFZ\">* (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sj1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Sz1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1moiyA2B_ABtFZ\">* (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1moiyA2B_ABtFZ\">* (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1moiyA2B_ABtFZ\">* (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1moiyA2B_ABtFZ\">* (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1moiyA2B_ABtFZ\">* (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1moiyA2B_ABtFZ\">* (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1moiyA2B_ABtFZ\">* (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1moiyA2B_ABtFZ\">* (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Su1moiyS2u_SutFZ\">* (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:Si1moiyS2i_SitFZ\">* (_: Int, _: Int) -&gt; Int<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>I : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 755
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>I<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "BinaryInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "I",
            "key.namelength" : 1,
            "key.nameoffset" : 752,
            "key.offset" : 752,
            "key.parsed_declaration" : "public func * <I: BinaryInteger> (lhs: [I], rhs: [I]) -> [I]",
            "key.parsed_scope.end" : 27,
            "key.parsed_scope.start" : 27,
            "key.typename" : "I.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math1moiySayxGAC_ACtSzRzlF1IL_xmfp"
          }
        ],
        "key.typename" : "<I where I : BinaryInteger> ([I], [I]) -> [I]",
        "key.typeusr" : "$SySayxGAA_AAtcSzRzluD",
        "key.usr" : "s:4Math1moiySayxGAC_ACtSzRzlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func slope(_ xs: [<Type usr=\"s:Sf\">Float<\/Type>], _ ys: [<Type usr=\"s:Sf\">Float<\/Type>]) -&gt; <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 908
          }
        ],
        "key.bodylength" : 131,
        "key.bodyoffset" : 967,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Slope of linear regression of given x-values and y-values.",
        "key.doc.declaration" : "public func slope(_ xs: [Float], _ ys: [Float]) -> Float",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"32\" column=\"13\"><Name>slope(_:_:)<\/Name><USR>s:4Math5slopeySfSaySfG_ACtF<\/USR><Declaration>public func slope(_ xs: [Float], _ ys: [Float]) -&gt; Float<\/Declaration><CommentParts><ResultDiscussion><Para>Slope of linear regression of given x-values and y-values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 32,
        "key.doc.name" : "slope(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Slope of linear regression of given x-values and y-values."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 74,
        "key.docoffset" : 834,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>slope<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>xs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sf\">Float<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>ys<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sf\">Float<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 184,
        "key.name" : "slope(_:_:)",
        "key.namelength" : 36,
        "key.nameoffset" : 920,
        "key.offset" : 915,
        "key.parsed_declaration" : "public func slope (_ xs: [Float], _ ys: [Float]) -> Float",
        "key.parsed_scope.end" : 36,
        "key.parsed_scope.start" : 32,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math5slopeySfSDyS2fGF\">slope(_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let sum1: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sum1<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 50,
            "key.name" : "sum1",
            "key.namelength" : 4,
            "key.nameoffset" : 976,
            "key.offset" : 972,
            "key.parsed_declaration" : "let sum1 = (xs * ys).mean! - (xs.mean! * ys.mean!)",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 33,
            "key.typename" : "Float",
            "key.typeusr" : "$SSfD",
            "key.usr" : "s:4Math5slopeySfSaySfG_ACtF4sum1L_Sfvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let sum2: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sum2<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 47,
            "key.name" : "sum2",
            "key.namelength" : 4,
            "key.nameoffset" : 1031,
            "key.offset" : 1027,
            "key.parsed_declaration" : "let sum2 = squared(xs).mean! - pow(xs.mean!, 2)",
            "key.parsed_scope.end" : 34,
            "key.parsed_scope.start" : 34,
            "key.typename" : "Float",
            "key.typeusr" : "$SSfD",
            "key.usr" : "s:4Math5slopeySfSaySfG_ACtF4sum2L_Sfvp"
          }
        ],
        "key.typename" : "([Float], [Float]) -> Float",
        "key.typeusr" : "$SySfSaySfG_AAtcD",
        "key.usr" : "s:4Math5slopeySfSaySfG_ACtF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func linearRegression(_ xs: [<Type usr=\"s:Sf\">Float<\/Type>], _ ys: [<Type usr=\"s:Sf\">Float<\/Type>]) -&gt; (<Type usr=\"s:Sf\">Float<\/Type>) -&gt; (<Type usr=\"s:Sf\">Float<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1362
          }
        ],
        "key.bodylength" : 178,
        "key.bodyoffset" : 1445,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Function that will calculate the y-value for the given x-value on the\n    regression.\n\n- note: Modified from: [Ray Wenderlich Swift Algorithm Club](https:\/\/github.com\/raywenderlich\/swift-algorithm-club\/tree\/master\/Linear%20Regression)",
        "key.doc.declaration" : "public func linearRegression(_ xs: [Float], _ ys: [Float]) -> (Float) -> (Float)",
        "key.doc.discussion" : [
          {
            "Note" : ""
          }
        ],
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"42\" column=\"13\"><Name>linearRegression(_:_:)<\/Name><USR>s:4Math16linearRegressionyS2fcSaySfG_ACtF<\/USR><Declaration>public func linearRegression(_ xs: [Float], _ ys: [Float]) -&gt; (Float) -&gt; (Float)<\/Declaration><CommentParts><ResultDiscussion><Para>Function that will calculate the y-value for the given x-value on the regression.<\/Para><\/ResultDiscussion><Discussion><Note><Para>Modified from: <Link href=\"https:\/\/github.com\/raywenderlich\/swift-algorithm-club\/tree\/master\/Linear%20Regression\">Ray Wenderlich Swift Algorithm Club<\/Link><\/Para><\/Note><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 42,
        "key.doc.name" : "linearRegression(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Function that will calculate the y-value for the given x-value on the regression."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 261,
        "key.docoffset" : 1101,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>linearRegression<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>xs<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sf\">Float<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>ys<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sf\">Float<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 255,
        "key.name" : "linearRegression(_:_:)",
        "key.namelength" : 47,
        "key.nameoffset" : 1374,
        "key.offset" : 1369,
        "key.parsed_declaration" : "public func linearRegression (_ xs: [Float], _ ys: [Float]) -> (Float) -> (Float)",
        "key.parsed_scope.end" : 50,
        "key.parsed_scope.start" : 42,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math16linearRegressionyS2fcSDyS2fGF\">linearRegression(_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let m: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>m<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 20,
            "key.name" : "m",
            "key.namelength" : 1,
            "key.nameoffset" : 1521,
            "key.offset" : 1517,
            "key.parsed_declaration" : "let m = slope(xs,ys)",
            "key.parsed_scope.end" : 46,
            "key.parsed_scope.start" : 46,
            "key.typename" : "Float",
            "key.typeusr" : "$SSfD",
            "key.usr" : "s:4Math16linearRegressionyS2fcSaySfG_ACtF1mL_Sfvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let intercept: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>intercept<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 41,
            "key.name" : "intercept",
            "key.namelength" : 9,
            "key.nameoffset" : 1546,
            "key.offset" : 1542,
            "key.parsed_declaration" : "let intercept = ys.mean! - (m * xs.mean!)",
            "key.parsed_scope.end" : 47,
            "key.parsed_scope.start" : 47,
            "key.typename" : "Float",
            "key.typeusr" : "$SSfD",
            "key.usr" : "s:4Math16linearRegressionyS2fcSaySfG_ACtF9interceptL_Sfvp"
          }
        ],
        "key.typename" : "([Float], [Float]) -> (Float) -> (Float)",
        "key.typeusr" : "$SyS2fcSaySfG_AAtcD",
        "key.usr" : "s:4Math16linearRegressionyS2fcSaySfG_ACtF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func slope(_ dictionary: [<Type usr=\"s:Sf\">Float<\/Type> : <Type usr=\"s:Sf\">Float<\/Type>]) -&gt; <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1673
          }
        ],
        "key.bodylength" : 68,
        "key.bodyoffset" : 1731,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Slope of the linear regression.",
        "key.doc.declaration" : "public func slope(_ dictionary: [Float : Float]) -> Float",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"53\" column=\"13\"><Name>slope(_:)<\/Name><USR>s:4Math5slopeySfSDyS2fGF<\/USR><Declaration>public func slope(_ dictionary: [Float : Float]) -&gt; Float<\/Declaration><CommentParts><ResultDiscussion><Para>Slope of the linear regression.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 53,
        "key.doc.name" : "slope(_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Slope of the linear regression."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 47,
        "key.docoffset" : 1626,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>slope<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dictionary<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sf\">Float<\/ref.struct> : <ref.struct usr=\"s:Sf\">Float<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 120,
        "key.name" : "slope(_:)",
        "key.namelength" : 35,
        "key.nameoffset" : 1685,
        "key.offset" : 1680,
        "key.parsed_declaration" : "public func slope(_ dictionary: [Float: Float]) -> Float",
        "key.parsed_scope.end" : 55,
        "key.parsed_scope.start" : 53,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math5slopeySfSaySfG_ACtF\">slope(_:_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "([Float : Float]) -> Float",
        "key.typeusr" : "$SySfSDyS2fGcD",
        "key.usr" : "s:4Math5slopeySfSDyS2fGF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func linearRegression(_ dictionary: [<Type usr=\"s:Sf\">Float<\/Type> : <Type usr=\"s:Sf\">Float<\/Type>]) -&gt; (<Type usr=\"s:Sf\">Float<\/Type>) -&gt; <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1899
          }
        ],
        "key.bodylength" : 79,
        "key.bodyoffset" : 1979,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Function that will calculate the y-value for the given x-value on the regression.",
        "key.doc.declaration" : "public func linearRegression(_ dictionary: [Float : Float]) -> (Float) -> Float",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift\" line=\"58\" column=\"13\"><Name>linearRegression(_:)<\/Name><USR>s:4Math16linearRegressionyS2fcSDyS2fGF<\/USR><Declaration>public func linearRegression(_ dictionary: [Float : Float]) -&gt; (Float) -&gt; Float<\/Declaration><CommentParts><ResultDiscussion><Para>Function that will calculate the y-value for the given x-value on the regression.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 58,
        "key.doc.name" : "linearRegression(_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Function that will calculate the y-value for the given x-value on the regression."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 97,
        "key.docoffset" : 1802,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/LinearRegression.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>linearRegression<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>dictionary<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.struct usr=\"s:Sf\">Float<\/ref.struct> : <ref.struct usr=\"s:Sf\">Float<\/ref.struct>]<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>(<decl.var.parameter><decl.var.parameter.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.function.returntype><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 153,
        "key.name" : "linearRegression(_:)",
        "key.namelength" : 46,
        "key.nameoffset" : 1911,
        "key.offset" : 1906,
        "key.parsed_declaration" : "public func linearRegression(_ dictionary: [Float: Float]) -> (Float) -> Float",
        "key.parsed_scope.end" : 60,
        "key.parsed_scope.start" : 58,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math16linearRegressionyS2fcSaySfG_ACtF\">linearRegression(_:_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "([Float : Float]) -> (Float) -> Float",
        "key.typeusr" : "$SyS2fcSDyS2fGcD",
        "key.usr" : "s:4Math16linearRegressionyS2fcSDyS2fGF"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1961,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func closestPowerOfTwo(to target: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 388
          }
        ],
        "key.bodylength" : 58,
        "key.bodyoffset" : 443,
        "key.doc.column" : 13,
        "key.doc.comment" : ">`closestPowerOfTwo(to: 13) -> 16`\n\n- note: If two values are equidistant from the target value, the lesser value is returned.\n\n>`closestPowerOfTwo(to: 12) -> 8 (not 16)`\n\n- returns: Power-of-two value closest to target value",
        "key.doc.declaration" : "public func closestPowerOfTwo(to target: Int) -> Int?",
        "key.doc.discussion" : [
          {
            "Para" : "`closestPowerOfTwo(to: 13) -> 16`"
          },
          {
            "Note" : ""
          },
          {
            "Para" : "`closestPowerOfTwo(to: 12) -> 8 (not 16)`"
          }
        ],
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift\" line=\"20\" column=\"13\"><Name>closestPowerOfTwo(to:)<\/Name><USR>s:4Math17closestPowerOfTwo2toSiSgSi_tF<\/USR><Declaration>public func closestPowerOfTwo(to target: Int) -&gt; Int?<\/Declaration><CommentParts><ResultDiscussion><Para>Power-of-two value closest to target value<\/Para><\/ResultDiscussion><Discussion><Para><codeVoice>closestPowerOfTwo(to: 13) -&gt; 16<\/codeVoice><\/Para><Note><Para>If two values are equidistant from the target value, the lesser value is returned.<\/Para><\/Note><Para><codeVoice>closestPowerOfTwo(to: 12) -&gt; 8 (not 16)<\/codeVoice><\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 20,
        "key.doc.name" : "closestPowerOfTwo(to:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Power-of-two value closest to target value"
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 237,
        "key.docoffset" : 150,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closestPowerOfTwo<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>target<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 107,
        "key.name" : "closestPowerOfTwo(to:)",
        "key.namelength" : 33,
        "key.nameoffset" : 400,
        "key.offset" : 395,
        "key.parsed_declaration" : "public func closestPowerOfTwo(to target: Int) -> Int?",
        "key.parsed_scope.end" : 22,
        "key.parsed_scope.start" : 20,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo5underSiSgSi_tF\">closestPowerOfTwo(under:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo11coefficient2toSiSgSi_SitF\">closestPowerOfTwo(coefficient:to:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo11coefficient5underSiSgSi_SitF\">closestPowerOfTwo(coefficient:under:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "(Int) -> Int?",
        "key.typeusr" : "$S2toSiSgSi_tcD",
        "key.usr" : "s:4Math17closestPowerOfTwo2toSiSgSi_tF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func closestPowerOfTwo(under target: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 581
          }
        ],
        "key.bodylength" : 61,
        "key.bodyoffset" : 639,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Power-of-two value closest to and less than target value",
        "key.doc.declaration" : "public func closestPowerOfTwo(under target: Int) -> Int?",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift\" line=\"27\" column=\"13\"><Name>closestPowerOfTwo(under:)<\/Name><USR>s:4Math17closestPowerOfTwo5underSiSgSi_tF<\/USR><Declaration>public func closestPowerOfTwo(under target: Int) -&gt; Int?<\/Declaration><CommentParts><ResultDiscussion><Para>Power-of-two value closest to and less than target value<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 27,
        "key.doc.name" : "closestPowerOfTwo(under:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Power-of-two value closest to and less than target value"
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 76,
        "key.docoffset" : 504,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closestPowerOfTwo<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>under<\/decl.var.parameter.argument_label> <decl.var.parameter.name>target<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 113,
        "key.name" : "closestPowerOfTwo(under:)",
        "key.namelength" : 36,
        "key.nameoffset" : 593,
        "key.offset" : 588,
        "key.parsed_declaration" : "public func closestPowerOfTwo(under target: Int) -> Int?",
        "key.parsed_scope.end" : 29,
        "key.parsed_scope.start" : 27,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo2toSiSgSi_tF\">closestPowerOfTwo(to:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo11coefficient2toSiSgSi_SitF\">closestPowerOfTwo(coefficient:to:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo11coefficient5underSiSgSi_SitF\">closestPowerOfTwo(coefficient:under:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [

        ],
        "key.typename" : "(Int) -> Int?",
        "key.typeusr" : "$S5underSiSgSi_tcD",
        "key.usr" : "s:4Math17closestPowerOfTwo5underSiSgSi_tF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func closestPowerOfTwo(coefficient: <Type usr=\"s:Si\">Int<\/Type>, to target: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1124
          }
        ],
        "key.bodylength" : 140,
        "key.bodyoffset" : 1197,
        "key.doc.column" : 13,
        "key.doc.comment" : ">`closestPowerOfTwo(coefficient: 3, to: 22) -> 24`\n\n- note: If two values are equidistant from the target value, the lesser value is returned.\n\n>`closestPowerOfTwo(coefficient: 3, to: 18) -> 12 (not 24)`\n\n- parameter coefficient: Coefficient of exponential expression\n- parameter target:      Value to check for closest power-of-two\n\n- returns: Power-of-two value (with coefficient) closest to target value",
        "key.doc.declaration" : "public func closestPowerOfTwo(coefficient: Int, to target: Int) -> Int?",
        "key.doc.discussion" : [
          {
            "Para" : "`closestPowerOfTwo(coefficient: 3, to: 22) -> 24`"
          },
          {
            "Note" : ""
          },
          {
            "Para" : "`closestPowerOfTwo(coefficient: 3, to: 18) -> 12 (not 24)`"
          }
        ],
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift\" line=\"43\" column=\"13\"><Name>closestPowerOfTwo(coefficient:to:)<\/Name><USR>s:4Math17closestPowerOfTwo11coefficient2toSiSgSi_SitF<\/USR><Declaration>public func closestPowerOfTwo(coefficient: Int, to target: Int) -&gt; Int?<\/Declaration><CommentParts><Parameters><Parameter><Name>coefficient<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Coefficient of exponential expression<\/Para><\/Discussion><\/Parameter><Parameter><Name>target<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Value to check for closest power-of-two<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Power-of-two value (with coefficient) closest to target value<\/Para><\/ResultDiscussion><Discussion><Para><codeVoice>closestPowerOfTwo(coefficient: 3, to: 22) -&gt; 24<\/codeVoice><\/Para><Note><Para>If two values are equidistant from the target value, the lesser value is returned.<\/Para><\/Note><Para><codeVoice>closestPowerOfTwo(coefficient: 3, to: 18) -&gt; 12 (not 24)<\/codeVoice><\/Para><\/Discussion><\/CommentParts><\/Function>",
        "key.doc.line" : 43,
        "key.doc.name" : "closestPowerOfTwo(coefficient:to:)",
        "key.doc.parameters" : [
          {
            "discussion" : [
              {
                "Para" : "Coefficient of exponential expression"
              }
            ],
            "name" : "coefficient"
          },
          {
            "discussion" : [
              {
                "Para" : "Value to check for closest power-of-two"
              }
            ],
            "name" : "target"
          }
        ],
        "key.doc.result_discussion" : [
          {
            "Para" : "Power-of-two value (with coefficient) closest to target value"
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 420,
        "key.docoffset" : 703,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closestPowerOfTwo<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>coefficient<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>target<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 207,
        "key.name" : "closestPowerOfTwo(coefficient:to:)",
        "key.namelength" : 51,
        "key.nameoffset" : 1136,
        "key.offset" : 1131,
        "key.parsed_declaration" : "public func closestPowerOfTwo(coefficient: Int, to target: Int) -> Int?",
        "key.parsed_scope.end" : 46,
        "key.parsed_scope.start" : 43,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo2toSiSgSi_tF\">closestPowerOfTwo(to:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo5underSiSgSi_tF\">closestPowerOfTwo(under:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo11coefficient5underSiSgSi_SitF\">closestPowerOfTwo(coefficient:under:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let sequence: <Type usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sequence<\/decl.name>: <decl.var.type><ref.class usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/ref.class>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 86,
            "key.name" : "sequence",
            "key.namelength" : 8,
            "key.nameoffset" : 1206,
            "key.offset" : 1202,
            "key.parsed_declaration" : "let sequence = PowerSequence(coefficient: coefficient, max: target, doOvershoot: true)",
            "key.parsed_scope.end" : 44,
            "key.parsed_scope.start" : 44,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8sequence5first4nexts14UnfoldSequenceVyxxSg_SbtGx_AFxctlF\">sequence(first:next:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8sequence5state4nexts14UnfoldSequenceVyxq_Gq__xSgq_zctr0_lF\">sequence(state:next:)<\/RelatedName>"
              }
            ],
            "key.typename" : "PowerSequence<Int>",
            "key.typeusr" : "$S4Math13PowerSequenceCySiGD",
            "key.usr" : "s:4Math17closestPowerOfTwo11coefficient2toSiSgSi_SitF8sequenceL_AA0C8SequenceCySiGvp"
          }
        ],
        "key.typename" : "(Int, Int) -> Int?",
        "key.typeusr" : "$S11coefficient2toSiSgSi_SitcD",
        "key.usr" : "s:4Math17closestPowerOfTwo11coefficient2toSiSgSi_SitF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func closestPowerOfTwo(coefficient: <Type usr=\"s:Si\">Int<\/Type>, under target: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1425
          }
        ],
        "key.bodylength" : 141,
        "key.bodyoffset" : 1501,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: Power-of-two (with coefficient) closest to and less than target value",
        "key.doc.declaration" : "public func closestPowerOfTwo(coefficient: Int, under target: Int) -> Int?",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift\" line=\"49\" column=\"13\"><Name>closestPowerOfTwo(coefficient:under:)<\/Name><USR>s:4Math17closestPowerOfTwo11coefficient5underSiSgSi_SitF<\/USR><Declaration>public func closestPowerOfTwo(coefficient: Int, under target: Int) -&gt; Int?<\/Declaration><CommentParts><ResultDiscussion><Para>Power-of-two (with coefficient) closest to and less than target value<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 49,
        "key.doc.name" : "closestPowerOfTwo(coefficient:under:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Power-of-two (with coefficient) closest to and less than target value"
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 85,
        "key.docoffset" : 1340,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closestPowerOfTwo<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>coefficient<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>under<\/decl.var.parameter.argument_label> <decl.var.parameter.name>target<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 211,
        "key.name" : "closestPowerOfTwo(coefficient:under:)",
        "key.namelength" : 54,
        "key.nameoffset" : 1437,
        "key.offset" : 1432,
        "key.parsed_declaration" : "public func closestPowerOfTwo(coefficient: Int, under target: Int) -> Int?",
        "key.parsed_scope.end" : 52,
        "key.parsed_scope.start" : 49,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo2toSiSgSi_tF\">closestPowerOfTwo(to:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo5underSiSgSi_tF\">closestPowerOfTwo(under:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math17closestPowerOfTwo11coefficient2toSiSgSi_SitF\">closestPowerOfTwo(coefficient:to:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let sequence: <Type usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sequence<\/decl.name>: <decl.var.type><ref.class usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/ref.class>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 87,
            "key.name" : "sequence",
            "key.namelength" : 8,
            "key.nameoffset" : 1510,
            "key.offset" : 1506,
            "key.parsed_declaration" : "let sequence = PowerSequence(coefficient: coefficient, max: target, doOvershoot: false)",
            "key.parsed_scope.end" : 50,
            "key.parsed_scope.start" : 50,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8sequence5first4nexts14UnfoldSequenceVyxxSg_SbtGx_AFxctlF\">sequence(first:next:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8sequence5state4nexts14UnfoldSequenceVyxq_Gq__xSgq_zctr0_lF\">sequence(state:next:)<\/RelatedName>"
              }
            ],
            "key.typename" : "PowerSequence<Int>",
            "key.typeusr" : "$S4Math13PowerSequenceCySiGD",
            "key.usr" : "s:4Math17closestPowerOfTwo11coefficient5underSiSgSi_SitF8sequenceL_AA0C8SequenceCySiGvp"
          }
        ],
        "key.typename" : "(Int, Int) -> Int?",
        "key.typeusr" : "$S11coefficient5underSiSgSi_SitcD",
        "key.usr" : "s:4Math17closestPowerOfTwo11coefficient5underSiSgSi_SitF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.private",
        "key.annotated_decl" : "<Declaration>private func closer(to sequence: <Type usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/Type>&lt;<Type usr=\"s:Si\">Int<\/Type>&gt;, target: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type>?<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.private",
            "key.length" : 7,
            "key.offset" : 1645
          }
        ],
        "key.bodylength" : 239,
        "key.bodyoffset" : 1720,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>closer<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sequence<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/ref.class>&lt;<ref.struct usr=\"s:Si\">Int<\/ref.struct>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>target<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct>?<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 307,
        "key.name" : "closer(to:target:)",
        "key.namelength" : 52,
        "key.nameoffset" : 1658,
        "key.offset" : 1653,
        "key.parsed_declaration" : "private func closer(to sequence: PowerSequence<Int>, target: Int) -> Int?",
        "key.parsed_scope.end" : 59,
        "key.parsed_scope.start" : 54,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:4Math6closer2to1a1bxx_xxtSLRzs13SignedNumericRzlF\">closer(to:a:b:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>let powers: [<Type usr=\"s:Si\">Int<\/Type>]<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Power.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>powers<\/decl.name>: <decl.var.type>[<ref.struct usr=\"s:Si\">Int<\/ref.struct>]<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 28,
            "key.name" : "powers",
            "key.namelength" : 6,
            "key.nameoffset" : 1729,
            "key.offset" : 1725,
            "key.parsed_declaration" : "let powers = Array(sequence)",
            "key.parsed_scope.end" : 55,
            "key.parsed_scope.start" : 55,
            "key.typename" : "[Int]",
            "key.typeusr" : "$SSaySiGD",
            "key.usr" : "s:4Math6closer33_4A5B740F1D8550CD3020942CA71B56A0LL2to6targetSiSgAA13PowerSequenceCySiG_SitF6powersL_SaySiGvp"
          }
        ],
        "key.typename" : "(PowerSequence<Int>, Int) -> Int?",
        "key.typeusr" : "$S2to6targetSiSg4Math13PowerSequenceCySiG_SitcD",
        "key.usr" : "s:4Math6closer33_4A5B740F1D8550CD3020942CA71B56A0LL2to6targetSiSgAA13PowerSequenceCySiG_SitF"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1740,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public class PowerGenerator&lt;T&gt; : <Type usr=\"s:St\">IteratorProtocol<\/Type> where T : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 163
          }
        ],
        "key.bodylength" : 1505,
        "key.bodyoffset" : 233,
        "key.doc.column" : 14,
        "key.doc.comment" : "Power-of-two Generator",
        "key.doc.declaration" : "public class PowerGenerator<T> : IteratorProtocol where T : FixedWidthInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift\" line=\"10\" column=\"14\"><Name>PowerGenerator<\/Name><USR>s:4Math14PowerGeneratorC<\/USR><Declaration>public class PowerGenerator&lt;T&gt; : IteratorProtocol where T : FixedWidthInteger<\/Declaration><CommentParts><Abstract><Para>Power-of-two Generator<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 10,
        "key.doc.name" : "PowerGenerator",
        "key.doc.type" : "Class",
        "key.doclength" : 27,
        "key.docoffset" : 136,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 16,
            "key.offset" : 215
          }
        ],
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>PowerGenerator<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:St\">IteratorProtocol<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "IteratorProtocol"
          }
        ],
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 1569,
        "key.name" : "PowerGenerator",
        "key.namelength" : 14,
        "key.nameoffset" : 176,
        "key.offset" : 170,
        "key.parsed_declaration" : "public class PowerGenerator <T: FixedWidthInteger>: IteratorProtocol",
        "key.parsed_scope.end" : 60,
        "key.parsed_scope.start" : 10,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 17,
                "key.offset" : 195
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FixedWidthInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 20,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 192,
            "key.offset" : 192,
            "key.parsed_declaration" : "public class PowerGenerator <T: FixedWidthInteger>: IteratorProtocol",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 10,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math14PowerGeneratorC1Txmfp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 24,
            "key.name" : "MARK: - Associated Types",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 242
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:4Math14PowerGeneratorC\">PowerGenerator<\/Type>&lt;T&gt;.Element = <Type usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 331
              }
            ],
            "key.doc.column" : 22,
            "key.doc.comment" : "This GeneratorType generates ArithmeticType values",
            "key.doc.declaration" : "public typealias Math.PowerGenerator<T>.Element = T",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift\" line=\"15\" column=\"22\"><Name>Element<\/Name><USR>s:4Math14PowerGeneratorC7Elementa<\/USR><Declaration>public typealias Math.PowerGenerator&lt;T&gt;.Element = T<\/Declaration><CommentParts><Abstract><Para>This GeneratorType generates ArithmeticType values<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 15,
            "key.doc.name" : "Element",
            "key.doc.type" : "Other",
            "key.doclength" : 55,
            "key.docoffset" : 272,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:4Math14PowerGeneratorC\">PowerGenerator<\/ref.class>&lt;T&gt;.<decl.name>Element<\/decl.name> = <ref.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/ref.generic_type_param><\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 21,
            "key.name" : "Element",
            "key.namelength" : 7,
            "key.nameoffset" : 348,
            "key.offset" : 338,
            "key.overrides" : [
              {
                "key.usr" : "s:St7ElementQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Element = T",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 15,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math14PowerGeneratorC7Elementa"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 27,
            "key.name" : "MARK: - Instance Properties",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 368
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private var hasOvershot: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 401
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>hasOvershot<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 29,
            "key.name" : "hasOvershot",
            "key.namelength" : 11,
            "key.nameoffset" : 413,
            "key.offset" : 409,
            "key.parsed_declaration" : "private var hasOvershot: Bool = false",
            "key.parsed_scope.end" : 19,
            "key.parsed_scope.start" : 19,
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:4Math14PowerGeneratorC11hasOvershot33_374C88DA6355D7ACB1E2F340896C5CCBLLSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private var power: <Type usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 443
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>power<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 12,
            "key.name" : "power",
            "key.namelength" : 5,
            "key.nameoffset" : 455,
            "key.offset" : 451,
            "key.parsed_declaration" : "private var power: T",
            "key.parsed_scope.end" : 20,
            "key.parsed_scope.start" : 20,
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math14PowerGeneratorC5power33_374C88DA6355D7ACB1E2F340896C5CCBLLxvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let doOvershoot: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>doOvershoot<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 21,
            "key.name" : "doOvershoot",
            "key.namelength" : 11,
            "key.nameoffset" : 473,
            "key.offset" : 469,
            "key.parsed_declaration" : "let doOvershoot: Bool",
            "key.parsed_scope.end" : 22,
            "key.parsed_scope.start" : 22,
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:4Math14PowerGeneratorC11doOvershootSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let coefficient: <Type usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>coefficient<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 18,
            "key.name" : "coefficient",
            "key.namelength" : 11,
            "key.nameoffset" : 499,
            "key.offset" : 495,
            "key.parsed_declaration" : "let coefficient: T",
            "key.parsed_scope.end" : 23,
            "key.parsed_scope.start" : 23,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math14PowerGeneratorC11coefficientxvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let max: <Type usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>max<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 10,
            "key.name" : "max",
            "key.namelength" : 3,
            "key.nameoffset" : 522,
            "key.offset" : 518,
            "key.parsed_declaration" : "let max: T",
            "key.parsed_scope.end" : 24,
            "key.parsed_scope.start" : 24,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math14PowerGeneratorC3maxxvp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 20,
            "key.name" : "MARK: - Initializers",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 537
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(coefficient: <Type usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/Type>, max: <Type usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/Type> = default, doOvershoot: <Type usr=\"s:Sb\">Bool<\/Type> = default)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 926
              }
            ],
            "key.bodylength" : 139,
            "key.bodyoffset" : 998,
            "key.doc.column" : 12,
            "key.doc.comment" : "Create a PowerGenerator.\n\n- Parameter coefficient: Coefficient that multiplies base of exponential expression\n- Parameter max:         Maximum value of generated powers-of-two\n- Parameter doOvershoot: If generator includes the next power-of-two greater than max\n\n- Returns: Initialized PowerGenerator",
            "key.doc.declaration" : "public init(coefficient: T, max: T = default, doOvershoot: Bool = default)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift\" line=\"36\" column=\"12\"><Name>init(coefficient:max:doOvershoot:)<\/Name><USR>s:4Math14PowerGeneratorC11coefficient3max11doOvershootACyxGx_xSbtcfc<\/USR><Declaration>public init(coefficient: T, max: T = default, doOvershoot: Bool = default)<\/Declaration><CommentParts><Abstract><Para>Create a PowerGenerator.<\/Para><\/Abstract><Parameters><Parameter><Name>coefficient<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Coefficient that multiplies base of exponential expression<\/Para><\/Discussion><\/Parameter><Parameter><Name>max<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Maximum value of generated powers-of-two<\/Para><\/Discussion><\/Parameter><Parameter><Name>doOvershoot<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>If generator includes the next power-of-two greater than max<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Initialized PowerGenerator<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 36,
            "key.doc.name" : "init(coefficient:max:doOvershoot:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Coefficient that multiplies base of exponential expression"
                  }
                ],
                "name" : "coefficient"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Maximum value of generated powers-of-two"
                  }
                ],
                "name" : "max"
              },
              {
                "discussion" : [
                  {
                    "Para" : "If generator includes the next power-of-two greater than max"
                  }
                ],
                "name" : "doOvershoot"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "Initialized PowerGenerator"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 359,
            "key.docoffset" : 563,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>coefficient<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>max<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math14PowerGeneratorC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>doOvershoot<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 205,
            "key.name" : "init(coefficient:max:doOvershoot:)",
            "key.namelength" : 63,
            "key.nameoffset" : 933,
            "key.offset" : 933,
            "key.parsed_declaration" : "public init(coefficient: T, max: T = T.max, doOvershoot: Bool = false)",
            "key.parsed_scope.end" : 41,
            "key.parsed_scope.start" : 36,
            "key.substructure" : [

            ],
            "key.typename" : "<T where T : FixedWidthInteger> (PowerGenerator<T>.Type) -> (T, T, Bool) -> PowerGenerator<T>",
            "key.typeusr" : "$S11coefficient3max11doOvershoot4Math14PowerGeneratorCyxGx_xSbtcD",
            "key.usr" : "s:4Math14PowerGeneratorC11coefficient3max11doOvershootACyxGx_xSbtcfc"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 24,
            "key.name" : "MARK: - Instance Methods",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1147
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func next() -&gt; <Type usr=\"s:4Math14PowerGeneratorC7Elementa\">Element<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1262
              }
            ],
            "key.bodylength" : 442,
            "key.bodyoffset" : 1294,
            "key.doc.column" : 17,
            "key.doc.comment" : "Advance to the next element and return it, or nil if no next element exists.",
            "key.doc.declaration" : "public func next() -> Element?",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift\" line=\"46\" column=\"17\"><Name>next()<\/Name><USR>s:4Math14PowerGeneratorC4nextxSgyF<\/USR><Declaration>public func next() -&gt; Element?<\/Declaration><CommentParts><Abstract><Para>Advance to the next element and return it, or nil if no next element exists.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 46,
            "key.doc.name" : "next()",
            "key.doc.type" : "Function",
            "key.doclength" : 81,
            "key.docoffset" : 1177,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>next<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:4Math14PowerGeneratorC7Elementa\">Element<\/ref.typealias>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 468,
            "key.name" : "next()",
            "key.namelength" : 6,
            "key.nameoffset" : 1274,
            "key.offset" : 1269,
            "key.overrides" : [
              {
                "key.usr" : "s:St4next7ElementQzSgyF"
              }
            ],
            "key.parsed_declaration" : "public func next() -> Element?",
            "key.parsed_scope.end" : 59,
            "key.parsed_scope.start" : 46,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let result: T<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 18,
                "key.name" : "result",
                "key.namelength" : 6,
                "key.nameoffset" : 1491,
                "key.offset" : 1487,
                "key.parsed_declaration" : "let result = power",
                "key.parsed_scope.end" : 54,
                "key.parsed_scope.start" : 54,
                "key.typename" : "T",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math14PowerGeneratorC4nextxSgyF6resultL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let maybeOverflowingPower: T<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>maybeOverflowingPower<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 83,
                "key.name" : "maybeOverflowingPower",
                "key.namelength" : 21,
                "key.nameoffset" : 1519,
                "key.offset" : 1514,
                "key.parsed_declaration" : "let (maybeOverflowingPower, didOverflow) = power.multipliedReportingOverflow(by: 2)",
                "key.parsed_scope.end" : 55,
                "key.parsed_scope.start" : 55,
                "key.typename" : "T",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math14PowerGeneratorC4nextxSgyF016maybeOverflowingB0L_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let didOverflow: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerGenerator.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>didOverflow<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 83,
                "key.name" : "didOverflow",
                "key.namelength" : 11,
                "key.nameoffset" : 1542,
                "key.offset" : 1514,
                "key.parsed_declaration" : "let (maybeOverflowingPower, didOverflow) = power.multipliedReportingOverflow(by: 2)",
                "key.parsed_scope.end" : 55,
                "key.parsed_scope.start" : 55,
                "key.typename" : "Bool",
                "key.typeusr" : "$SSbD",
                "key.usr" : "s:4Math14PowerGeneratorC4nextxSgyF11didOverflowL_Sbvp"
              }
            ],
            "key.typename" : "<T where T : FixedWidthInteger> (PowerGenerator<T>) -> () -> T?",
            "key.typeusr" : "$SxSgycD",
            "key.usr" : "s:4Math14PowerGeneratorC4nextxSgyF"
          }
        ],
        "key.typename" : "PowerGenerator<T>.Type",
        "key.typeusr" : "$S4Math14PowerGeneratorCyxGmD",
        "key.usr" : "s:4Math14PowerGeneratorC"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1299,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public class PowerSequence&lt;T&gt; : <Type usr=\"s:ST\">Sequence<\/Type> where T : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 162
          }
        ],
        "key.bodylength" : 1075,
        "key.bodyoffset" : 222,
        "key.doc.column" : 14,
        "key.doc.comment" : "Power-of-two Sequence.",
        "key.doc.declaration" : "public class PowerSequence<T> : Sequence where T : FixedWidthInteger",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift\" line=\"10\" column=\"14\"><Name>PowerSequence<\/Name><USR>s:4Math13PowerSequenceC<\/USR><Declaration>public class PowerSequence&lt;T&gt; : Sequence where T : FixedWidthInteger<\/Declaration><CommentParts><Abstract><Para>Power-of-two Sequence.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 10,
        "key.doc.name" : "PowerSequence",
        "key.doc.type" : "Class",
        "key.doclength" : 27,
        "key.docoffset" : 135,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 8,
            "key.offset" : 212
          }
        ],
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>PowerSequence<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math13PowerSequenceC1Txmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Sequence"
          }
        ],
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 1129,
        "key.name" : "PowerSequence",
        "key.namelength" : 13,
        "key.nameoffset" : 175,
        "key.offset" : 169,
        "key.parsed_declaration" : "public class PowerSequence<T: FixedWidthInteger>: Sequence",
        "key.parsed_scope.end" : 46,
        "key.parsed_scope.start" : 10,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 17,
                "key.offset" : 192
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FixedWidthInteger"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 20,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 189,
            "key.offset" : 189,
            "key.parsed_declaration" : "public class PowerSequence<T: FixedWidthInteger>: Sequence",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 10,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math13PowerSequenceC1Txmfp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 24,
            "key.name" : "MARK: - Associated Types",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 231
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias <Type usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/Type>&lt;T&gt;.Iterator = <Type usr=\"s:4Math14PowerGeneratorC\">PowerGenerator<\/Type>&lt;<Type usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 317
              }
            ],
            "key.doc.column" : 22,
            "key.doc.comment" : "PowerGenerator generates ArithmeticType values.",
            "key.doc.declaration" : "public typealias Math.PowerSequence<T>.Iterator = PowerGenerator<T>",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift\" line=\"15\" column=\"22\"><Name>Iterator<\/Name><USR>s:4Math13PowerSequenceC8Iteratora<\/USR><Declaration>public typealias Math.PowerSequence&lt;T&gt;.Iterator = PowerGenerator&lt;T&gt;<\/Declaration><CommentParts><Abstract><Para>PowerGenerator generates ArithmeticType values.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 15,
            "key.doc.name" : "Iterator",
            "key.doc.type" : "Other",
            "key.doclength" : 52,
            "key.docoffset" : 261,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <ref.class usr=\"s:4Math13PowerSequenceC\">PowerSequence<\/ref.class>&lt;T&gt;.<decl.name>Iterator<\/decl.name> = <ref.class usr=\"s:4Math14PowerGeneratorC\">PowerGenerator<\/ref.class>&lt;<ref.generic_type_param usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/ref.generic_type_param>&gt;<\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 38,
            "key.name" : "Iterator",
            "key.namelength" : 8,
            "key.nameoffset" : 334,
            "key.offset" : 324,
            "key.overrides" : [
              {
                "key.usr" : "s:ST8IteratorQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Iterator = PowerGenerator<T>",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 15,
            "key.typename" : "PowerGenerator<T>.Type",
            "key.typeusr" : "$S4Math14PowerGeneratorCyxGmD",
            "key.usr" : "s:4Math13PowerSequenceC8Iteratora"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 27,
            "key.name" : "MARK: - Instance Properties",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 371
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let doOvershoot: <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>doOvershoot<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 21,
            "key.name" : "doOvershoot",
            "key.namelength" : 11,
            "key.nameoffset" : 408,
            "key.offset" : 404,
            "key.parsed_declaration" : "let doOvershoot: Bool",
            "key.parsed_scope.end" : 19,
            "key.parsed_scope.start" : 19,
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:4Math13PowerSequenceC11doOvershootSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let coefficient: <Type usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>coefficient<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 18,
            "key.name" : "coefficient",
            "key.namelength" : 11,
            "key.nameoffset" : 434,
            "key.offset" : 430,
            "key.parsed_declaration" : "let coefficient: T",
            "key.parsed_scope.end" : 20,
            "key.parsed_scope.start" : 20,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math13PowerSequenceC11coefficientxvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let max: <Type usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>max<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 10,
            "key.name" : "max",
            "key.namelength" : 3,
            "key.nameoffset" : 457,
            "key.offset" : 453,
            "key.parsed_declaration" : "let max: T",
            "key.parsed_scope.end" : 21,
            "key.parsed_scope.start" : 21,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math13PowerSequenceC3maxxvp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 20,
            "key.name" : "MARK: - Initializers",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 472
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(coefficient: <Type usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/Type> = default, max: <Type usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/Type> = default, doOvershoot: <Type usr=\"s:Sb\">Bool<\/Type> = default)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 850
              }
            ],
            "key.bodylength" : 106,
            "key.bodyoffset" : 926,
            "key.doc.column" : 12,
            "key.doc.comment" : "Create a PowerSequence.\n\n- Parameter coefficient: Coefficient that multiplies base of exponential expression\n- Parameter max:         Maximum value of generated powers-of-two\n- Parameter doOvershoot: If sequence includes the next power-of-two greater than max\n\n- Returns: Initialized PowerSequence",
            "key.doc.declaration" : "public init(coefficient: T = default, max: T = default, doOvershoot: Bool = default)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift\" line=\"32\" column=\"12\"><Name>init(coefficient:max:doOvershoot:)<\/Name><USR>s:4Math13PowerSequenceC11coefficient3max11doOvershootACyxGx_xSbtcfc<\/USR><Declaration>public init(coefficient: T = default, max: T = default, doOvershoot: Bool = default)<\/Declaration><CommentParts><Abstract><Para>Create a PowerSequence.<\/Para><\/Abstract><Parameters><Parameter><Name>coefficient<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Coefficient that multiplies base of exponential expression<\/Para><\/Discussion><\/Parameter><Parameter><Name>max<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>Maximum value of generated powers-of-two<\/Para><\/Discussion><\/Parameter><Parameter><Name>doOvershoot<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>If sequence includes the next power-of-two greater than max<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>Initialized PowerSequence<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 32,
            "key.doc.name" : "init(coefficient:max:doOvershoot:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "Coefficient that multiplies base of exponential expression"
                  }
                ],
                "name" : "coefficient"
              },
              {
                "discussion" : [
                  {
                    "Para" : "Maximum value of generated powers-of-two"
                  }
                ],
                "name" : "max"
              },
              {
                "discussion" : [
                  {
                    "Para" : "If sequence includes the next power-of-two greater than max"
                  }
                ],
                "name" : "doOvershoot"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "Initialized PowerSequence"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 348,
            "key.docoffset" : 498,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>coefficient<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>max<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math13PowerSequenceC1Txmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>doOvershoot<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 176,
            "key.name" : "init(coefficient:max:doOvershoot:)",
            "key.namelength" : 67,
            "key.nameoffset" : 857,
            "key.offset" : 857,
            "key.parsed_declaration" : "public init(coefficient: T = 2, max: T = T.max, doOvershoot: Bool = false)",
            "key.parsed_scope.end" : 36,
            "key.parsed_scope.start" : 32,
            "key.substructure" : [

            ],
            "key.typename" : "<T where T : FixedWidthInteger> (PowerSequence<T>.Type) -> (T, T, Bool) -> PowerSequence<T>",
            "key.typeusr" : "$S11coefficient3max11doOvershoot4Math13PowerSequenceCyxGx_xSbtcD",
            "key.usr" : "s:4Math13PowerSequenceC11coefficient3max11doOvershootACyxGx_xSbtcfc"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 24,
            "key.name" : "MARK: - Instance Methods",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1042
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func makeIterator() -&gt; <Type usr=\"s:4Math13PowerSequenceC8Iteratora\">Iterator<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1158
              }
            ],
            "key.bodylength" : 97,
            "key.bodyoffset" : 1198,
            "key.doc.column" : 17,
            "key.doc.comment" : "Generate sequence of powers-of-two.\n\n- Returns: PowerGenerator",
            "key.doc.declaration" : "public func makeIterator() -> Iterator",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift\" line=\"43\" column=\"17\"><Name>makeIterator()<\/Name><USR>s:4Math13PowerSequenceC12makeIteratorAA0B9GeneratorCyxGyF<\/USR><Declaration>public func makeIterator() -&gt; Iterator<\/Declaration><CommentParts><Abstract><Para>Generate sequence of powers-of-two.<\/Para><\/Abstract><ResultDiscussion><Para>PowerGenerator<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 43,
            "key.doc.name" : "makeIterator()",
            "key.doc.result_discussion" : [
              {
                "Para" : "PowerGenerator"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 82,
            "key.docoffset" : 1072,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/PowerSequence.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>makeIterator<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:4Math13PowerSequenceC8Iteratora\">Iterator<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 131,
            "key.name" : "makeIterator()",
            "key.namelength" : 14,
            "key.nameoffset" : 1170,
            "key.offset" : 1165,
            "key.overrides" : [
              {
                "key.usr" : "s:ST12makeIterator0B0QzyF"
              }
            ],
            "key.parsed_declaration" : "public func makeIterator() -> Iterator",
            "key.parsed_scope.end" : 45,
            "key.parsed_scope.start" : 43,
            "key.substructure" : [

            ],
            "key.typename" : "<T where T : FixedWidthInteger> (PowerSequence<T>) -> () -> PowerGenerator<T>",
            "key.typeusr" : "$S4Math14PowerGeneratorCyxGycD",
            "key.usr" : "s:4Math13PowerSequenceC12makeIteratorAA0B9GeneratorCyxGyF"
          }
        ],
        "key.typename" : "PowerSequence<T>.Type",
        "key.typeusr" : "$S4Math13PowerSequenceCyxGmD",
        "key.usr" : "s:4Math13PowerSequenceC"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 528,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func quadratic&lt;T&gt;(_ a: <Type usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/Type>, _ c: <Type usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:Sh\">Set<\/Type>&lt;<Type usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/Type>&gt; where T : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 147
          }
        ],
        "key.bodylength" : 302,
        "key.bodyoffset" : 224,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>quadratic<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>c<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sh\">Set<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp\">T<\/ref.generic_type_param>&gt;<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 373,
        "key.name" : "quadratic(_:_:_:)",
        "key.namelength" : 53,
        "key.nameoffset" : 159,
        "key.offset" : 154,
        "key.parsed_declaration" : "public func quadratic <T: FloatingPoint> (_ a: T, _ b: T, _ c: T) -> Set<T>",
        "key.parsed_scope.end" : 25,
        "key.parsed_scope.start" : 11,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T : <Type usr=\"s:SF\">FloatingPoint<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 13,
                "key.offset" : 173
              }
            ],
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SF\">FloatingPoint<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "FloatingPoint"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 16,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 170,
            "key.offset" : 170,
            "key.parsed_declaration" : "public func quadratic <T: FloatingPoint> (_ a: T, _ b: T, _ c: T) -> Set<T>",
            "key.parsed_scope.end" : 11,
            "key.parsed_scope.start" : 11,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:4Math9quadraticyShyxGx_xxtSFRzlF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>let discriminant: T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>discriminant<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 36,
            "key.name" : "discriminant",
            "key.namelength" : 12,
            "key.nameoffset" : 238,
            "key.offset" : 234,
            "key.parsed_declaration" : "let discriminant = b * b - 4 * a * c",
            "key.parsed_scope.end" : 13,
            "key.parsed_scope.start" : 13,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math9quadraticyShyxGx_xxtSFRzlF12discriminantL_xvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let denominator: T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>denominator<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 23,
            "key.name" : "denominator",
            "key.namelength" : 11,
            "key.nameoffset" : 353,
            "key.offset" : 349,
            "key.parsed_declaration" : "let denominator = 2 * a",
            "key.parsed_scope.end" : 19,
            "key.parsed_scope.start" : 19,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math9quadraticyShyxGx_xxtSFRzlF11denominatorL_xvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let pos: T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>pos<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 52,
            "key.name" : "pos",
            "key.namelength" : 3,
            "key.nameoffset" : 386,
            "key.offset" : 382,
            "key.parsed_declaration" : "let pos: T = (-b + sqrt(discriminant)) \/ denominator",
            "key.parsed_scope.end" : 21,
            "key.parsed_scope.start" : 21,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math9quadraticyShyxGx_xxtSFRzlF3posL_xvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let neg: T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Quadratic.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>neg<\/decl.name>: <decl.var.type>T<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 52,
            "key.name" : "neg",
            "key.namelength" : 3,
            "key.nameoffset" : 443,
            "key.offset" : 439,
            "key.parsed_declaration" : "let neg: T = (-b - sqrt(discriminant)) \/ denominator",
            "key.parsed_scope.end" : 22,
            "key.parsed_scope.start" : 22,
            "key.typename" : "T",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math9quadraticyShyxGx_xxtSFRzlF3negL_xvp"
          }
        ],
        "key.typename" : "<T where T : FloatingPoint> (T, T, T) -> Set<T>",
        "key.typeusr" : "$SyShyxGx_xxtcSFRzluD",
        "key.usr" : "s:4Math9quadraticyShyxGx_xxtSFRzlF"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1033,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol RandomProducing<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 153
          }
        ],
        "key.bodylength" : 85,
        "key.bodyoffset" : 186,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>RandomProducing<\/decl.name><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 112,
        "key.name" : "RandomProducing",
        "key.namelength" : 15,
        "key.nameoffset" : 169,
        "key.offset" : 160,
        "key.parsed_declaration" : "public protocol RandomProducing",
        "key.parsed_scope.end" : 16,
        "key.parsed_scope.start" : 11,
        "key.runtime_name" : "_TtP15RandomProducing15RandomProducing_",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>static func random(min: <Type usr=\"s:4Math15RandomProducingP4Selfxmfp\">Self<\/Type>, max: <Type usr=\"s:4Math15RandomProducingP4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math15RandomProducingP4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>random<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>min<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math15RandomProducingP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>max<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math15RandomProducingP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math15RandomProducingP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 48,
            "key.name" : "random(min:max:)",
            "key.namelength" : 28,
            "key.nameoffset" : 204,
            "key.offset" : 192,
            "key.parsed_declaration" : "static func random(min: Self, max: Self) -> Self",
            "key.parsed_scope.end" : 13,
            "key.parsed_scope.start" : 13,
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : RandomProducing> (Self.Type) -> (Self, Self) -> Self",
            "key.typeusr" : "$S3min3maxxx_xtcD",
            "key.usr" : "s:4Math15RandomProducingP6random3min3maxxx_xtFZ"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 21,
            "key.name" : "TODO: Gaussian random",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 249
          }
        ],
        "key.typename" : "RandomProducing.Protocol",
        "key.typeusr" : "$S4Math15RandomProducing_pmD",
        "key.usr" : "s:4Math15RandomProducingP"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Int : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type><\/Declaration>",
        "key.bodylength" : 208,
        "key.bodyoffset" : 306,
        "key.doc.declaration" : "struct Int : FixedWidthInteger, SignedInteger",
        "key.doc.discussion" : [
          {
            "Para" : "On 32-bit platforms, `Int` is the same size as `Int32`, and on 64-bit platforms, `Int` is the same size as `Int64`."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Int<\/Name><USR>s:Si<\/USR><Declaration>struct Int : FixedWidthInteger, SignedInteger<\/Declaration><CommentParts><Abstract><Para>A signed integer value type.<\/Para><\/Abstract><Discussion><Para>On 32-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int32<\/codeVoice>, and on 64-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int64<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Int",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 15,
            "key.offset" : 289
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.inheritedtypes" : [
          {
            "key.name" : "RandomProducing"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 241,
        "key.modulename" : "Swift",
        "key.name" : "Int",
        "key.namelength" : 3,
        "key.nameoffset" : 284,
        "key.offset" : 274,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func random(min: <Type usr=\"s:Si\">Int<\/Type> = default, max: <Type usr=\"s:Si\">Int<\/Type> = default) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 312
              }
            ],
            "key.bodylength" : 138,
            "key.bodyoffset" : 374,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>random<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>min<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>max<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 194,
            "key.name" : "random(min:max:)",
            "key.namelength" : 34,
            "key.nameoffset" : 331,
            "key.offset" : 319,
            "key.overrides" : [
              {
                "key.usr" : "s:4Math15RandomProducingP6random3min3maxxx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func random(min: Int = 0, max: Int = 1) -> Int",
            "key.parsed_scope.end" : 24,
            "key.parsed_scope.start" : 20,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let min: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>min<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Integers",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "min",
                "key.namelength" : 3,
                "key.nameoffset" : 388,
                "key.offset" : 383,
                "key.parsed_declaration" : "let (min, max) = ordered(min, max)",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3minyxx_xtSLRzlF\">min(_:_:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3minyxx_xxxdtSLRzlF\">min(_:_:_:_:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:Si4MathE6random3min3maxS2i_SitFZACL0_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>let max: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>max<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Integers",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "max",
                "key.namelength" : 3,
                "key.nameoffset" : 393,
                "key.offset" : 383,
                "key.parsed_declaration" : "let (min, max) = ordered(min, max)",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3maxyxx_xtSLRzlF\">max(_:_:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3maxyxx_xxxdtSLRzlF\">max(_:_:_:_:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:Si4MathE6random3min3maxS2i_SitFZADL0_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>let range: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>range<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Integers",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 21,
                "key.name" : "range",
                "key.namelength" : 5,
                "key.nameoffset" : 430,
                "key.offset" : 426,
                "key.parsed_declaration" : "let range = max - min",
                "key.parsed_scope.end" : 22,
                "key.parsed_scope.start" : 22,
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:Si4MathE6random3min3maxS2i_SitFZ5rangeL_Sivp"
              }
            ],
            "key.typename" : "(Int.Type) -> (Int, Int) -> Int",
            "key.typeusr" : "$S3min3maxS2i_SitcD",
            "key.usr" : "s:Si4MathE6random3min3maxS2i_SitFZ"
          }
        ],
        "key.typename" : "Int.Type",
        "key.typeusr" : "$SSimD",
        "key.usr" : "s:Si"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Float<\/Declaration>",
        "key.bodylength" : 220,
        "key.bodyoffset" : 551,
        "key.doc.declaration" : "struct Float",
        "key.doc.full_as_xml" : "<Class><Name>Float<\/Name><USR>s:Sf<\/USR><Declaration>struct Float<\/Declaration><CommentParts><Abstract><Para>A single-precision, floating-point value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Float",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 15,
            "key.offset" : 534
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Float<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.inheritedtypes" : [
          {
            "key.name" : "RandomProducing"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 255,
        "key.modulename" : "Swift",
        "key.name" : "Float",
        "key.namelength" : 5,
        "key.nameoffset" : 527,
        "key.offset" : 517,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func random(min: <Type usr=\"s:Sf\">Float<\/Type> = default, max: <Type usr=\"s:Sf\">Float<\/Type> = default) -&gt; <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 557
              }
            ],
            "key.bodylength" : 140,
            "key.bodyoffset" : 629,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>random<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>min<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>max<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 206,
            "key.name" : "random(min:max:)",
            "key.namelength" : 42,
            "key.nameoffset" : 576,
            "key.offset" : 564,
            "key.overrides" : [
              {
                "key.usr" : "s:4Math15RandomProducingP6random3min3maxxx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func random(min: Float = 0.0, max: Float = 1.0) -> Float",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 29,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let min: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>min<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "min",
                "key.namelength" : 3,
                "key.nameoffset" : 643,
                "key.offset" : 638,
                "key.parsed_declaration" : "let (min, max) = ordered(min, max)",
                "key.parsed_scope.end" : 30,
                "key.parsed_scope.start" : 30,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3minyxx_xtSLRzlF\">min(_:_:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3minyxx_xxxdtSLRzlF\">min(_:_:_:_:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "Float",
                "key.typeusr" : "$SSfD",
                "key.usr" : "s:Sf4MathE6random3min3maxS2f_SftFZACL0_Sfvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let max: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>max<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "max",
                "key.namelength" : 3,
                "key.nameoffset" : 648,
                "key.offset" : 638,
                "key.parsed_declaration" : "let (min, max) = ordered(min, max)",
                "key.parsed_scope.end" : 30,
                "key.parsed_scope.start" : 30,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3maxyxx_xtSLRzlF\">max(_:_:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3maxyxx_xxxdtSLRzlF\">max(_:_:_:_:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "Float",
                "key.typeusr" : "$SSfD",
                "key.usr" : "s:Sf4MathE6random3min3maxS2f_SftFZADL0_Sfvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let range: <Type usr=\"s:Sf\">Float<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>range<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 21,
                "key.name" : "range",
                "key.namelength" : 5,
                "key.nameoffset" : 685,
                "key.offset" : 681,
                "key.parsed_declaration" : "let range = max - min",
                "key.parsed_scope.end" : 31,
                "key.parsed_scope.start" : 31,
                "key.typename" : "Float",
                "key.typeusr" : "$SSfD",
                "key.usr" : "s:Sf4MathE6random3min3maxS2f_SftFZ5rangeL_Sfvp"
              }
            ],
            "key.typename" : "(Float.Type) -> (Float, Float) -> Float",
            "key.typeusr" : "$S3min3maxS2f_SftcD",
            "key.usr" : "s:Sf4MathE6random3min3maxS2f_SftFZ"
          }
        ],
        "key.typename" : "Float.Type",
        "key.typeusr" : "$SSfmD",
        "key.usr" : "s:Sf"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Double<\/Declaration>",
        "key.bodylength" : 222,
        "key.bodyoffset" : 809,
        "key.doc.declaration" : "struct Double",
        "key.doc.full_as_xml" : "<Class><Name>Double<\/Name><USR>s:Sd<\/USR><Declaration>struct Double<\/Declaration><CommentParts><Abstract><Para>A double-precision, floating-point value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Double",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 15,
            "key.offset" : 792
          }
        ],
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Double<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.inheritedtypes" : [
          {
            "key.name" : "RandomProducing"
          }
        ],
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 258,
        "key.modulename" : "Swift",
        "key.name" : "Double",
        "key.namelength" : 6,
        "key.nameoffset" : 784,
        "key.offset" : 774,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func random(min: <Type usr=\"s:Sd\">Double<\/Type> = default, max: <Type usr=\"s:Sd\">Double<\/Type> = default) -&gt; <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 815
              }
            ],
            "key.bodylength" : 141,
            "key.bodyoffset" : 888,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>random<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>min<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>max<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.function.returntype><\/decl.function.method.static>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 208,
            "key.name" : "random(min:max:)",
            "key.namelength" : 42,
            "key.nameoffset" : 834,
            "key.offset" : 822,
            "key.overrides" : [
              {
                "key.usr" : "s:4Math15RandomProducingP6random3min3maxxx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func random(min: Double = 0, max: Double = 1.0) -> Double",
            "key.parsed_scope.end" : 42,
            "key.parsed_scope.start" : 38,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let min: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>min<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "min",
                "key.namelength" : 3,
                "key.nameoffset" : 902,
                "key.offset" : 897,
                "key.parsed_declaration" : "let (min, max) = ordered(min, max)",
                "key.parsed_scope.end" : 39,
                "key.parsed_scope.start" : 39,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3minyxx_xtSLRzlF\">min(_:_:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3minyxx_xxxdtSLRzlF\">min(_:_:_:_:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE6random3min3maxS2d_SdtFZACL0_Sdvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let max: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>max<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 34,
                "key.name" : "max",
                "key.namelength" : 3,
                "key.nameoffset" : 907,
                "key.offset" : 897,
                "key.parsed_declaration" : "let (min, max) = ordered(min, max)",
                "key.parsed_scope.end" : 39,
                "key.parsed_scope.start" : 39,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3maxyxx_xtSLRzlF\">max(_:_:)<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:s3maxyxx_xxxdtSLRzlF\">max(_:_:_:_:)<\/RelatedName>"
                  }
                ],
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE6random3min3maxS2d_SdtFZADL0_Sdvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let range: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/RandomProducing.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>range<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Floating",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 21,
                "key.name" : "range",
                "key.namelength" : 5,
                "key.nameoffset" : 944,
                "key.offset" : 940,
                "key.parsed_declaration" : "let range = max - min",
                "key.parsed_scope.end" : 40,
                "key.parsed_scope.start" : 40,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:Sd4MathE6random3min3maxS2d_SdtFZ5rangeL_Sdvp"
              }
            ],
            "key.typename" : "(Double.Type) -> (Double, Double) -> Double",
            "key.typeusr" : "$S3min3maxS2d_SdtcD",
            "key.usr" : "s:Sd4MathE6random3min3maxS2d_SdtFZ"
          }
        ],
        "key.typename" : "Double.Type",
        "key.typeusr" : "$SSdmD",
        "key.usr" : "s:Sd"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 8395,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 184
          }
        ],
        "key.bodylength" : 1536,
        "key.bodyoffset" : 322,
        "key.doc.column" : 17,
        "key.doc.comment" : "Model of ratio.",
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.doclength" : 20,
        "key.docoffset" : 164,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 8,
            "key.offset" : 214
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 14,
            "key.offset" : 228
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 10,
            "key.offset" : 248
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 13,
            "key.offset" : 264
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 8,
            "key.offset" : 283
          },
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 23,
            "key.offset" : 297
          }
        ],
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Additive"
          },
          {
            "key.name" : "Multiplicative"
          },
          {
            "key.name" : "Strideable"
          },
          {
            "key.name" : "SignedNumeric"
          },
          {
            "key.name" : "Hashable"
          },
          {
            "key.name" : "CustomStringConvertible"
          }
        ],
        "key.kind" : "source.lang.swift.decl.protocol",
        "key.length" : 1668,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 200,
        "key.offset" : 191,
        "key.parsed_declaration" : "public protocol Rational:\n    Additive,\n    Multiplicative,\n    Strideable,\n    SignedNumeric,\n    Hashable,\n    CustomStringConvertible",
        "key.parsed_scope.end" : 67,
        "key.parsed_scope.start" : 13,
        "key.runtime_name" : "_TtP8Rational8Rational_",
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 27,
            "key.name" : "MARK: - Instance Properties",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 330
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var floatValue: <Type usr=\"s:Sf\">Float<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 407,
            "key.doc.column" : 9,
            "key.doc.comment" : "Float value.",
            "key.doc.declaration" : "var floatValue: Float { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"24\" column=\"9\"><Name>floatValue<\/Name><USR>s:4Math8RationalP10floatValueSfvp<\/USR><Declaration>var floatValue: Float { get }<\/Declaration><CommentParts><Abstract><Para>Float value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 24,
            "key.doc.name" : "floatValue",
            "key.doc.type" : "Other",
            "key.doclength" : 17,
            "key.docoffset" : 363,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>floatValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 29,
            "key.name" : "floatValue",
            "key.namelength" : 10,
            "key.nameoffset" : 388,
            "key.offset" : 384,
            "key.parsed_declaration" : "var floatValue: Float",
            "key.parsed_scope.end" : 24,
            "key.parsed_scope.start" : 24,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE10floatValueSfvp\">floatValue<\/RelatedName>"
              }
            ],
            "key.typename" : "Float",
            "key.typeusr" : "$SSfD",
            "key.usr" : "s:4Math8RationalP10floatValueSfvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var doubleValue: <Type usr=\"s:Sd\">Double<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 466,
            "key.doc.column" : 9,
            "key.doc.comment" : "Double value.",
            "key.doc.declaration" : "var doubleValue: Double { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"27\" column=\"9\"><Name>doubleValue<\/Name><USR>s:4Math8RationalP11doubleValueSdvp<\/USR><Declaration>var doubleValue: Double { get }<\/Declaration><CommentParts><Abstract><Para>Double value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 27,
            "key.doc.name" : "doubleValue",
            "key.doc.type" : "Other",
            "key.doclength" : 18,
            "key.docoffset" : 419,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>doubleValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 31,
            "key.name" : "doubleValue",
            "key.namelength" : 11,
            "key.nameoffset" : 445,
            "key.offset" : 441,
            "key.parsed_declaration" : "var doubleValue: Double",
            "key.parsed_scope.end" : 27,
            "key.parsed_scope.start" : 27,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE11doubleValueSdvp\">doubleValue<\/RelatedName>"
              }
            ],
            "key.typename" : "Double",
            "key.typeusr" : "$SSdD",
            "key.usr" : "s:4Math8RationalP11doubleValueSdvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var inverse: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 548,
            "key.doc.column" : 9,
            "key.doc.comment" : "Inverse of self. Assumes `numerator != 0`.",
            "key.doc.declaration" : "var inverse: Self { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"30\" column=\"9\"><Name>inverse<\/Name><USR>s:4Math8RationalP7inversexvp<\/USR><Declaration>var inverse: Self { get }<\/Declaration><CommentParts><Abstract><Para>Inverse of self. Assumes <codeVoice>numerator != 0<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 30,
            "key.doc.name" : "inverse",
            "key.doc.type" : "Other",
            "key.doclength" : 47,
            "key.docoffset" : 478,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>inverse<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 25,
            "key.name" : "inverse",
            "key.namelength" : 7,
            "key.nameoffset" : 533,
            "key.offset" : 529,
            "key.parsed_declaration" : "var inverse: Self",
            "key.parsed_scope.end" : 30,
            "key.parsed_scope.start" : 30,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7inversexvp\">inverse<\/RelatedName>"
              }
            ],
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalP7inversexvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var reduced: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 611,
            "key.doc.column" : 9,
            "key.doc.comment" : "Reduced form of `self`.",
            "key.doc.declaration" : "var reduced: Self { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"33\" column=\"9\"><Name>reduced<\/Name><USR>s:4Math8RationalP7reducedxvp<\/USR><Declaration>var reduced: Self { get }<\/Declaration><CommentParts><Abstract><Para>Reduced form of <codeVoice>self<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 33,
            "key.doc.name" : "reduced",
            "key.doc.type" : "Other",
            "key.doclength" : 28,
            "key.docoffset" : 560,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>reduced<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 25,
            "key.name" : "reduced",
            "key.namelength" : 7,
            "key.nameoffset" : 596,
            "key.offset" : 592,
            "key.parsed_declaration" : "var reduced: Self",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 33,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7reducedxvp\">reduced<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ\">reduced(_:_:)<\/RelatedName>"
              }
            ],
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalP7reducedxvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var isReduced: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 702,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isReduced<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 27,
            "key.name" : "isReduced",
            "key.namelength" : 9,
            "key.nameoffset" : 685,
            "key.offset" : 681,
            "key.parsed_declaration" : "var isReduced: Bool",
            "key.parsed_scope.end" : 36,
            "key.parsed_scope.start" : 36,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE9isReducedSbvp\">isReduced<\/RelatedName>"
              }
            ],
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:4Math8RationalP9isReducedSbvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var numerator: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 753,
            "key.doc.column" : 9,
            "key.doc.comment" : "Numerator.",
            "key.doc.declaration" : "var numerator: Int { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"39\" column=\"9\"><Name>numerator<\/Name><USR>s:4Math8RationalP9numeratorSivp<\/USR><Declaration>var numerator: Int { get }<\/Declaration><CommentParts><Abstract><Para>Numerator.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 39,
            "key.doc.name" : "numerator",
            "key.doc.type" : "Other",
            "key.doclength" : 15,
            "key.docoffset" : 714,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>numerator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 26,
            "key.name" : "numerator",
            "key.namelength" : 9,
            "key.nameoffset" : 737,
            "key.offset" : 733,
            "key.parsed_declaration" : "var numerator: Int",
            "key.parsed_scope.end" : 39,
            "key.parsed_scope.start" : 39,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8RationalP9numeratorSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>var denominator: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
            "key.bodylength" : 5,
            "key.bodyoffset" : 808,
            "key.doc.column" : 9,
            "key.doc.comment" : "Denominator.",
            "key.doc.declaration" : "var denominator: Int { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"42\" column=\"9\"><Name>denominator<\/Name><USR>s:4Math8RationalP11denominatorSivp<\/USR><Declaration>var denominator: Int { get }<\/Declaration><CommentParts><Abstract><Para>Denominator.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 42,
            "key.doc.name" : "denominator",
            "key.doc.type" : "Other",
            "key.doclength" : 17,
            "key.docoffset" : 765,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>denominator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 28,
            "key.name" : "denominator",
            "key.namelength" : 11,
            "key.nameoffset" : 790,
            "key.offset" : 786,
            "key.parsed_declaration" : "var denominator: Int",
            "key.parsed_scope.end" : 42,
            "key.parsed_scope.start" : 42,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8RationalP11denominatorSivp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 20,
            "key.name" : "MARK: - Initializers",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 823
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>init(_ numerator: <Type usr=\"s:Si\">Int<\/Type>, _ denominator: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
            "key.doc.column" : 5,
            "key.doc.comment" : "Create a `Rational` value with a given `numerator` and `denominator`.",
            "key.doc.declaration" : "init(_ numerator: Int, _ denominator: Int)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"47\" column=\"5\"><Name>init(_:_:)<\/Name><USR>s:4Math8RationalPyxSi_Sitcfc<\/USR><Declaration>init(_ numerator: Int, _ denominator: Int)<\/Declaration><CommentParts><Abstract><Para>Create a <codeVoice>Rational<\/codeVoice> value with a given <codeVoice>numerator<\/codeVoice> and <codeVoice>denominator<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 47,
            "key.doc.name" : "init(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 74,
            "key.docoffset" : 849,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>numerator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>denominator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 42,
            "key.name" : "init(_:_:)",
            "key.namelength" : 42,
            "key.nameoffset" : 927,
            "key.offset" : 927,
            "key.parsed_declaration" : "init(_ numerator: Int, _ denominator: Int)",
            "key.parsed_scope.end" : 47,
            "key.parsed_scope.start" : 47,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc\">convenience init?&lt;T&gt;(exactly: T) where T : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc\">init(integerLiteral: Self.IntegerLiteralType)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc\">convenience init(integerLiteral: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj7exactlyxSgqd___tcSzRd__lufc\">init?&lt;T&gt;(exactly: T) where T : BinaryInteger<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Int, Int) -> Self",
            "key.typeusr" : "$SyxSi_SitcD",
            "key.usr" : "s:4Math8RationalPyxSi_Sitcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>func scaling(numerator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.doc.column" : 10,
            "key.doc.comment" : "- returns: Representation of a `Rational` value with a given `numerator`, if possible.\n\n> Preserves the arithmetic value of the original `Rational` value.",
            "key.doc.declaration" : "func scaling(numerator: Int) -> Self",
            "key.doc.discussion" : [
              {
                "Para" : "Preserves the arithmetic value of the original `Rational` value."
              }
            ],
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"52\" column=\"10\"><Name>scaling(numerator:)<\/Name><USR>s:4Math8RationalP7scaling9numeratorxSi_tF<\/USR><Declaration>func scaling(numerator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Representation of a <codeVoice>Rational<\/codeVoice> value with a given <codeVoice>numerator<\/codeVoice>, if possible.<\/Para><\/ResultDiscussion><Discussion><Para>Preserves the arithmetic value of the original <codeVoice>Rational<\/codeVoice> value.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 52,
            "key.doc.name" : "scaling(numerator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Representation of a `Rational` value with a given `numerator`, if possible."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 174,
            "key.docoffset" : 975,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scaling<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>numerator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 36,
            "key.name" : "scaling(numerator:)",
            "key.namelength" : 23,
            "key.nameoffset" : 1158,
            "key.offset" : 1153,
            "key.parsed_declaration" : "func scaling(numerator: Int) -> Self",
            "key.parsed_scope.end" : 52,
            "key.parsed_scope.start" : 52,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7scaling11denominatorxSi_tF\">scaling(denominator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7scaling9numeratorxSi_tF\">scaling(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7scaling11denominatorxSi_tF\">scaling(denominator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S9numeratorxSi_tcD",
            "key.usr" : "s:4Math8RationalP7scaling9numeratorxSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>func scaling(denominator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.doc.column" : 10,
            "key.doc.comment" : "- returns: Representation of a `Rational` value with a given `denominator`, if\npossible. Assumes the denominator is not 0.\n\n> Preserves the arithmetic value of the original `Rational` value.",
            "key.doc.declaration" : "func scaling(denominator: Int) -> Self",
            "key.doc.discussion" : [
              {
                "Para" : "Preserves the arithmetic value of the original `Rational` value."
              }
            ],
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"58\" column=\"10\"><Name>scaling(denominator:)<\/Name><USR>s:4Math8RationalP7scaling11denominatorxSi_tF<\/USR><Declaration>func scaling(denominator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Representation of a <codeVoice>Rational<\/codeVoice> value with a given <codeVoice>denominator<\/codeVoice>, if possible. Assumes the denominator is not 0.<\/Para><\/ResultDiscussion><Discussion><Para>Preserves the arithmetic value of the original <codeVoice>Rational<\/codeVoice> value.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 58,
            "key.doc.name" : "scaling(denominator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Representation of a `Rational` value with a given `denominator`, if possible. Assumes the denominator is not 0."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 218,
            "key.docoffset" : 1195,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scaling<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>denominator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 38,
            "key.name" : "scaling(denominator:)",
            "key.namelength" : 25,
            "key.nameoffset" : 1422,
            "key.offset" : 1417,
            "key.parsed_declaration" : "func scaling(denominator: Int) -> Self",
            "key.parsed_scope.end" : 58,
            "key.parsed_scope.start" : 58,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7scaling9numeratorxSi_tF\">scaling(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7scaling9numeratorxSi_tF\">scaling(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7scaling11denominatorxSi_tF\">scaling(denominator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S11denominatorxSi_tcD",
            "key.usr" : "s:4Math8RationalP7scaling11denominatorxSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>func mutating(numerator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.doc.column" : 10,
            "key.doc.comment" : "- returns: A new `Rational` value with the given `numerator`, which is no longer\nguaranteed to provide the same arithmetic value as before.",
            "key.doc.declaration" : "func mutating(numerator: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"62\" column=\"10\"><Name>mutating(numerator:)<\/Name><USR>s:4Math8RationalP8mutating9numeratorxSi_tF<\/USR><Declaration>func mutating(numerator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>A new <codeVoice>Rational<\/codeVoice> value with the given <codeVoice>numerator<\/codeVoice>, which is no longer guaranteed to provide the same arithmetic value as before.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 62,
            "key.doc.name" : "mutating(numerator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A new `Rational` value with the given `numerator`, which is no longer guaranteed to provide the same arithmetic value as before."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 152,
            "key.docoffset" : 1461,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mutating<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>numerator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 37,
            "key.name" : "mutating(numerator:)",
            "key.namelength" : 24,
            "key.nameoffset" : 1622,
            "key.offset" : 1617,
            "key.parsed_declaration" : "func mutating(numerator: Int) -> Self",
            "key.parsed_scope.end" : 62,
            "key.parsed_scope.start" : 62,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP8mutating11denominatorxSi_tF\">mutating(denominator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE8mutating9numeratorxSi_tF\">mutating(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE8mutating11denominatorxSi_tF\">mutating(denominator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S9numeratorxSi_tcD",
            "key.usr" : "s:4Math8RationalP8mutating9numeratorxSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>func mutating(denominator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.doc.column" : 10,
            "key.doc.comment" : "- returns: A new `Rational` value with the given `denominator`, which is no longer\nguaranteed to provide the same arithmetic value as before.",
            "key.doc.declaration" : "func mutating(denominator: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"66\" column=\"10\"><Name>mutating(denominator:)<\/Name><USR>s:4Math8RationalP8mutating11denominatorxSi_tF<\/USR><Declaration>func mutating(denominator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>A new <codeVoice>Rational<\/codeVoice> value with the given <codeVoice>denominator<\/codeVoice>, which is no longer guaranteed to provide the same arithmetic value as before.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 66,
            "key.doc.name" : "mutating(denominator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A new `Rational` value with the given `denominator`, which is no longer guaranteed to provide the same arithmetic value as before."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 154,
            "key.docoffset" : 1660,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mutating<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>denominator<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 39,
            "key.name" : "mutating(denominator:)",
            "key.namelength" : 26,
            "key.nameoffset" : 1823,
            "key.offset" : 1818,
            "key.parsed_declaration" : "func mutating(denominator: Int) -> Self",
            "key.parsed_scope.end" : 66,
            "key.parsed_scope.start" : 66,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP8mutating9numeratorxSi_tF\">mutating(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE8mutating9numeratorxSi_tF\">mutating(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE8mutating11denominatorxSi_tF\">mutating(denominator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S11denominatorxSi_tcD",
            "key.usr" : "s:4Math8RationalP8mutating11denominatorxSi_tF"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 93,
        "key.bodyoffset" : 1881,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 114,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 1871,
        "key.offset" : 1861,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 16,
            "key.name" : "MARK: - Additive",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1890
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var zero: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1912
              }
            ],
            "key.bodylength" : 30,
            "key.bodyoffset" : 1942,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>zero<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 54,
            "key.name" : "zero",
            "key.namelength" : 4,
            "key.nameoffset" : 1930,
            "key.offset" : 1919,
            "key.parsed_declaration" : "public static var zero: Self",
            "key.parsed_scope.end" : 75,
            "key.parsed_scope.start" : 73,
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalPAAE4zeroxvpZ"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 98,
        "key.bodyoffset" : 1997,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 119,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 1987,
        "key.offset" : 1977,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 22,
            "key.name" : "MARK: - Multiplicative",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 2006
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static var one: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2034
              }
            ],
            "key.bodylength" : 30,
            "key.bodyoffset" : 2063,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>one<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.static>",
            "key.kind" : "source.lang.swift.decl.var.static",
            "key.length" : 53,
            "key.name" : "one",
            "key.namelength" : 3,
            "key.nameoffset" : 2052,
            "key.offset" : 2041,
            "key.parsed_declaration" : "public static var one: Self",
            "key.parsed_scope.end" : 84,
            "key.parsed_scope.start" : 82,
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalPAAE3onexvpZ"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 169,
        "key.bodyoffset" : 2118,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 190,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 2108,
        "key.offset" : 2098,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 21,
            "key.name" : "MARK: - SignedNumeric",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 2127
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public prefix static func - (rational: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.prefix",
                "key.length" : 6,
                "key.offset" : 2215
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2201
              }
            ],
            "key.bodylength" : 30,
            "key.bodyoffset" : 2255,
            "key.doc.column" : 31,
            "key.doc.comment" : "Negate `Rational` type arithmetically.",
            "key.doc.declaration" : "public prefix static func - (rational: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"92\" column=\"31\"><Name>-(_:)<\/Name><USR>s:4Math8RationalPAAE1sopyxxFZ<\/USR><Declaration>public prefix static func - (rational: Self) -&gt; Self<\/Declaration><CommentParts><Abstract><Para>Negate <codeVoice>Rational<\/codeVoice> type arithmetically.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 92,
            "key.doc.name" : "-(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 43,
            "key.docoffset" : 2154,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.prefix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>prefix<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>- <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>rational<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.operator.prefix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 78,
            "key.name" : "-(_:)",
            "key.namelength" : 18,
            "key.nameoffset" : 2227,
            "key.offset" : 2208,
            "key.parsed_declaration" : "public static prefix func - (rational: Self) -> Self",
            "key.parsed_scope.end" : 94,
            "key.parsed_scope.start" : 92,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1sopyS2fFZ\">- (_: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1soiyS2f_SftFZ\">- (_: Float, _: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1sopyS2dFZ\">- (_: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1soiyS2d_SdtFZ\">- (_: Double, _: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1sopyA2BFZ\">- (_: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1soiyA2B_ABtFZ\">- (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13SignedNumericP1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13SignedNumericPsE1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1soiyA2B_ABtFZ\">- (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1soiyA2B_ABtFZ\">- (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1soiyA2B_ABtFZ\">- (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1soiyA2B_ABtFZ\">- (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1soiyA2B_ABtFZ\">- (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1soiyA2B_ABtFZ\">- (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1soiyA2B_ABtFZ\">- (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1soiyA2B_ABtFZ\">- (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su1soiyS2u_SutFZ\">- (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si1soiyS2i_SitFZ\">- (_: Int, _: Int) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1soiyxx_6StrideSxQztFZ\">- (_: Self, _: Self.Stride) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1soiy6StrideSxQzx_xtFZ\">- (_: Self, _: Self) -&gt; Self.Stride<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let rational: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>rational<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 8,
                "key.name" : "rational",
                "key.offset" : 2230,
                "key.parent_loc" : 2227,
                "key.parsed_declaration" : "public static prefix func - (rational: Self) -> Self",
                "key.parsed_scope.end" : 92,
                "key.parsed_scope.start" : 92,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1sopyxxFZ8rationalL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self) -> Self",
            "key.typeusr" : "$SyxxcD",
            "key.usr" : "s:4Math8RationalPAAE1sopyxxFZ"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 293,
        "key.bodyoffset" : 2310,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 314,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 2300,
        "key.offset" : 2290,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 18,
            "key.name" : "MARK: - Strideable",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 2319
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func advanced(by n: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2394
              }
            ],
            "key.bodylength" : 29,
            "key.bodyoffset" : 2436,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: Self advanced by the given `n`.",
            "key.doc.declaration" : "public func advanced(by n: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"102\" column=\"17\"><Name>advanced(by:)<\/Name><USR>s:4Math8RationalPAAE8advanced2byxx_tF<\/USR><Declaration>public func advanced(by n: Self) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Self advanced by the given <codeVoice>n<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 102,
            "key.doc.name" : "advanced(by:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Self advanced by the given `n`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 47,
            "key.docoffset" : 2343,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>advanced<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>by<\/decl.var.parameter.argument_label> <decl.var.parameter.name>n<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 65,
            "key.name" : "advanced(by:)",
            "key.namelength" : 20,
            "key.nameoffset" : 2406,
            "key.offset" : 2401,
            "key.parsed_declaration" : "public func advanced(by n: Self) -> Self",
            "key.parsed_scope.end" : 104,
            "key.parsed_scope.start" : 102,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sx8advanced2byx6StrideQz_tF\">advanced(by: Self.Stride) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Self) -> Self",
            "key.typeusr" : "$S2byxx_tcD",
            "key.usr" : "s:4Math8RationalPAAE8advanced2byxx_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func distance(to other: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2522
              }
            ],
            "key.bodylength" : 33,
            "key.bodyoffset" : 2568,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: Distance to the given `other`.",
            "key.doc.declaration" : "public func distance(to other: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"107\" column=\"17\"><Name>distance(to:)<\/Name><USR>s:4Math8RationalPAAE8distance2toxx_tF<\/USR><Declaration>public func distance(to other: Self) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Distance to the given <codeVoice>other<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 107,
            "key.doc.name" : "distance(to:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Distance to the given `other`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 46,
            "key.docoffset" : 2472,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>distance<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>to<\/decl.var.parameter.argument_label> <decl.var.parameter.name>other<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 73,
            "key.name" : "distance(to:)",
            "key.namelength" : 24,
            "key.nameoffset" : 2534,
            "key.offset" : 2529,
            "key.parsed_declaration" : "public func distance(to other: Self) -> Self",
            "key.parsed_scope.end" : 109,
            "key.parsed_scope.start" : 107,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sx8distance2to6StrideQzx_tF\">distance(to: Self) -&gt; Self.Stride<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Self) -> Self",
            "key.typeusr" : "$S2toxx_tcD",
            "key.usr" : "s:4Math8RationalPAAE8distance2toxx_tF"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 1004,
        "key.bodyoffset" : 2626,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1025,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 2616,
        "key.offset" : 2606,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func scaling(numerator newNumerator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2714
              }
            ],
            "key.bodylength" : 316,
            "key.bodyoffset" : 2772,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: Representation of a `Rational` value with a given `numerator`.",
            "key.doc.declaration" : "public func scaling(numerator newNumerator: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"115\" column=\"17\"><Name>scaling(numerator:)<\/Name><USR>s:4Math8RationalPAAE7scaling9numeratorxSi_tF<\/USR><Declaration>public func scaling(numerator newNumerator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Representation of a <codeVoice>Rational<\/codeVoice> value with a given <codeVoice>numerator<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 115,
            "key.doc.name" : "scaling(numerator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Representation of a `Rational` value with a given `numerator`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 78,
            "key.docoffset" : 2632,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scaling<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>numerator<\/decl.var.parameter.argument_label> <decl.var.parameter.name>newNumerator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 368,
            "key.name" : "scaling(numerator:)",
            "key.namelength" : 36,
            "key.nameoffset" : 2726,
            "key.offset" : 2721,
            "key.parsed_declaration" : "public func scaling(numerator newNumerator: Int) -> Self",
            "key.parsed_scope.end" : 121,
            "key.parsed_scope.start" : 115,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7scaling9numeratorxSi_tF\">scaling(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7scaling11denominatorxSi_tF\">scaling(denominator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7scaling11denominatorxSi_tF\">scaling(denominator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let quotient: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>quotient<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 55,
                "key.name" : "quotient",
                "key.namelength" : 8,
                "key.nameoffset" : 2846,
                "key.offset" : 2842,
                "key.parsed_declaration" : "let quotient = Double(newNumerator) \/ Double(numerator)",
                "key.parsed_scope.end" : 117,
                "key.parsed_scope.start" : 117,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:4Math8RationalPAAE7scaling9numeratorxSi_tF8quotientL_Sdvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let newDenominator: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newDenominator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 51,
                "key.name" : "newDenominator",
                "key.namelength" : 14,
                "key.nameoffset" : 2910,
                "key.offset" : 2906,
                "key.parsed_declaration" : "let newDenominator = Double(denominator) * quotient",
                "key.parsed_scope.end" : 118,
                "key.parsed_scope.start" : 118,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:4Math8RationalPAAE7scaling9numeratorxSi_tF14newDenominatorL_Sdvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S9numeratorxSi_tcD",
            "key.usr" : "s:4Math8RationalPAAE7scaling9numeratorxSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func scaling(denominator newDenominator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3179
              }
            ],
            "key.bodylength" : 387,
            "key.bodyoffset" : 3241,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: Representation of a `Rational` value with a given `denominator`.",
            "key.doc.declaration" : "public func scaling(denominator newDenominator: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"124\" column=\"17\"><Name>scaling(denominator:)<\/Name><USR>s:4Math8RationalPAAE7scaling11denominatorxSi_tF<\/USR><Declaration>public func scaling(denominator newDenominator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Representation of a <codeVoice>Rational<\/codeVoice> value with a given <codeVoice>denominator<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 124,
            "key.doc.name" : "scaling(denominator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Representation of a `Rational` value with a given `denominator`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 80,
            "key.docoffset" : 3095,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>scaling<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>denominator<\/decl.var.parameter.argument_label> <decl.var.parameter.name>newDenominator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 443,
            "key.name" : "scaling(denominator:)",
            "key.namelength" : 40,
            "key.nameoffset" : 3191,
            "key.offset" : 3186,
            "key.parsed_declaration" : "public func scaling(denominator newDenominator: Int) -> Self",
            "key.parsed_scope.end" : 131,
            "key.parsed_scope.start" : 124,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7scaling9numeratorxSi_tF\">scaling(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7scaling11denominatorxSi_tF\">scaling(denominator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7scaling9numeratorxSi_tF\">scaling(numerator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let quotient: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>quotient<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 59,
                "key.name" : "quotient",
                "key.namelength" : 8,
                "key.nameoffset" : 3388,
                "key.offset" : 3384,
                "key.parsed_declaration" : "let quotient = Double(newDenominator) \/ Double(denominator)",
                "key.parsed_scope.end" : 127,
                "key.parsed_scope.start" : 127,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:4Math8RationalPAAE7scaling11denominatorxSi_tF8quotientL_Sdvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let newNumerator: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>newNumerator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 47,
                "key.name" : "newNumerator",
                "key.namelength" : 12,
                "key.nameoffset" : 3456,
                "key.offset" : 3452,
                "key.parsed_declaration" : "let newNumerator = Double(numerator) * quotient",
                "key.parsed_scope.end" : 128,
                "key.parsed_scope.start" : 128,
                "key.typename" : "Double",
                "key.typeusr" : "$SSdD",
                "key.usr" : "s:4Math8RationalPAAE7scaling11denominatorxSi_tF12newNumeratorL_Sdvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S11denominatorxSi_tcD",
            "key.usr" : "s:4Math8RationalPAAE7scaling11denominatorxSi_tF"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 1862,
        "key.bodyoffset" : 3653,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1883,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 3643,
        "key.offset" : 3633,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 15,
            "key.name" : "MARK: - Numeric",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3662
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var reciprocal: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3683
              }
            ],
            "key.bodylength" : 49,
            "key.bodyoffset" : 3712,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>reciprocal<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 72,
            "key.name" : "reciprocal",
            "key.namelength" : 10,
            "key.nameoffset" : 3694,
            "key.offset" : 3690,
            "key.parsed_declaration" : "public var reciprocal: Self",
            "key.parsed_scope.end" : 140,
            "key.parsed_scope.start" : 138,
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalPAAE10reciprocalxvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var magnitude: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3768
              }
            ],
            "key.bodylength" : 61,
            "key.bodyoffset" : 3796,
            "key.doc.declaration" : "var magnitude: Self.Magnitude { get }",
            "key.doc.discussion" : [
              {
                "Para" : "For any numeric value `x`, `x.magnitude` is the absolute value of `x`. You can use the `magnitude` property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value."
              },
              {
                "CodeListing" : ""
              },
              {
                "Para" : "The global `abs(_:)` function provides more familiar syntax when you need to find an absolute value. In addition, because `abs(_:)` always returns a value of the same type, even in a generic context, using the function instead of the `magnitude` property is encouraged."
              }
            ],
            "key.doc.full_as_xml" : "<Other><Name>magnitude<\/Name><USR>s:Sj9magnitude9MagnitudeQzvp<\/USR><Declaration>var magnitude: Self.Magnitude { get }<\/Declaration><CommentParts><Abstract><Para>The magnitude of this value.<\/Para><\/Abstract><Discussion><Para>For any numeric value <codeVoice>x<\/codeVoice>, <codeVoice>x.magnitude<\/codeVoice> is the absolute value of <codeVoice>x<\/codeVoice>. You can use the <codeVoice>magnitude<\/codeVoice> property in operations that are simpler to implement in terms of unsigned values, such as printing the value of an integer, which is just printing a ‘-’ character in front of an absolute value.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let x = -200]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ x.magnitude == 200]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The global <codeVoice>abs(_:)<\/codeVoice> function provides more familiar syntax when you need to find an absolute value. In addition, because <codeVoice>abs(_:)<\/codeVoice> always returns a value of the same type, even in a generic context, using the function instead of the <codeVoice>magnitude<\/codeVoice> property is encouraged.<\/Para><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.name" : "magnitude",
            "key.doc.type" : "Other",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>magnitude<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 83,
            "key.name" : "magnitude",
            "key.namelength" : 9,
            "key.nameoffset" : 3779,
            "key.offset" : 3775,
            "key.parsed_declaration" : "public var magnitude: Self",
            "key.parsed_scope.end" : 144,
            "key.parsed_scope.start" : 142,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj9magnitude9MagnitudeQzvp\">magnitude<\/RelatedName>"
              }
            ],
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:Sj9magnitude9MagnitudeQzvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public convenience init?&lt;T&gt;(exactly source: <Type usr=\"s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc1TL_qd__mfp\">T<\/Type>) where T : <Type usr=\"s:Sz\">BinaryInteger<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3918
              }
            ],
            "key.bodylength" : 39,
            "key.bodyoffset" : 3979,
            "key.doc.column" : 12,
            "key.doc.comment" : "Creates a `Rational` with the given `source`.",
            "key.doc.declaration" : "public convenience init?<T>(exactly source: T) where T : BinaryInteger",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"147\" column=\"12\"><Name>init(exactly:)<\/Name><USR>s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc<\/USR><Declaration>public convenience init?&lt;T&gt;(exactly source: T) where T : BinaryInteger<\/Declaration><CommentParts><Abstract><Para>Creates a <codeVoice>Rational<\/codeVoice> with the given <codeVoice>source<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 147,
            "key.doc.name" : "init(exactly:)",
            "key.doc.type" : "Function",
            "key.doclength" : 50,
            "key.docoffset" : 3864,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>convenience<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>?&lt;<decl.generic_type_param usr=\"s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc1TL_qd__mfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>exactly<\/decl.var.parameter.argument_label> <decl.var.parameter.name>source<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc1TL_qd__mfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:Sz\">BinaryInteger<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 94,
            "key.name" : "init(exactly:)",
            "key.namelength" : 29,
            "key.nameoffset" : 3925,
            "key.offset" : 3925,
            "key.parsed_declaration" : "public init? <T> (exactly source: T) where T: BinaryInteger",
            "key.parsed_scope.end" : 149,
            "key.parsed_scope.start" : 147,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPyxSi_Sitcfc\">init(_:_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc\">init(integerLiteral: Self.IntegerLiteralType)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27ExpressibleByIntegerLiteralPss01_ab7BuiltincD0RzrlE07integerD0xx_tcfc\">convenience init(integerLiteral: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj7exactlyxSgqd___tcSzRd__lufc\">init?&lt;T&gt;(exactly: T) where T : BinaryInteger<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>T<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 1,
                "key.name" : "T",
                "key.namelength" : 1,
                "key.nameoffset" : 3932,
                "key.offset" : 3932,
                "key.parsed_declaration" : "public init? <T> (exactly source: T) where T: BinaryInteger",
                "key.parsed_scope.end" : 147,
                "key.parsed_scope.start" : 147,
                "key.typename" : "T.Type",
                "key.typeusr" : "$Sqd__mD",
                "key.usr" : "s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc1TL_qd__mfp"
              }
            ],
            "key.typename" : "<Self, T where Self : Rational, T : BinaryInteger> (Self.Type) -> (T) -> Self?",
            "key.typeusr" : "$S7exactlyxSgqd___tcSzRd__luD",
            "key.usr" : "s:4Math8RationalPAAE7exactlyxSgqd___tcSzRd__lufc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func + (lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4075
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 4128,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: Sum of both `Rational` values.",
            "key.doc.declaration" : "public static func + (lhs: Self, rhs: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"152\" column=\"24\"><Name>+(_:_:)<\/Name><USR>s:4Math8RationalPAAE1poiyxx_xtFZ<\/USR><Declaration>public static func + (lhs: Self, rhs: Self) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Sum of both <codeVoice>Rational<\/codeVoice> values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 152,
            "key.doc.name" : "+(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Sum of both `Rational` values."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 46,
            "key.docoffset" : 4025,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>+ <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 155,
            "key.name" : "+(_:_:)",
            "key.namelength" : 24,
            "key.nameoffset" : 4094,
            "key.offset" : 4082,
            "key.parsed_declaration" : "public static func + (lhs: Self, rhs: Self) -> Self",
            "key.parsed_scope.end" : 155,
            "key.parsed_scope.start" : 152,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1poiyS2f_SftFZ\">+ (_: Float, _: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1poiyS2d_SdtFZ\">+ (_: Double, _: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1poiyA2B_ABtFZ\">+ (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SjsE1popyxxFZ\">+(_:)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz1poiyxx_xtFZ\">+ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1poiyA2B_ABtFZ\">+ (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1poiyA2B_ABtFZ\">+ (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1poiyA2B_ABtFZ\">+ (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1poiyA2B_ABtFZ\">+ (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1poiyA2B_ABtFZ\">+ (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1poiyA2B_ABtFZ\">+ (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1poiyA2B_ABtFZ\">+ (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1poiyA2B_ABtFZ\">+ (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su1poiyS2u_SutFZ\">+ (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si1poiyS2i_SitFZ\">+ (_: Int, _: Int) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SmsE1poiyxx_qd__tSTRd__7ElementQyd__ABRtzlFZ\">+ &lt;Other&gt;(_: Self, _: Other) -&gt; Self where Other : Sequence, Self.Element == Other.Element<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SmsE1poiyxqd___xtSTRd__7ElementQyd__ABRtzlFZ\">+ &lt;Other&gt;(_: Other, _: Self) -&gt; Self where Other : Sequence, Self.Element == Other.Element<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SmsE1poiyxx_qd__tSmRd__7ElementQyd__ABRtzlFZ\">+ &lt;Other&gt;(_: Self, _: Other) -&gt; Self where Other : RangeReplaceableCollection, Self.Element == Other.Element<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1poiyxx_6StrideSxQztFZ\">+ (_: Self, _: Self.Stride) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1poiyx6StrideSxQz_xtFZ\">+ (_: Self.Stride, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS1poiyS2S_SStFZ\">+ (_: String, _: String) -&gt; String<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 4097,
                "key.parent_loc" : 4094,
                "key.parsed_declaration" : "public static func + (lhs: Self, rhs: Self) -> Self",
                "key.parsed_scope.end" : 152,
                "key.parsed_scope.start" : 152,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1poiyxx_xtFZ3lhsL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let a: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>a<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 32,
                "key.name" : "a",
                "key.namelength" : 1,
                "key.nameoffset" : 4142,
                "key.offset" : 4137,
                "key.parsed_declaration" : "let (a,b) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 153,
                "key.parsed_scope.start" : 153,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1poiyxx_xtFZ1aL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let b: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>b<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 32,
                "key.name" : "b",
                "key.namelength" : 1,
                "key.nameoffset" : 4144,
                "key.offset" : 4137,
                "key.parsed_declaration" : "let (a,b) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 153,
                "key.parsed_scope.start" : 153,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1poiyxx_xtFZ1bL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self, Self) -> Self",
            "key.typeusr" : "$Syxx_xtcD",
            "key.usr" : "s:4Math8RationalPAAE1poiyxx_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func += (lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4325
              }
            ],
            "key.bodylength" : 29,
            "key.bodyoffset" : 4377,
            "key.doc.column" : 24,
            "key.doc.comment" : "Assigns the sum of both `Rational` values to the left-hand-side variable.",
            "key.doc.declaration" : "public static func += (lhs: inout Self, rhs: Self)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"158\" column=\"24\"><Name>+=(_:_:)<\/Name><USR>s:4Math8RationalPAAE2peoiyyxz_xtFZ<\/USR><Declaration>public static func += (lhs: inout Self, rhs: Self)<\/Declaration><CommentParts><Abstract><Para>Assigns the sum of both <codeVoice>Rational<\/codeVoice> values to the left-hand-side variable.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 158,
            "key.doc.name" : "+=(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 78,
            "key.docoffset" : 4243,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>+= <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 75,
            "key.name" : "+=(_:_:)",
            "key.namelength" : 31,
            "key.nameoffset" : 4344,
            "key.offset" : 4332,
            "key.parsed_declaration" : "public static func += (lhs: inout Self, rhs: Self)",
            "key.parsed_scope.end" : 160,
            "key.parsed_scope.start" : 158,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF2peoiyyxz_xtFZ\">+= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf2peoiyySfz_SftFZ\">+= (_: inout Float, _: Float)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd2peoiyySdz_SdtFZ\">+= (_: inout Double, _: Double)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V2peoiyyABz_ABtFZ\">+= (_: inout Float80, _: Float80)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj2peoiyyxz_xtFZ\">+= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz2peoiyyxz_xtFZ\">+= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2peoiyyABz_ABtFZ\">+= (_: inout UInt8, _: UInt8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2peoiyyABz_ABtFZ\">+= (_: inout Int8, _: Int8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2peoiyyABz_ABtFZ\">+= (_: inout UInt16, _: UInt16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2peoiyyABz_ABtFZ\">+= (_: inout Int16, _: Int16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2peoiyyABz_ABtFZ\">+= (_: inout UInt32, _: UInt32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2peoiyyABz_ABtFZ\">+= (_: inout Int32, _: Int32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2peoiyyABz_ABtFZ\">+= (_: inout UInt64, _: UInt64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2peoiyyABz_ABtFZ\">+= (_: inout Int64, _: Int64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2peoiyySuz_SutFZ\">+= (_: inout UInt, _: UInt)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2peoiyySiz_SitFZ\">+= (_: inout Int, _: Int)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SmsE2peoiyyxz_qd__tSTRd__7ElementQyd__ABRtzlFZ\">+= &lt;Other&gt;(_: inout Self, _: Other) where Other : Sequence, Self.Element == Other.Element<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE2peoiyyxz_6StrideSxQztFZ\">+= (_: inout Self, _: Self.Stride)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2peoiyySSz_SStFZ\">+= (_: inout String, _: String)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 4348,
                "key.parent_loc" : 4344,
                "key.parsed_declaration" : "public static func += (lhs: inout Self, rhs: Self)",
                "key.parsed_scope.end" : 158,
                "key.parsed_scope.start" : 158,
                "key.typename" : "inout Self",
                "key.typeusr" : "$SxzD",
                "key.usr" : "s:4Math8RationalPAAE2peoiyyxz_xtFZ3lhsL_xzvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (inout Self, Self) -> ()",
            "key.typeusr" : "$Syyxz_xtcD",
            "key.usr" : "s:4Math8RationalPAAE2peoiyyxz_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func - (lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4470
              }
            ],
            "key.bodylength" : 108,
            "key.bodyoffset" : 4523,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: Difference of both `Rational` values.",
            "key.doc.declaration" : "public static func - (lhs: Self, rhs: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"163\" column=\"24\"><Name>-(_:_:)<\/Name><USR>s:4Math8RationalPAAE1soiyxx_xtFZ<\/USR><Declaration>public static func - (lhs: Self, rhs: Self) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Difference of both <codeVoice>Rational<\/codeVoice> values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 163,
            "key.doc.name" : "-(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Difference of both `Rational` values."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 53,
            "key.docoffset" : 4413,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>- <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 155,
            "key.name" : "-(_:_:)",
            "key.namelength" : 24,
            "key.nameoffset" : 4489,
            "key.offset" : 4477,
            "key.parsed_declaration" : "public static func - (lhs: Self, rhs: Self) -> Self",
            "key.parsed_scope.end" : 166,
            "key.parsed_scope.start" : 163,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1sopyS2fFZ\">- (_: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1soiyS2f_SftFZ\">- (_: Float, _: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1sopyS2dFZ\">- (_: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1soiyS2d_SdtFZ\">- (_: Double, _: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1sopyA2BFZ\">- (_: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1soiyA2B_ABtFZ\">- (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13SignedNumericP1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13SignedNumericPsE1sopyxxFZ\">- (_: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz1soiyxx_xtFZ\">- (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1soiyA2B_ABtFZ\">- (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1soiyA2B_ABtFZ\">- (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1soiyA2B_ABtFZ\">- (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1soiyA2B_ABtFZ\">- (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1soiyA2B_ABtFZ\">- (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1soiyA2B_ABtFZ\">- (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1soiyA2B_ABtFZ\">- (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1soiyA2B_ABtFZ\">- (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su1soiyS2u_SutFZ\">- (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si1soiyS2i_SitFZ\">- (_: Int, _: Int) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1soiyxx_6StrideSxQztFZ\">- (_: Self, _: Self.Stride) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE1soiy6StrideSxQzx_xtFZ\">- (_: Self, _: Self) -&gt; Self.Stride<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 4492,
                "key.parent_loc" : 4489,
                "key.parsed_declaration" : "public static func - (lhs: Self, rhs: Self) -> Self",
                "key.parsed_scope.end" : 163,
                "key.parsed_scope.start" : 163,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1soiyxx_xtFZ3lhsL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let a: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>a<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 32,
                "key.name" : "a",
                "key.namelength" : 1,
                "key.nameoffset" : 4537,
                "key.offset" : 4532,
                "key.parsed_declaration" : "let (a,b) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 164,
                "key.parsed_scope.start" : 164,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1soiyxx_xtFZ1aL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let b: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>b<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 32,
                "key.name" : "b",
                "key.namelength" : 1,
                "key.nameoffset" : 4539,
                "key.offset" : 4532,
                "key.parsed_declaration" : "let (a,b) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 164,
                "key.parsed_scope.start" : 164,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1soiyxx_xtFZ1bL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self, Self) -> Self",
            "key.typeusr" : "$Syxx_xtcD",
            "key.usr" : "s:4Math8RationalPAAE1soiyxx_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func -= (lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4726
              }
            ],
            "key.bodylength" : 29,
            "key.bodyoffset" : 4778,
            "key.doc.column" : 24,
            "key.doc.comment" : "Assigns the differnce of both `Rational` values to the left-hand-side variable.",
            "key.doc.declaration" : "public static func -= (lhs: inout Self, rhs: Self)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"169\" column=\"24\"><Name>-=(_:_:)<\/Name><USR>s:4Math8RationalPAAE2seoiyyxz_xtFZ<\/USR><Declaration>public static func -= (lhs: inout Self, rhs: Self)<\/Declaration><CommentParts><Abstract><Para>Assigns the differnce of both <codeVoice>Rational<\/codeVoice> values to the left-hand-side variable.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 169,
            "key.doc.name" : "-=(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 84,
            "key.docoffset" : 4638,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>-= <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 75,
            "key.name" : "-=(_:_:)",
            "key.namelength" : 31,
            "key.nameoffset" : 4745,
            "key.offset" : 4733,
            "key.parsed_declaration" : "public static func -= (lhs: inout Self, rhs: Self)",
            "key.parsed_scope.end" : 171,
            "key.parsed_scope.start" : 169,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF2seoiyyxz_xtFZ\">-= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf2seoiyySfz_SftFZ\">-= (_: inout Float, _: Float)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd2seoiyySdz_SdtFZ\">-= (_: inout Double, _: Double)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V2seoiyyABz_ABtFZ\">-= (_: inout Float80, _: Float80)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj2seoiyyxz_xtFZ\">-= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz2seoiyyxz_xtFZ\">-= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2seoiyyABz_ABtFZ\">-= (_: inout UInt8, _: UInt8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2seoiyyABz_ABtFZ\">-= (_: inout Int8, _: Int8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2seoiyyABz_ABtFZ\">-= (_: inout UInt16, _: UInt16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2seoiyyABz_ABtFZ\">-= (_: inout Int16, _: Int16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2seoiyyABz_ABtFZ\">-= (_: inout UInt32, _: UInt32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2seoiyyABz_ABtFZ\">-= (_: inout Int32, _: Int32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2seoiyyABz_ABtFZ\">-= (_: inout UInt64, _: UInt64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2seoiyyABz_ABtFZ\">-= (_: inout Int64, _: Int64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2seoiyySuz_SutFZ\">-= (_: inout UInt, _: UInt)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2seoiyySiz_SitFZ\">-= (_: inout Int, _: Int)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sxss8_PointerRzrlE2seoiyyxz_6StrideSxQztFZ\">-= (_: inout Self, _: Self.Stride)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 4749,
                "key.parent_loc" : 4745,
                "key.parsed_declaration" : "public static func -= (lhs: inout Self, rhs: Self)",
                "key.parsed_scope.end" : 169,
                "key.parsed_scope.start" : 169,
                "key.typename" : "inout Self",
                "key.typeusr" : "$SxzD",
                "key.usr" : "s:4Math8RationalPAAE2seoiyyxz_xtFZ3lhsL_xzvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (inout Self, Self) -> ()",
            "key.typeusr" : "$Syyxz_xtcD",
            "key.usr" : "s:4Math8RationalPAAE2seoiyyxz_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func * (lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 4868
              }
            ],
            "key.bodylength" : 91,
            "key.bodyoffset" : 4921,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: Product of both `Rational` values.",
            "key.doc.declaration" : "public static func * (lhs: Self, rhs: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"174\" column=\"24\"><Name>*(_:_:)<\/Name><USR>s:4Math8RationalPAAE1moiyxx_xtFZ<\/USR><Declaration>public static func * (lhs: Self, rhs: Self) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Product of both <codeVoice>Rational<\/codeVoice> values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 174,
            "key.doc.name" : "*(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Product of both `Rational` values."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 50,
            "key.docoffset" : 4814,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>* <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 138,
            "key.name" : "*(_:_:)",
            "key.namelength" : 24,
            "key.nameoffset" : 4887,
            "key.offset" : 4875,
            "key.parsed_declaration" : "public static func * (lhs: Self, rhs: Self) -> Self",
            "key.parsed_scope.end" : 176,
            "key.parsed_scope.start" : 174,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math1moiySayxGAC_ACtSFRzlF\">* &lt;F&gt;(_: [F], _: [F]) -&gt; [F] where F : FloatingPoint<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math1moiySayxGAC_ACtSzRzlF\">* &lt;I&gt;(_: [I], _: [I]) -&gt; [I] where I : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1moiyS2f_SftFZ\">* (_: Float, _: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1moiyS2d_SdtFZ\">* (_: Double, _: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1moiyA2B_ABtFZ\">* (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz1moiyxx_xtFZ\">* (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1moiyA2B_ABtFZ\">* (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1moiyA2B_ABtFZ\">* (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1moiyA2B_ABtFZ\">* (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1moiyA2B_ABtFZ\">* (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1moiyA2B_ABtFZ\">* (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1moiyA2B_ABtFZ\">* (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1moiyA2B_ABtFZ\">* (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1moiyA2B_ABtFZ\">* (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su1moiyS2u_SutFZ\">* (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si1moiyS2i_SitFZ\">* (_: Int, _: Int) -&gt; Int<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 4890,
                "key.parent_loc" : 4887,
                "key.parsed_declaration" : "public static func * (lhs: Self, rhs: Self) -> Self",
                "key.parsed_scope.end" : 174,
                "key.parsed_scope.start" : 174,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1moiyxx_xtFZ3lhsL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self, Self) -> Self",
            "key.typeusr" : "$Syxx_xtcD",
            "key.usr" : "s:4Math8RationalPAAE1moiyxx_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func *= (lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5101
              }
            ],
            "key.bodylength" : 29,
            "key.bodyoffset" : 5153,
            "key.doc.column" : 24,
            "key.doc.comment" : "Assigns product of both `Rational` values to the left-hand-side variable.",
            "key.doc.declaration" : "public static func *= (lhs: inout Self, rhs: Self)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"179\" column=\"24\"><Name>*=(_:_:)<\/Name><USR>s:4Math8RationalPAAE2meoiyyxz_xtFZ<\/USR><Declaration>public static func *= (lhs: inout Self, rhs: Self)<\/Declaration><CommentParts><Abstract><Para>Assigns product of both <codeVoice>Rational<\/codeVoice> values to the left-hand-side variable.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 179,
            "key.doc.name" : "*=(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 78,
            "key.docoffset" : 5019,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>*= <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 75,
            "key.name" : "*=(_:_:)",
            "key.namelength" : 31,
            "key.nameoffset" : 5120,
            "key.offset" : 5108,
            "key.parsed_declaration" : "public static func *= (lhs: inout Self, rhs: Self)",
            "key.parsed_scope.end" : 181,
            "key.parsed_scope.start" : 179,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF2meoiyyxz_xtFZ\">*= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf2meoiyySfz_SftFZ\">*= (_: inout Float, _: Float)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd2meoiyySdz_SdtFZ\">*= (_: inout Double, _: Double)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V2meoiyyABz_ABtFZ\">*= (_: inout Float80, _: Float80)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sj2meoiyyxz_xtFZ\">*= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz2meoiyyxz_xtFZ\">*= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2meoiyyABz_ABtFZ\">*= (_: inout UInt8, _: UInt8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2meoiyyABz_ABtFZ\">*= (_: inout Int8, _: Int8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2meoiyyABz_ABtFZ\">*= (_: inout UInt16, _: UInt16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2meoiyyABz_ABtFZ\">*= (_: inout Int16, _: Int16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2meoiyyABz_ABtFZ\">*= (_: inout UInt32, _: UInt32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2meoiyyABz_ABtFZ\">*= (_: inout Int32, _: Int32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2meoiyyABz_ABtFZ\">*= (_: inout UInt64, _: UInt64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2meoiyyABz_ABtFZ\">*= (_: inout Int64, _: Int64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2meoiyySuz_SutFZ\">*= (_: inout UInt, _: UInt)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2meoiyySiz_SitFZ\">*= (_: inout Int, _: Int)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 5124,
                "key.parent_loc" : 5120,
                "key.parsed_declaration" : "public static func *= (lhs: inout Self, rhs: Self)",
                "key.parsed_scope.end" : 179,
                "key.parsed_scope.start" : 179,
                "key.typename" : "inout Self",
                "key.typeusr" : "$SxzD",
                "key.usr" : "s:4Math8RationalPAAE2meoiyyxz_xtFZ3lhsL_xzvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (inout Self, Self) -> ()",
            "key.typeusr" : "$Syyxz_xtcD",
            "key.usr" : "s:4Math8RationalPAAE2meoiyyxz_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func \/ (lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5244
              }
            ],
            "key.bodylength" : 41,
            "key.bodyoffset" : 5297,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: Quotient of both `Rational` values.",
            "key.doc.declaration" : "public static func \/ (lhs: Self, rhs: Self) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"184\" column=\"24\"><Name>\/(_:_:)<\/Name><USR>s:4Math8RationalPAAE1doiyxx_xtFZ<\/USR><Declaration>public static func \/ (lhs: Self, rhs: Self) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>Quotient of both <codeVoice>Rational<\/codeVoice> values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 184,
            "key.doc.name" : "\/(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Quotient of both `Rational` values."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 51,
            "key.docoffset" : 5189,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>\/ <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 88,
            "key.name" : "\/(_:_:)",
            "key.namelength" : 24,
            "key.nameoffset" : 5263,
            "key.offset" : 5251,
            "key.parsed_declaration" : "public static func \/ (lhs: Self, rhs: Self) -> Self",
            "key.parsed_scope.end" : 186,
            "key.parsed_scope.start" : 184,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF1doiyxx_xtFZ\">\/ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf1doiyS2f_SftFZ\">\/ (_: Float, _: Float) -&gt; Float<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd1doiyS2d_SdtFZ\">\/ (_: Double, _: Double) -&gt; Double<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V1doiyA2B_ABtFZ\">\/ (_: Float80, _: Float80) -&gt; Float80<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz1doiyxx_xtFZ\">\/ (_: Self, _: Self) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1doiyA2B_ABtFZ\">\/ (_: UInt8, _: UInt8) -&gt; UInt8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1doiyA2B_ABtFZ\">\/ (_: Int8, _: Int8) -&gt; Int8<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1doiyA2B_ABtFZ\">\/ (_: UInt16, _: UInt16) -&gt; UInt16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1doiyA2B_ABtFZ\">\/ (_: Int16, _: Int16) -&gt; Int16<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1doiyA2B_ABtFZ\">\/ (_: UInt32, _: UInt32) -&gt; UInt32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1doiyA2B_ABtFZ\">\/ (_: Int32, _: Int32) -&gt; Int32<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1doiyA2B_ABtFZ\">\/ (_: UInt64, _: UInt64) -&gt; UInt64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1doiyA2B_ABtFZ\">\/ (_: Int64, _: Int64) -&gt; Int64<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su1doiyS2u_SutFZ\">\/ (_: UInt, _: UInt) -&gt; UInt<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si1doiyS2i_SitFZ\">\/ (_: Int, _: Int) -&gt; Int<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 5266,
                "key.parent_loc" : 5263,
                "key.parsed_declaration" : "public static func \/ (lhs: Self, rhs: Self) -> Self",
                "key.parsed_scope.end" : 184,
                "key.parsed_scope.start" : 184,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1doiyxx_xtFZ3lhsL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self, Self) -> Self",
            "key.typeusr" : "$Syxx_xtcD",
            "key.usr" : "s:4Math8RationalPAAE1doiyxx_xtFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func \/= (lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5432
              }
            ],
            "key.bodylength" : 29,
            "key.bodyoffset" : 5484,
            "key.doc.column" : 24,
            "key.doc.comment" : "Assigns the quotient of both `Rational` values to the left-hand-side variable.",
            "key.doc.declaration" : "public static func \/= (lhs: inout Self, rhs: Self)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"189\" column=\"24\"><Name>\/=(_:_:)<\/Name><USR>s:4Math8RationalPAAE2deoiyyxz_xtFZ<\/USR><Declaration>public static func \/= (lhs: inout Self, rhs: Self)<\/Declaration><CommentParts><Abstract><Para>Assigns the quotient of both <codeVoice>Rational<\/codeVoice> values to the left-hand-side variable.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 189,
            "key.doc.name" : "\/=(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 83,
            "key.docoffset" : 5345,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>\/= <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 75,
            "key.name" : "\/=(_:_:)",
            "key.namelength" : 31,
            "key.nameoffset" : 5451,
            "key.offset" : 5439,
            "key.parsed_declaration" : "public static func \/= (lhs: inout Self, rhs: Self)",
            "key.parsed_scope.end" : 191,
            "key.parsed_scope.start" : 189,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SF2deoiyyxz_xtFZ\">\/= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sf2deoiyySfz_SftFZ\">\/= (_: inout Float, _: Float)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sd2deoiyySdz_SdtFZ\">\/= (_: inout Double, _: Double)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7Float80V2deoiyyABz_ABtFZ\">\/= (_: inout Float80, _: Float80)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sz2deoiyyxz_xtFZ\">\/= (_: inout Self, _: Self)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2deoiyyABz_ABtFZ\">\/= (_: inout UInt8, _: UInt8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2deoiyyABz_ABtFZ\">\/= (_: inout Int8, _: Int8)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2deoiyyABz_ABtFZ\">\/= (_: inout UInt16, _: UInt16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2deoiyyABz_ABtFZ\">\/= (_: inout Int16, _: Int16)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2deoiyyABz_ABtFZ\">\/= (_: inout UInt32, _: UInt32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2deoiyyABz_ABtFZ\">\/= (_: inout Int32, _: Int32)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2deoiyyABz_ABtFZ\">\/= (_: inout UInt64, _: UInt64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2deoiyyABz_ABtFZ\">\/= (_: inout Int64, _: Int64)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2deoiyySuz_SutFZ\">\/= (_: inout UInt, _: UInt)<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2deoiyySiz_SitFZ\">\/= (_: inout Int, _: Int)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var lhs: inout <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 5455,
                "key.parent_loc" : 5451,
                "key.parsed_declaration" : "public static func \/= (lhs: inout Self, rhs: Self)",
                "key.parsed_scope.end" : 189,
                "key.parsed_scope.start" : 189,
                "key.typename" : "inout Self",
                "key.typeusr" : "$SxzD",
                "key.usr" : "s:4Math8RationalPAAE2deoiyyxz_xtFZ3lhsL_xzvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (inout Self, Self) -> ()",
            "key.typeusr" : "$Syyxz_xtcD",
            "key.usr" : "s:4Math8RationalPAAE2deoiyyxz_xtFZ"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 555,
        "key.bodyoffset" : 5538,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 576,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 5528,
        "key.offset" : 5518,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func mutating(numerator newNumerator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5700
              }
            ],
            "key.bodylength" : 52,
            "key.bodyoffset" : 5759,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: A new `Rational` value with the given `numerator`, which is no longer\nguaranteed to provide the same arithmetic value as before.",
            "key.doc.declaration" : "public func mutating(numerator newNumerator: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"198\" column=\"17\"><Name>mutating(numerator:)<\/Name><USR>s:4Math8RationalPAAE8mutating9numeratorxSi_tF<\/USR><Declaration>public func mutating(numerator newNumerator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>A new <codeVoice>Rational<\/codeVoice> value with the given <codeVoice>numerator<\/codeVoice>, which is no longer guaranteed to provide the same arithmetic value as before.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 198,
            "key.doc.name" : "mutating(numerator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A new `Rational` value with the given `numerator`, which is no longer guaranteed to provide the same arithmetic value as before."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 152,
            "key.docoffset" : 5544,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mutating<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>numerator<\/decl.var.parameter.argument_label> <decl.var.parameter.name>newNumerator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 105,
            "key.name" : "mutating(numerator:)",
            "key.namelength" : 37,
            "key.nameoffset" : 5712,
            "key.offset" : 5707,
            "key.parsed_declaration" : "public func mutating(numerator newNumerator: Int) -> Self",
            "key.parsed_scope.end" : 200,
            "key.parsed_scope.start" : 198,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP8mutating9numeratorxSi_tF\">mutating(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP8mutating11denominatorxSi_tF\">mutating(denominator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE8mutating11denominatorxSi_tF\">mutating(denominator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S9numeratorxSi_tcD",
            "key.usr" : "s:4Math8RationalPAAE8mutating9numeratorxSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func mutating(denominator newDenominator: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5976
              }
            ],
            "key.bodylength" : 52,
            "key.bodyoffset" : 6039,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: A new `Rational` value with the given `denominator`, which is no longer\nguaranteed to provide the same arithmetic value as before.",
            "key.doc.declaration" : "public func mutating(denominator newDenominator: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"204\" column=\"17\"><Name>mutating(denominator:)<\/Name><USR>s:4Math8RationalPAAE8mutating11denominatorxSi_tF<\/USR><Declaration>public func mutating(denominator newDenominator: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>A new <codeVoice>Rational<\/codeVoice> value with the given <codeVoice>denominator<\/codeVoice>, which is no longer guaranteed to provide the same arithmetic value as before.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 204,
            "key.doc.name" : "mutating(denominator:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A new `Rational` value with the given `denominator`, which is no longer guaranteed to provide the same arithmetic value as before."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 154,
            "key.docoffset" : 5818,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>mutating<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>denominator<\/decl.var.parameter.argument_label> <decl.var.parameter.name>newDenominator<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 109,
            "key.name" : "mutating(denominator:)",
            "key.namelength" : 41,
            "key.nameoffset" : 5988,
            "key.offset" : 5983,
            "key.parsed_declaration" : "public func mutating(denominator newDenominator: Int) -> Self",
            "key.parsed_scope.end" : 206,
            "key.parsed_scope.start" : 204,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP8mutating9numeratorxSi_tF\">mutating(numerator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP8mutating11denominatorxSi_tF\">mutating(denominator: Int) -&gt; Self<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE8mutating9numeratorxSi_tF\">mutating(numerator: Int) -&gt; Self<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Rational> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S11denominatorxSi_tcD",
            "key.usr" : "s:4Math8RationalPAAE8mutating11denominatorxSi_tF"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 148,
        "key.bodyoffset" : 6116,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 169,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 6106,
        "key.offset" : 6096,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var isReduced: <Type usr=\"s:Sb\">Bool<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6198
              }
            ],
            "key.bodylength" : 36,
            "key.bodyoffset" : 6226,
            "key.doc.column" : 16,
            "key.doc.comment" : "- returns: `true` if `self` is equivalent to its most-reduced form.",
            "key.doc.declaration" : "public var isReduced: Bool { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"212\" column=\"16\"><Name>isReduced<\/Name><USR>s:4Math8RationalPAAE9isReducedSbvp<\/USR><Declaration>public var isReduced: Bool { get }<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if <codeVoice>self<\/codeVoice> is equivalent to its most-reduced form.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 212,
            "key.doc.name" : "isReduced",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if `self` is equivalent to its most-reduced form."
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 72,
            "key.docoffset" : 6122,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>isReduced<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 58,
            "key.name" : "isReduced",
            "key.namelength" : 9,
            "key.nameoffset" : 6209,
            "key.offset" : 6205,
            "key.parsed_declaration" : "public var isReduced: Bool",
            "key.parsed_scope.end" : 214,
            "key.parsed_scope.start" : 212,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP9isReducedSbvp\">isReduced<\/RelatedName>"
              }
            ],
            "key.typename" : "Bool",
            "key.typeusr" : "$SSbD",
            "key.usr" : "s:4Math8RationalPAAE9isReducedSbvp"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 238,
        "key.bodyoffset" : 6287,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 259,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 6277,
        "key.offset" : 6267,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var floatValue: <Type usr=\"s:Sf\">Float<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6314
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 6344,
            "key.doc.column" : 16,
            "key.doc.comment" : "Float value.",
            "key.doc.declaration" : "public var floatValue: Float { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"220\" column=\"16\"><Name>floatValue<\/Name><USR>s:4Math8RationalPAAE10floatValueSfvp<\/USR><Declaration>public var floatValue: Float { get }<\/Declaration><CommentParts><Abstract><Para>Float value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 220,
            "key.doc.name" : "floatValue",
            "key.doc.type" : "Other",
            "key.doclength" : 17,
            "key.docoffset" : 6293,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>floatValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sf\">Float<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 82,
            "key.name" : "floatValue",
            "key.namelength" : 10,
            "key.nameoffset" : 6325,
            "key.offset" : 6321,
            "key.parsed_declaration" : "public var floatValue: Float",
            "key.parsed_scope.end" : 222,
            "key.parsed_scope.start" : 220,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP10floatValueSfvp\">floatValue<\/RelatedName>"
              }
            ],
            "key.typename" : "Float",
            "key.typeusr" : "$SSfD",
            "key.usr" : "s:4Math8RationalPAAE10floatValueSfvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var doubleValue: <Type usr=\"s:Sd\">Double<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6431
              }
            ],
            "key.bodylength" : 60,
            "key.bodyoffset" : 6463,
            "key.doc.column" : 16,
            "key.doc.comment" : "Double value.",
            "key.doc.declaration" : "public var doubleValue: Double { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"225\" column=\"16\"><Name>doubleValue<\/Name><USR>s:4Math8RationalPAAE11doubleValueSdvp<\/USR><Declaration>public var doubleValue: Double { get }<\/Declaration><CommentParts><Abstract><Para>Double value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 225,
            "key.doc.name" : "doubleValue",
            "key.doc.type" : "Other",
            "key.doclength" : 18,
            "key.docoffset" : 6409,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>doubleValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 86,
            "key.name" : "doubleValue",
            "key.namelength" : 11,
            "key.nameoffset" : 6442,
            "key.offset" : 6438,
            "key.parsed_declaration" : "public var doubleValue: Double",
            "key.parsed_scope.end" : 227,
            "key.parsed_scope.start" : 225,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP11doubleValueSdvp\">doubleValue<\/RelatedName>"
              }
            ],
            "key.typename" : "Double",
            "key.typeusr" : "$SSdD",
            "key.usr" : "s:4Math8RationalPAAE11doubleValueSdvp"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 137,
        "key.bodyoffset" : 6548,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 158,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 6538,
        "key.offset" : 6528,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var inverse: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6608
              }
            ],
            "key.bodylength" : 49,
            "key.bodyoffset" : 6634,
            "key.doc.column" : 16,
            "key.doc.comment" : "Inverts `denominator` and `numerator` values.",
            "key.doc.declaration" : "public var inverse: Self { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"233\" column=\"16\"><Name>inverse<\/Name><USR>s:4Math8RationalPAAE7inversexvp<\/USR><Declaration>public var inverse: Self { get }<\/Declaration><CommentParts><Abstract><Para>Inverts <codeVoice>denominator<\/codeVoice> and <codeVoice>numerator<\/codeVoice> values.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 233,
            "key.doc.name" : "inverse",
            "key.doc.type" : "Other",
            "key.doclength" : 50,
            "key.docoffset" : 6554,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>inverse<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 69,
            "key.name" : "inverse",
            "key.namelength" : 7,
            "key.nameoffset" : 6619,
            "key.offset" : 6615,
            "key.parsed_declaration" : "public var inverse: Self",
            "key.parsed_scope.end" : 235,
            "key.parsed_scope.start" : 233,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7inversexvp\">inverse<\/RelatedName>"
              }
            ],
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalPAAE7inversexvp"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 257,
        "key.bodyoffset" : 6708,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 278,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 6698,
        "key.offset" : 6688,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var reduced: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 6749
              }
            ],
            "key.bodylength" : 188,
            "key.bodyoffset" : 6775,
            "key.doc.column" : 16,
            "key.doc.comment" : "Reduced version of `self`.",
            "key.doc.declaration" : "public var reduced: Self { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"241\" column=\"16\"><Name>reduced<\/Name><USR>s:4Math8RationalPAAE7reducedxvp<\/USR><Declaration>public var reduced: Self { get }<\/Declaration><CommentParts><Abstract><Para>Reduced version of <codeVoice>self<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 241,
            "key.doc.name" : "reduced",
            "key.doc.type" : "Other",
            "key.doclength" : 31,
            "key.docoffset" : 6714,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>reduced<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 208,
            "key.name" : "reduced",
            "key.namelength" : 7,
            "key.nameoffset" : 6760,
            "key.offset" : 6756,
            "key.parsed_declaration" : "public var reduced: Self",
            "key.parsed_scope.end" : 245,
            "key.parsed_scope.start" : 241,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7reducedxvp\">reduced<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ\">reduced(_:_:)<\/RelatedName>"
              }
            ],
            "key.typename" : "Self",
            "key.typeusr" : "$SxD",
            "key.usr" : "s:4Math8RationalPAAE7reducedxvp"
          },
          {
            "key.annotated_decl" : "<Declaration>let common: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>common<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 50,
            "key.name" : "common",
            "key.namelength" : 6,
            "key.nameoffset" : 6788,
            "key.offset" : 6784,
            "key.parsed_declaration" : "let common = gcd(abs(numerator), abs(denominator))",
            "key.parsed_scope.end" : 242,
            "key.parsed_scope.start" : 242,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8RationalPAAE7reducedxvg6commonL_Sivp"
          },
          {
            "key.annotated_decl" : "<Declaration>let sign: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>sign<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 35,
            "key.name" : "sign",
            "key.namelength" : 4,
            "key.nameoffset" : 6847,
            "key.offset" : 6843,
            "key.parsed_declaration" : "let sign = denominator > 0 ? 1 : -1",
            "key.parsed_scope.end" : 243,
            "key.parsed_scope.start" : 243,
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8RationalPAAE7reducedxvg4signL_Sivp"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 296,
        "key.bodyoffset" : 6988,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 317,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 6978,
        "key.offset" : 6968,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 18,
            "key.name" : "MARK: - Comparable",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 6997
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func &lt; (lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 7133
              }
            ],
            "key.bodylength" : 96,
            "key.bodyoffset" : 7186,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: `true` if the left `Rational` is less than the right `Rational`. Otherwise,\n`false`.",
            "key.doc.declaration" : "public static func < (lhs: Self, rhs: Self) -> Bool",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"254\" column=\"24\"><Name>&lt;(_:_:)<\/Name><USR>s:4Math8RationalPAAE1loiySbx_xtFZ<\/USR><Declaration>public static func &lt; (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if the left <codeVoice>Rational<\/codeVoice> is less than the right <codeVoice>Rational<\/codeVoice>. Otherwise, <codeVoice>false<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 254,
            "key.doc.name" : "<(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if the left `Rational` is less than the right `Rational`. Otherwise, `false`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 108,
            "key.docoffset" : 7021,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>&lt; <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 143,
            "key.name" : "<(_:_:)",
            "key.namelength" : 24,
            "key.nameoffset" : 7152,
            "key.offset" : 7140,
            "key.parsed_declaration" : "public static func < (lhs: Self, rhs: Self) -> Bool",
            "key.parsed_scope.end" : 257,
            "key.parsed_scope.start" : 254,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s1loiySbyt_yttF\">&lt; (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s1loiySbx_q_t_x_q_ttSLRzSLR_r0_lF\">&lt; &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Comparable, B : Comparable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s1loiySbx_q_q0_t_x_q_q0_ttSLRzSLR_SLR0_r1_lF\">&lt; &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Comparable, B : Comparable, C : Comparable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s1loiySbx_q_q0_q1_t_x_q_q0_q1_ttSLRzSLR_SLR0_SLR1_r2_lF\">&lt; &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Comparable, B : Comparable, C : Comparable, D : Comparable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s1loiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSLRzSLR_SLR0_SLR1_SLR2_r3_lF\">&lt; &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s1loiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSLRzSLR_SLR0_SLR1_SLR2_SLR3_r4_lF\">&lt; &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Comparable, B : Comparable, C : Comparable, D : Comparable, E : Comparable, F : Comparable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ1loiySbSJ_SJtFZ\">&lt; (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ17UnicodeScalarViewV5IndexV1loiySbAD_ADtFZ\">&lt; (_: Character.UnicodeScalarView.Index, _: Character.UnicodeScalarView.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SL1loiySbx_xtFZ\">&lt; (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO1loiySbADyx_G_AFtFZ\">&lt; (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV1loiySbAByxq__G_ADtFZ\">&lt; (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyDropWhileCollectionV5IndexV1loiySbADyx_G_AFtFZ\">&lt; (_: LazyDropWhileCollection&lt;Base&gt;.Index, _: LazyDropWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FlattenCollectionV5IndexV1loiySbADyx_G_AFtFZ\">&lt; (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE1loiySbx_xtFZ\">&lt; (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE1loiySbx_qd__tSzRd__lFZ\">&lt; &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V1loiySbAB_ABtFZ\">&lt; (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V1loiySbAB_ABtFZ\">&lt; (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V1loiySbAB_ABtFZ\">&lt; (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V1loiySbAB_ABtFZ\">&lt; (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V1loiySbAB_ABtFZ\">&lt; (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V1loiySbAB_ABtFZ\">&lt; (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V1loiySbAB_ABtFZ\">&lt; (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V1loiySbAB_ABtFZ\">&lt; (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su1loiySbSu_SutFZ\">&lt; (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si1loiySbSi_SitFZ\">&lt; (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV1loiySbAD_ADtFZ\">&lt; (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO1loiySbSO_SOtFZ\">&lt; (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25LazyPrefixWhileCollectionV5IndexV1loiySbADyx_G_AFtFZ\">&lt; (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV1loiySbADyx_G_AFtFZ\">&lt; (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV1loiySbAByx_G_ADtFZ\">&lt; (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE1loiySbx_xtFZ\">&lt; (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE1loiySbx_qd__tSyRd__lFZ\">&lt; &lt;R&gt;(_: Self, _: R) -&gt; Bool where R : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS1loiySbSS_SStFZ\">&lt; (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV1loiySbAB_ABtFZ\">&lt; (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV1loiySbADyxq__G_AFtFZ\">&lt; (_: _UIntBuffer&lt;Storage, Element&gt;.Index, _: _UIntBuffer&lt;Storage, Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sp1loiySbSpyxG_ABtFZ\">&lt; (_: UnsafeMutablePointer&lt;Pointee&gt;, _: UnsafeMutablePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SP1loiySbSPyxG_ABtFZ\">&lt; (_: UnsafePointer&lt;Pointee&gt;, _: UnsafePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sv1loiySbSv_SvtFZ\">&lt; (_: UnsafeMutableRawPointer, _: UnsafeMutableRawPointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SV1loiySbSV_SVtFZ\">&lt; (_: UnsafeRawPointer, _: UnsafeRawPointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV1loiySbADyx_G_AFtFZ\">&lt; (_: _ValidUTF8Buffer&lt;Storage&gt;.Index, _: _ValidUTF8Buffer&lt;Storage&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:So30_SwiftNSOperatingSystemVersionasE1loiySbAB_ABtFZ\">&lt; (_: _SwiftNSOperatingSystemVersion, _: _SwiftNSOperatingSystemVersion) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV1loiySbAB_ABtFZ\">&lt; (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 7155,
                "key.parent_loc" : 7152,
                "key.parsed_declaration" : "public static func < (lhs: Self, rhs: Self) -> Bool",
                "key.parsed_scope.end" : 254,
                "key.parsed_scope.start" : 254,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1loiySbx_xtFZ3lhsL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>lhs<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.name" : "lhs",
                "key.namelength" : 3,
                "key.nameoffset" : 7200,
                "key.offset" : 7195,
                "key.parsed_declaration" : "let (lhs, rhs) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 255,
                "key.parsed_scope.start" : 255,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1loiySbx_xtFZ3lhsL0_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let rhs: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>rhs<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.name" : "rhs",
                "key.namelength" : 3,
                "key.nameoffset" : 7205,
                "key.offset" : 7195,
                "key.parsed_declaration" : "let (lhs, rhs) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 255,
                "key.parsed_scope.start" : 255,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE1loiySbx_xtFZ3rhsL0_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self, Self) -> Bool",
            "key.typeusr" : "$SySbx_xtcD",
            "key.usr" : "s:4Math8RationalPAAE1loiySbx_xtFZ"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 760,
        "key.bodyoffset" : 7307,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 781,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 7297,
        "key.offset" : 7287,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 17,
            "key.name" : "MARK: - Equatable",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 7316
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func reduced&lt;R&gt;(_ a: <Type usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>, _ b: <Type usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>) -&gt; (<Type usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>, <Type usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>) where R : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 7418
              }
            ],
            "key.bodylength" : 43,
            "key.bodyoffset" : 7487,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: Pair of `Rational` values, each in their most-reduced form.",
            "key.doc.declaration" : "public static func reduced<R>(_ a: R, _ b: R) -> (R, R) where R : Rational",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"265\" column=\"24\"><Name>reduced(_:_:)<\/Name><USR>s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ<\/USR><Declaration>public static func reduced&lt;R&gt;(_ a: R, _ b: R) -&gt; (R, R) where R : Rational<\/Declaration><CommentParts><ResultDiscussion><Para>Pair of <codeVoice>Rational<\/codeVoice> values, each in their most-reduced form.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 265,
            "key.doc.name" : "reduced(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Pair of `Rational` values, each in their most-reduced form."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 75,
            "key.docoffset" : 7339,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reduced<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>R : <ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 106,
            "key.name" : "reduced(_:_:)",
            "key.namelength" : 38,
            "key.nameoffset" : 7437,
            "key.offset" : 7425,
            "key.parsed_declaration" : "public static func reduced <R: Rational> (_ a: R, _ b: R) -> (R, R)",
            "key.parsed_scope.end" : 267,
            "key.parsed_scope.start" : 265,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalP7reducedxvp\">reduced<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:4Math8RationalPAAE7reducedxvp\">reduced<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>R : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 7449
                  }
                ],
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Rational"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.name" : "R",
                "key.namelength" : 1,
                "key.nameoffset" : 7446,
                "key.offset" : 7446,
                "key.parsed_declaration" : "public static func reduced <R: Rational> (_ a: R, _ b: R) -> (R, R)",
                "key.parsed_scope.end" : 265,
                "key.parsed_scope.start" : 265,
                "key.typename" : "R.Type",
                "key.typeusr" : "$Sqd__mD",
                "key.usr" : "s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp"
              }
            ],
            "key.typename" : "<Self, R where Self : Rational, R : Rational> (Self.Type) -> (R, R) -> (R, R)",
            "key.typeusr" : "$Syqd___qd__tqd___qd__tc4Math8RationalRd__luD",
            "key.usr" : "s:4Math8RationalPAAE7reducedyqd___qd__tqd___qd__tAaBRd__lFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func normalized&lt;R&gt;(_ a: <Type usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>, _ b: <Type usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>) -&gt; (<Type usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>, <Type usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/Type>) where R : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 7609
              }
            ],
            "key.bodylength" : 142,
            "key.bodyoffset" : 7681,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: Pair of `Rational` values, with common denominators.",
            "key.doc.declaration" : "public static func normalized<R>(_ a: R, _ b: R) -> (R, R) where R : Rational",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"270\" column=\"24\"><Name>normalized(_:_:)<\/Name><USR>s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ<\/USR><Declaration>public static func normalized&lt;R&gt;(_ a: R, _ b: R) -&gt; (R, R) where R : Rational<\/Declaration><CommentParts><ResultDiscussion><Para>Pair of <codeVoice>Rational<\/codeVoice> values, with common denominators.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 270,
            "key.doc.name" : "normalized(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "Pair of `Rational` values, with common denominators."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 68,
            "key.docoffset" : 7537,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.method.static><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>normalized<\/decl.name>&lt;<decl.generic_type_param usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\"><decl.generic_type_param.name>R<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp\">R<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>R : <ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.method.static>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 208,
            "key.name" : "normalized(_:_:)",
            "key.namelength" : 41,
            "key.nameoffset" : 7628,
            "key.offset" : 7616,
            "key.parsed_declaration" : "public static func normalized <R: Rational> (_ a: R, _ b: R) -> (R, R)",
            "key.parsed_scope.end" : 273,
            "key.parsed_scope.start" : 270,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>R : <Type usr=\"s:4Math8RationalP\">Rational<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 7643
                  }
                ],
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>R<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:4Math8RationalP\">Rational<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Rational"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.name" : "R",
                "key.namelength" : 1,
                "key.nameoffset" : 7640,
                "key.offset" : 7640,
                "key.parsed_declaration" : "public static func normalized <R: Rational> (_ a: R, _ b: R) -> (R, R)",
                "key.parsed_scope.end" : 270,
                "key.parsed_scope.start" : 270,
                "key.typename" : "R.Type",
                "key.typeusr" : "$Sqd__mD",
                "key.usr" : "s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ1RL_qd__mfp"
              },
              {
                "key.annotated_decl" : "<Declaration>let commonDenominator: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>commonDenominator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 57,
                "key.name" : "commonDenominator",
                "key.namelength" : 17,
                "key.nameoffset" : 7694,
                "key.offset" : 7690,
                "key.parsed_declaration" : "let commonDenominator = lcm(a.denominator, b.denominator)",
                "key.parsed_scope.end" : 271,
                "key.parsed_scope.start" : 271,
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ17commonDenominatorL_Sivp"
              }
            ],
            "key.typename" : "<Self, R where Self : Rational, R : Rational> (Self.Type) -> (R, R) -> (R, R)",
            "key.typeusr" : "$Syqd___qd__tqd___qd__tc4Math8RationalRd__luD",
            "key.usr" : "s:4Math8RationalPAAE10normalizedyqd___qd__tqd___qd__tAaBRd__lFZ"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>, rhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 7914
              }
            ],
            "key.bodylength" : 97,
            "key.bodyoffset" : 7968,
            "key.doc.column" : 24,
            "key.doc.comment" : "- returns: `true` if both values are equivalent in their most-reduced form.",
            "key.doc.declaration" : "public static func == (lhs: Self, rhs: Self) -> Bool",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"276\" column=\"24\"><Name>==(_:_:)<\/Name><USR>s:4Math8RationalPAAE2eeoiySbx_xtFZ<\/USR><Declaration>public static func == (lhs: Self, rhs: Self) -&gt; Bool<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>true<\/codeVoice> if both values are equivalent in their most-reduced form.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 276,
            "key.doc.name" : "==(_:_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "`true` if both values are equivalent in their most-reduced form."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 80,
            "key.docoffset" : 7830,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 145,
            "key.name" : "==(_:_:)",
            "key.namelength" : 25,
            "key.nameoffset" : 7933,
            "key.offset" : 7921,
            "key.parsed_declaration" : "public static func == (lhs: Self, rhs: Self) -> Bool",
            "key.parsed_scope.end" : 279,
            "key.parsed_scope.start" : 276,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbypXpSg_ABtF\">== (_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_xtSYRzSQ8RawValueRpzlF\">== &lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbyt_yttF\">== (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF\">== &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_t_x_q_q0_ttSQRzSQR_SQR0_r1_lF\">== &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_t_x_q_q0_q1_ttSQRzSQR_SQR0_SQR1_r2_lF\">== &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSQRzSQR_SQR0_SQR1_SQR2_r3_lF\">== &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSQRzSQR_SQR0_SQR1_SQR2_SQR3_r4_lF\">== &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15ContiguousArrayVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ContiguousArray&lt;ContiguousArray&lt;Element&gt;.Element&gt;, _: ContiguousArray&lt;ContiguousArray&lt;Element&gt;.Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10ArraySliceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ArraySlice&lt;ArraySlice&lt;Element&gt;.Element&gt;, _: ArraySlice&lt;ArraySlice&lt;Element&gt;.Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSQRzlE2eeoiySbSayxG_ABtFZ\">== (_: Array&lt;Array&lt;Element&gt;.Element&gt;, _: Array&lt;Array&lt;Element&gt;.Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiyS2b_SbtFZ\">== (_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SA2eeoiySbSAyxG_ABtFZ\">== (_: AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;, _: AutoreleasingUnsafeMutablePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ2eeoiySbSJ_SJtFZ\">== (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ17UnicodeScalarViewV5IndexV2eeoiySbAD_ADtFZ\">== (_: Character.UnicodeScalarView.Index, _: Character.UnicodeScalarView.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiySbAB_ABtFZ\">== (_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO2eeoiySbADyx_G_AFtFZ\">== (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SN2eeoiySbSNyxG_ABtFZ\">== (_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiySbAB_ABtFZ\">== (_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD4KeysV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SDsSQR_rlE2eeoiySbSDyxq_G_ABtFZ\">== (_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyDropWhileCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyDropWhileCollection&lt;Base&gt;.Index, _: LazyDropWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiySbAByxG_ADtFZ\">== (_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SQ2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FlattenCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FloatingPointSignO2eeoiySbAB_ABtFZ\">== (_: FloatingPointSign, _: FloatingPointSign) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiySbAB_ABtFZ\">== (_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE2eeoiySbx_qd__tSzRd__lFZ\">== &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiySbAB_ABtFZ\">== (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiySbAB_ABtFZ\">== (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiySbAB_ABtFZ\">== (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiySbAB_ABtFZ\">== (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiySbAB_ABtFZ\">== (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiySbAB_ABtFZ\">== (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiySbAB_ABtFZ\">== (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiySbAB_ABtFZ\">== (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiySbSu_SutFZ\">== (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiySbSi_SitFZ\">== (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiySbAB_ABtFZ\">== (_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiySbAByxq_G_ADtFZ\">== (_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiySbAD_ADtFZ\">== (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO2eeoiySbSO_SOtFZ\">== (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SqsSQRzlE2eeoiySbxSg_ABtFZ\">== (_: Wrapped?, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ\">== (_: Wrapped?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbs26_OptionalNilComparisonTypeV_xSgtFZ\">== (_: _OptionalNilComparisonType, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25LazyPrefixWhileCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sn2eeoiySbSnyxG_ABtFZ\">== (_: Range&lt;Range&lt;Bound&gt;.Bound&gt;, _: Range&lt;Range&lt;Bound&gt;.Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh2eeoiySbShyxG_ABtFZ\">== (_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV2eeoiySbAByx_G_ADtFZ\">== (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE2eeoiySbx_qd__tSyRd__lFZ\">== &lt;S&gt;(_: Self, _: S) -&gt; Bool where S : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiySbSS_SStFZ\">== (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiySbAB_ABtFZ\">== (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiySbADyxq__G_AFtFZ\">== (_: _UIntBuffer&lt;Storage, Element&gt;.Index, _: _UIntBuffer&lt;Storage, Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sp2eeoiySbSpyxG_ABtFZ\">== (_: UnsafeMutablePointer&lt;Pointee&gt;, _: UnsafeMutablePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SP2eeoiySbSPyxG_ABtFZ\">== (_: UnsafePointer&lt;Pointee&gt;, _: UnsafePointer&lt;Pointee&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sv2eeoiySbSv_SvtFZ\">== (_: UnsafeMutableRawPointer, _: UnsafeMutableRawPointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SV2eeoiySbSV_SVtFZ\">== (_: UnsafeRawPointer, _: UnsafeRawPointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiySbAB_ABtFZ\">== (_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: _ValidUTF8Buffer&lt;Storage&gt;.Index, _: _ValidUTF8Buffer&lt;Storage&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:So30_SwiftNSOperatingSystemVersionasE2eeoiySbAB_ABtFZ\">== (_: _SwiftNSOperatingSystemVersion, _: _SwiftNSOperatingSystemVersion) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiySbAB_ABtFZ\">== (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:4Math8RationalPAAE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 7937,
                "key.parent_loc" : 7933,
                "key.parsed_declaration" : "public static func == (lhs: Self, rhs: Self) -> Bool",
                "key.parsed_scope.end" : 276,
                "key.parsed_scope.start" : 276,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE2eeoiySbx_xtFZ3lhsL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>lhs<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.name" : "lhs",
                "key.namelength" : 3,
                "key.nameoffset" : 7982,
                "key.offset" : 7977,
                "key.parsed_declaration" : "let (lhs, rhs) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 277,
                "key.parsed_scope.start" : 277,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE2eeoiySbx_xtFZ3lhsL0_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let rhs: <Type usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>rhs<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:4Math8RationalP4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.name" : "rhs",
                "key.namelength" : 3,
                "key.nameoffset" : 7987,
                "key.offset" : 7977,
                "key.parsed_declaration" : "let (lhs, rhs) = normalized(lhs, rhs)",
                "key.parsed_scope.end" : 277,
                "key.parsed_scope.start" : 277,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:4Math8RationalPAAE2eeoiySbx_xtFZ3rhsL0_xvp"
              }
            ],
            "key.typename" : "<Self where Self : Rational> (Self.Type) -> (Self, Self) -> Bool",
            "key.typeusr" : "$SySbx_xtcD",
            "key.usr" : "s:4Math8RationalPAAE2eeoiySbx_xtFZ"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 121,
        "key.bodyoffset" : 8090,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 142,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 8080,
        "key.offset" : 8070,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 16,
            "key.name" : "MARK: - Hashable",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 8099
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var hashValue: <Type usr=\"s:Si\">Int<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 8141
              }
            ],
            "key.bodylength" : 41,
            "key.bodyoffset" : 8168,
            "key.doc.column" : 16,
            "key.doc.comment" : "Hash value.",
            "key.doc.declaration" : "public var hashValue: Int { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"287\" column=\"16\"><Name>hashValue<\/Name><USR>s:4Math8RationalPAAE9hashValueSivp<\/USR><Declaration>public var hashValue: Int { get }<\/Declaration><CommentParts><Abstract><Para>Hash value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 287,
            "key.doc.name" : "hashValue",
            "key.doc.type" : "Other",
            "key.doclength" : 16,
            "key.docoffset" : 8121,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>hashValue<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 62,
            "key.name" : "hashValue",
            "key.namelength" : 9,
            "key.nameoffset" : 8152,
            "key.offset" : 8148,
            "key.parsed_declaration" : "public var hashValue: Int",
            "key.parsed_scope.end" : 289,
            "key.parsed_scope.start" : 287,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SH9hashValueSivp\">hashValue<\/RelatedName>"
              }
            ],
            "key.typename" : "Int",
            "key.typeusr" : "$SSiD",
            "key.usr" : "s:4Math8RationalPAAE9hashValueSivp"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      },
      {
        "key.annotated_decl" : "<Declaration>public protocol Rational : <Type usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/Type>, <Type usr=\"s:SH\">Hashable<\/Type>, <Type usr=\"s:s13SignedNumericP\">SignedNumeric<\/Type>, <Type usr=\"s:Sx\">Strideable<\/Type><\/Declaration>",
        "key.bodylength" : 159,
        "key.bodyoffset" : 8234,
        "key.doc.column" : 17,
        "key.doc.declaration" : "public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"13\" column=\"17\"><Name>Rational<\/Name><USR>s:4Math8RationalP<\/USR><Declaration>public protocol Rational : CustomStringConvertible, Hashable, SignedNumeric, Strideable<\/Declaration><CommentParts><Abstract><Para>Model of ratio.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 13,
        "key.doc.name" : "Rational",
        "key.doc.type" : "Class",
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Rational<\/decl.name> : <ref.protocol usr=\"s:s23CustomStringConvertibleP\">CustomStringConvertible<\/ref.protocol>, <ref.protocol usr=\"s:SH\">Hashable<\/ref.protocol>, <ref.protocol usr=\"s:s13SignedNumericP\">SignedNumeric<\/ref.protocol>, <ref.protocol usr=\"s:Sx\">Strideable<\/ref.protocol><\/decl.protocol>",
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 180,
        "key.name" : "Rational",
        "key.namelength" : 8,
        "key.nameoffset" : 8224,
        "key.offset" : 8214,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 31,
            "key.name" : "MARK: - CustomStringConvertible",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 8243
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var description: <Type usr=\"s:SS\">String<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 8309
              }
            ],
            "key.bodylength" : 50,
            "key.bodyoffset" : 8341,
            "key.doc.column" : 16,
            "key.doc.comment" : "Printed description.",
            "key.doc.declaration" : "public var description: String { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift\" line=\"297\" column=\"16\"><Name>description<\/Name><USR>s:4Math8RationalPAAE11descriptionSSvp<\/USR><Declaration>public var description: String { get }<\/Declaration><CommentParts><Abstract><Para>Printed description.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 297,
            "key.doc.name" : "description",
            "key.doc.type" : "Other",
            "key.doclength" : 25,
            "key.docoffset" : 8280,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Rational.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>description<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 76,
            "key.name" : "description",
            "key.namelength" : 11,
            "key.nameoffset" : 8320,
            "key.offset" : 8316,
            "key.parsed_declaration" : "public var description: String",
            "key.parsed_scope.end" : 299,
            "key.parsed_scope.start" : 297,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23CustomStringConvertibleP11descriptionSSvp\">description<\/RelatedName>"
              }
            ],
            "key.typename" : "String",
            "key.typeusr" : "$SSSD",
            "key.usr" : "s:4Math8RationalPAAE11descriptionSSvp"
          }
        ],
        "key.typename" : "Rational.Protocol",
        "key.typeusr" : "$S4Math8Rational_pmD",
        "key.usr" : "s:4Math8RationalP"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 775,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>struct Int : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type><\/Declaration>",
        "key.bodylength" : 205,
        "key.bodyoffset" : 173,
        "key.doc.declaration" : "struct Int : FixedWidthInteger, SignedInteger",
        "key.doc.discussion" : [
          {
            "Para" : "On 32-bit platforms, `Int` is the same size as `Int32`, and on 64-bit platforms, `Int` is the same size as `Int64`."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Int<\/Name><USR>s:Si<\/USR><Declaration>struct Int : FixedWidthInteger, SignedInteger<\/Declaration><CommentParts><Abstract><Para>A signed integer value type.<\/Para><\/Abstract><Discussion><Para>On 32-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int32<\/codeVoice>, and on 64-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int64<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Int",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 221,
        "key.modulename" : "Swift",
        "key.name" : "Int",
        "key.namelength" : 3,
        "key.nameoffset" : 168,
        "key.offset" : 158,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func formatted(digits: <Type usr=\"s:Si\">Int<\/Type> = default) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 240
              }
            ],
            "key.bodylength" : 86,
            "key.bodyoffset" : 290,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: `String` with the given amount of digits.",
            "key.doc.declaration" : "public func formatted(digits: Int = default) -> String",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift\" line=\"14\" column=\"17\"><Name>formatted(digits:)<\/Name><USR>s:Si4MathE9formatted6digitsSSSi_tF<\/USR><Declaration>public func formatted(digits: Int = default) -&gt; String<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>String<\/codeVoice> with the given amount of digits.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 14,
            "key.doc.name" : "formatted(digits:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "`String` with the given amount of digits."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 57,
            "key.docoffset" : 179,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatted<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>digits<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 130,
            "key.name" : "formatted(digits:)",
            "key.namelength" : 26,
            "key.nameoffset" : 252,
            "key.offset" : 247,
            "key.parsed_declaration" : "public func formatted(digits: Int = 0) -> String",
            "key.parsed_scope.end" : 17,
            "key.parsed_scope.start" : 14,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let format: <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>format<\/decl.name>: <decl.var.type><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Math\/Integers",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 28,
                "key.name" : "format",
                "key.namelength" : 6,
                "key.nameoffset" : 303,
                "key.offset" : 299,
                "key.parsed_declaration" : "let format = \"%0\\(digits)ld\"",
                "key.parsed_scope.end" : 15,
                "key.parsed_scope.start" : 15,
                "key.typename" : "String",
                "key.typeusr" : "$SSSD",
                "key.usr" : "s:Si4MathE9formatted6digitsSSSi_tF6formatL_SSvp"
              }
            ],
            "key.typename" : "(Int) -> (Int) -> String",
            "key.typeusr" : "$S6digitsSSSi_tcD",
            "key.usr" : "s:Si4MathE9formatted6digitsSSSi_tF"
          }
        ],
        "key.typename" : "Int.Type",
        "key.typeusr" : "$SSimD",
        "key.usr" : "s:Si"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Float<\/Declaration>",
        "key.bodylength" : 177,
        "key.bodyoffset" : 398,
        "key.doc.declaration" : "struct Float",
        "key.doc.full_as_xml" : "<Class><Name>Float<\/Name><USR>s:Sf<\/USR><Declaration>struct Float<\/Declaration><CommentParts><Abstract><Para>A single-precision, floating-point value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Float",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Float<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 195,
        "key.modulename" : "Swift",
        "key.name" : "Float",
        "key.namelength" : 5,
        "key.nameoffset" : 391,
        "key.offset" : 381,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func formatted(digits: <Type usr=\"s:Si\">Int<\/Type> = default) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 465
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 515,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: `String` with the given amount of digits.",
            "key.doc.declaration" : "public func formatted(digits: Int = default) -> String",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift\" line=\"23\" column=\"17\"><Name>formatted(digits:)<\/Name><USR>s:Sf4MathE9formatted6digitsSSSi_tF<\/USR><Declaration>public func formatted(digits: Int = default) -&gt; String<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>String<\/codeVoice> with the given amount of digits.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 23,
            "key.doc.name" : "formatted(digits:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "`String` with the given amount of digits."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 57,
            "key.docoffset" : 404,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatted<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>digits<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 102,
            "key.name" : "formatted(digits:)",
            "key.namelength" : 26,
            "key.nameoffset" : 477,
            "key.offset" : 472,
            "key.parsed_declaration" : "public func formatted(digits: Int = 0) -> String",
            "key.parsed_scope.end" : 25,
            "key.parsed_scope.start" : 23,
            "key.substructure" : [

            ],
            "key.typename" : "(Float) -> (Int) -> String",
            "key.typeusr" : "$S6digitsSSSi_tcD",
            "key.usr" : "s:Sf4MathE9formatted6digitsSSSi_tF"
          }
        ],
        "key.typename" : "Float.Type",
        "key.typeusr" : "$SSfmD",
        "key.usr" : "s:Sf"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Double<\/Declaration>",
        "key.bodylength" : 177,
        "key.bodyoffset" : 596,
        "key.doc.declaration" : "struct Double",
        "key.doc.full_as_xml" : "<Class><Name>Double<\/Name><USR>s:Sd<\/USR><Declaration>struct Double<\/Declaration><CommentParts><Abstract><Para>A double-precision, floating-point value type.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.name" : "Double",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Double<\/decl.name><\/decl.struct>",
        "key.groupname" : "Math\/Floating",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 196,
        "key.modulename" : "Swift",
        "key.name" : "Double",
        "key.namelength" : 6,
        "key.nameoffset" : 588,
        "key.offset" : 578,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func formatted(digits: <Type usr=\"s:Si\">Int<\/Type> = default) -&gt; <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 663
              }
            ],
            "key.bodylength" : 58,
            "key.bodyoffset" : 713,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: `String` with the given amount of digits.",
            "key.doc.declaration" : "public func formatted(digits: Int = default) -> String",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift\" line=\"31\" column=\"17\"><Name>formatted(digits:)<\/Name><USR>s:Sd4MathE9formatted6digitsSSSi_tF<\/USR><Declaration>public func formatted(digits: Int = default) -&gt; String<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>String<\/codeVoice> with the given amount of digits.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 31,
            "key.doc.name" : "formatted(digits:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "`String` with the given amount of digits."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 57,
            "key.docoffset" : 602,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/StringFormatting.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>formatted<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>digits<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type> = <syntaxtype.keyword>default<\/syntaxtype.keyword><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Floating",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 102,
            "key.name" : "formatted(digits:)",
            "key.namelength" : 26,
            "key.nameoffset" : 675,
            "key.offset" : 670,
            "key.parsed_declaration" : "public func formatted(digits: Int = 0) -> String",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 31,
            "key.substructure" : [

            ],
            "key.typename" : "(Double) -> (Int) -> String",
            "key.typeusr" : "$S6digitsSSSi_tcD",
            "key.usr" : "s:Sd4MathE9formatted6digitsSSSi_tF"
          }
        ],
        "key.typename" : "Double.Type",
        "key.typeusr" : "$SSdmD",
        "key.usr" : "s:Sd"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 592,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct Vector2<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 172
          }
        ],
        "key.bodylength" : 395,
        "key.bodyoffset" : 195,
        "key.doc.column" : 15,
        "key.doc.comment" : "Two-dimensional Vector.",
        "key.doc.declaration" : "public struct Vector2",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift\" line=\"12\" column=\"15\"><Name>Vector2<\/Name><USR>s:4Math7Vector2V<\/USR><Declaration>public struct Vector2<\/Declaration><CommentParts><Abstract><Para>Two-dimensional Vector.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 12,
        "key.doc.name" : "Vector2",
        "key.doc.type" : "Class",
        "key.doclength" : 28,
        "key.docoffset" : 144,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Vector2<\/decl.name><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 412,
        "key.name" : "Vector2",
        "key.namelength" : 7,
        "key.nameoffset" : 186,
        "key.offset" : 179,
        "key.parsed_declaration" : "public struct Vector2",
        "key.parsed_scope.end" : 34,
        "key.parsed_scope.start" : 12,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 27,
            "key.name" : "MARK: - Instance Properties",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 204
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var length: <Type usr=\"s:Sd\">Double<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 267
              }
            ],
            "key.bodylength" : 31,
            "key.bodyoffset" : 294,
            "key.doc.column" : 16,
            "key.doc.comment" : "Length of a `Vector2`",
            "key.doc.declaration" : "public var length: Double { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift\" line=\"17\" column=\"16\"><Name>length<\/Name><USR>s:4Math7Vector2V6lengthSdvp<\/USR><Declaration>public var length: Double { get }<\/Declaration><CommentParts><Abstract><Para>Length of a <codeVoice>Vector2<\/codeVoice><\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 17,
            "key.doc.name" : "length",
            "key.doc.type" : "Other",
            "key.doclength" : 26,
            "key.docoffset" : 237,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>length<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 52,
            "key.name" : "length",
            "key.namelength" : 6,
            "key.nameoffset" : 278,
            "key.offset" : 274,
            "key.parsed_declaration" : "public var length: Double",
            "key.parsed_scope.end" : 19,
            "key.parsed_scope.start" : 17,
            "key.typename" : "Double",
            "key.typeusr" : "$SSdD",
            "key.usr" : "s:4Math7Vector2V6lengthSdvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let x: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 349
              }
            ],
            "key.doc.column" : 16,
            "key.doc.comment" : "X value.",
            "key.doc.declaration" : "public let x: Double",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift\" line=\"22\" column=\"16\"><Name>x<\/Name><USR>s:4Math7Vector2V1xSdvp<\/USR><Declaration>public let x: Double<\/Declaration><CommentParts><Abstract><Para>X value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 22,
            "key.doc.name" : "x",
            "key.doc.type" : "Other",
            "key.doclength" : 13,
            "key.docoffset" : 332,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>x<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 13,
            "key.name" : "x",
            "key.namelength" : 1,
            "key.nameoffset" : 360,
            "key.offset" : 356,
            "key.parsed_declaration" : "public let x: Double",
            "key.parsed_scope.end" : 22,
            "key.parsed_scope.start" : 22,
            "key.typename" : "Double",
            "key.typeusr" : "$SSdD",
            "key.usr" : "s:4Math7Vector2V1xSdvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public let y: <Type usr=\"s:Sd\">Double<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 392
              }
            ],
            "key.doc.column" : 16,
            "key.doc.comment" : "Y value.",
            "key.doc.declaration" : "public let y: Double",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift\" line=\"25\" column=\"16\"><Name>y<\/Name><USR>s:4Math7Vector2V1ySdvp<\/USR><Declaration>public let y: Double<\/Declaration><CommentParts><Abstract><Para>Y value.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 25,
            "key.doc.name" : "y",
            "key.doc.type" : "Other",
            "key.doclength" : 13,
            "key.docoffset" : 375,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>y<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 13,
            "key.name" : "y",
            "key.namelength" : 1,
            "key.nameoffset" : 403,
            "key.offset" : 399,
            "key.parsed_declaration" : "public let y: Double",
            "key.parsed_scope.end" : 25,
            "key.parsed_scope.start" : 25,
            "key.typename" : "Double",
            "key.typeusr" : "$SSdD",
            "key.usr" : "s:4Math7Vector2V1ySdvp"
          },
          {
            "key.kind" : "source.lang.swift.syntaxtype.comment.mark",
            "key.length" : 20,
            "key.name" : "MARK: - Initializers",
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 421
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(x: <Type usr=\"s:Sd\">Double<\/Type>, y: <Type usr=\"s:Sd\">Double<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 510
              }
            ],
            "key.bodylength" : 43,
            "key.bodyoffset" : 545,
            "key.doc.column" : 12,
            "key.doc.comment" : "Creates a `Vector2` with the given `x` and `y` values.",
            "key.doc.declaration" : "public init(x: Double, y: Double)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift\" line=\"30\" column=\"12\"><Name>init(x:y:)<\/Name><USR>s:4Math7Vector2V1x1yACSd_Sdtcfc<\/USR><Declaration>public init(x: Double, y: Double)<\/Declaration><CommentParts><Abstract><Para>Creates a <codeVoice>Vector2<\/codeVoice> with the given <codeVoice>x<\/codeVoice> and <codeVoice>y<\/codeVoice> values.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 30,
            "key.doc.name" : "init(x:y:)",
            "key.doc.type" : "Function",
            "key.doclength" : 59,
            "key.docoffset" : 447,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Math\/Sources\/Math\/Vector2.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>x<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>y<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Sd\">Double<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 72,
            "key.name" : "init(x:y:)",
            "key.namelength" : 26,
            "key.nameoffset" : 517,
            "key.offset" : 517,
            "key.parsed_declaration" : "public init(x: Double, y: Double)",
            "key.parsed_scope.end" : 33,
            "key.parsed_scope.start" : 30,
            "key.substructure" : [

            ],
            "key.typename" : "(Vector2.Type) -> (Double, Double) -> Vector2",
            "key.typeusr" : "$S1x1y4Math7Vector2VSd_SdtcD",
            "key.usr" : "s:4Math7Vector2V1x1yACSd_Sdtcfc"
          }
        ],
        "key.typename" : "Vector2.Type",
        "key.typeusr" : "$S4Math7Vector2VmD",
        "key.usr" : "s:4Math7Vector2V"
      }
    ]
  }
}]
